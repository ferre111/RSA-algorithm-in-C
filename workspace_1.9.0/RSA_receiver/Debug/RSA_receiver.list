
RSA_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d4  080044d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080044d4  080044d4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044d4  080044d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000070  0800454c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800454c  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006bee  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001952  00000000  00000000  00026c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  000285e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  00028da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cb7  00000000  00000000  000294b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083af  00000000  00000000  0004116f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083936  00000000  00000000  0004951e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cce54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a9c  00000000  00000000  000ccea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004194 	.word	0x08004194

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004194 	.word	0x08004194

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <rsa_gcd>:
#include <assert.h>

#include "rsa.h"

/* gcd - Greatest common divisor */
static int32_t rsa_gcd(int32_t a, int32_t b) {
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	int32_t aux_var = 0;
 8000166:	2300      	movs	r3, #0
 8000168:	60fb      	str	r3, [r7, #12]

	/* if b is greater than swap their values */
	if (b > a) {
 800016a:	683a      	ldr	r2, [r7, #0]
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	429a      	cmp	r2, r3
 8000170:	dd05      	ble.n	800017e <rsa_gcd+0x22>
		aux_var = a;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	60fb      	str	r3, [r7, #12]
		a = b;
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	607b      	str	r3, [r7, #4]
		b = aux_var;
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	603b      	str	r3, [r7, #0]
	}

	while(1) {
		aux_var = a % b;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	683a      	ldr	r2, [r7, #0]
 8000182:	fb93 f2f2 	sdiv	r2, r3, r2
 8000186:	6839      	ldr	r1, [r7, #0]
 8000188:	fb01 f202 	mul.w	r2, r1, r2
 800018c:	1a9b      	subs	r3, r3, r2
 800018e:	60fb      	str	r3, [r7, #12]
		if (!aux_var) {
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d101      	bne.n	800019a <rsa_gcd+0x3e>
			return b;
 8000196:	683b      	ldr	r3, [r7, #0]
 8000198:	e004      	b.n	80001a4 <rsa_gcd+0x48>
		}
		a = b;
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	607b      	str	r3, [r7, #4]
		b = aux_var;
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	603b      	str	r3, [r7, #0]
		aux_var = a % b;
 80001a2:	e7ec      	b.n	800017e <rsa_gcd+0x22>
	}
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3714      	adds	r7, #20
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <modpow>:

static uint32_t modpow(uint32_t base, uint32_t power, uint32_t mod)
{
 80001ae:	b480      	push	{r7}
 80001b0:	b087      	sub	sp, #28
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	60f8      	str	r0, [r7, #12]
 80001b6:	60b9      	str	r1, [r7, #8]
 80001b8:	607a      	str	r2, [r7, #4]
    uint32_t result = 1;
 80001ba:	2301      	movs	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < power; i++)
 80001be:	2300      	movs	r3, #0
 80001c0:	613b      	str	r3, [r7, #16]
 80001c2:	e00e      	b.n	80001e2 <modpow+0x34>
    {
            result = (result * base) % mod;
 80001c4:	697b      	ldr	r3, [r7, #20]
 80001c6:	68fa      	ldr	r2, [r7, #12]
 80001c8:	fb02 f303 	mul.w	r3, r2, r3
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80001d2:	6879      	ldr	r1, [r7, #4]
 80001d4:	fb01 f202 	mul.w	r2, r1, r2
 80001d8:	1a9b      	subs	r3, r3, r2
 80001da:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < power; i++)
 80001dc:	693b      	ldr	r3, [r7, #16]
 80001de:	3301      	adds	r3, #1
 80001e0:	613b      	str	r3, [r7, #16]
 80001e2:	693a      	ldr	r2, [r7, #16]
 80001e4:	68bb      	ldr	r3, [r7, #8]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d3ec      	bcc.n	80001c4 <modpow+0x16>
    }
    return result;
 80001ea:	697b      	ldr	r3, [r7, #20]
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	371c      	adds	r7, #28
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
	...

080001f8 <rsa_init>:
 
void rsa_init(uint32_t p, uint32_t q, rsa_structure* rsa_ctx) {
 80001f8:	b5b0      	push	{r4, r5, r7, lr}
 80001fa:	b08a      	sub	sp, #40	; 0x28
 80001fc:	af04      	add	r7, sp, #16
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
	// todo here we can check if p and q are prime numbers	
	uint32_t aux_var = 0;
 8000204:	2300      	movs	r3, #0
 8000206:	617b      	str	r3, [r7, #20]
	rsa_ctx->p_prime = p;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	601a      	str	r2, [r3, #0]
	rsa_ctx->q_prime = q;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	68ba      	ldr	r2, [r7, #8]
 8000212:	605a      	str	r2, [r3, #4]

	rsa_ctx->public_key.n = rsa_ctx->p_prime * rsa_ctx->q_prime;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	6852      	ldr	r2, [r2, #4]
 800021c:	fb03 f202 	mul.w	r2, r3, r2
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	611a      	str	r2, [r3, #16]
	rsa_ctx->totient = (rsa_ctx->p_prime - 1) * (rsa_ctx->q_prime - 1);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	3b01      	subs	r3, #1
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	6852      	ldr	r2, [r2, #4]
 800022e:	3a01      	subs	r2, #1
 8000230:	fb03 f202 	mul.w	r2, r3, r2
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	609a      	str	r2, [r3, #8]

	/* public key is any number belonging to Z*fi(n) that means public key and fi(n) are coprime (gcd == 1), find public key */
    // todo it would probably be safer if public key would be choose randomly
	rsa_ctx->public_key.e = 2;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2202      	movs	r2, #2
 800023c:	615a      	str	r2, [r3, #20]
	while (1) {
		aux_var = rsa_gcd(rsa_ctx->public_key.e, rsa_ctx->totient);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	461a      	mov	r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	4619      	mov	r1, r3
 800024a:	4610      	mov	r0, r2
 800024c:	f7ff ff86 	bl	800015c <rsa_gcd>
 8000250:	4603      	mov	r3, r0
 8000252:	617b      	str	r3, [r7, #20]
		if (aux_var == 1) {
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d005      	beq.n	8000266 <rsa_init+0x6e>
			break;
		}
		rsa_ctx->public_key.e++;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	1c5a      	adds	r2, r3, #1
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	615a      	str	r2, [r3, #20]
		aux_var = rsa_gcd(rsa_ctx->public_key.e, rsa_ctx->totient);
 8000264:	e7eb      	b.n	800023e <rsa_init+0x46>
			break;
 8000266:	bf00      	nop
	}

	/* d = e^-1(mod totient), find private key */
	for (rsa_ctx->d = 0; rsa_ctx->d < rsa_ctx->totient; rsa_ctx->d++) {
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2200      	movs	r2, #0
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	e015      	b.n	800029c <rsa_init+0xa4>
		aux_var = rsa_ctx->d * rsa_ctx->public_key.e % rsa_ctx->totient;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	6952      	ldr	r2, [r2, #20]
 8000278:	fb02 f303 	mul.w	r3, r2, r3
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	6892      	ldr	r2, [r2, #8]
 8000280:	fbb3 f1f2 	udiv	r1, r3, r2
 8000284:	fb01 f202 	mul.w	r2, r1, r2
 8000288:	1a9b      	subs	r3, r3, r2
 800028a:	617b      	str	r3, [r7, #20]
		if (aux_var == 1) {
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d00b      	beq.n	80002aa <rsa_init+0xb2>
	for (rsa_ctx->d = 0; rsa_ctx->d < rsa_ctx->totient; rsa_ctx->d++) {
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	1c5a      	adds	r2, r3, #1
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d3e3      	bcc.n	8000270 <rsa_init+0x78>
 80002a8:	e000      	b.n	80002ac <rsa_init+0xb4>
			break;
 80002aa:	bf00      	nop
		}
	}
	
	printf("RSA parameters:\np_prime: %ld\nq_prime: %ld\nn: %ld\ntotient: %ld\ne: %ld\nd: %ld\n", rsa_ctx->p_prime, rsa_ctx->q_prime,
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	6818      	ldr	r0, [r3, #0]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	685c      	ldr	r4, [r3, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	691d      	ldr	r5, [r3, #16]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	6952      	ldr	r2, [r2, #20]
 80002c0:	6879      	ldr	r1, [r7, #4]
 80002c2:	68c9      	ldr	r1, [r1, #12]
 80002c4:	9102      	str	r1, [sp, #8]
 80002c6:	9201      	str	r2, [sp, #4]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	462b      	mov	r3, r5
 80002cc:	4622      	mov	r2, r4
 80002ce:	4601      	mov	r1, r0
 80002d0:	4803      	ldr	r0, [pc, #12]	; (80002e0 <rsa_init+0xe8>)
 80002d2:	f002 ff81 	bl	80031d8 <iprintf>
		rsa_ctx->public_key.n, rsa_ctx->totient, rsa_ctx->public_key.e, rsa_ctx->d);
}
 80002d6:	bf00      	nop
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bdb0      	pop	{r4, r5, r7, pc}
 80002de:	bf00      	nop
 80002e0:	080041ac 	.word	0x080041ac

080002e4 <rsa_decrypt>:
uint32_t rsa_encrypt(uint32_t msg, rsa_public_key* public_key) {
    assert(msg < public_key->n);
	return modpow(msg, public_key->e, public_key->n);
}

uint32_t rsa_decrypt(uint32_t encrypted_msg, rsa_structure* rsa_ctx) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
	return modpow(encrypted_msg, rsa_ctx->d, rsa_ctx->public_key.n);
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	68d9      	ldr	r1, [r3, #12]
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	691b      	ldr	r3, [r3, #16]
 80002f6:	461a      	mov	r2, r3
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f7ff ff58 	bl	80001ae <modpow>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <rsa_get_public_key>:

rsa_public_key *rsa_get_public_key(rsa_structure* rsa_ctx) {
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
    return &rsa_ctx->public_key;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3310      	adds	r3, #16
}
 8000314:	4618      	mov	r0, r3
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
	...

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b0a0      	sub	sp, #128	; 0x80
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000326:	f000 fc89 	bl	8000c3c <HAL_Init>

  /* USER CODE BEGIN Init */
  rsa_init(59, 67, &rsa_ctx);
 800032a:	4a1e      	ldr	r2, [pc, #120]	; (80003a4 <main+0x84>)
 800032c:	2143      	movs	r1, #67	; 0x43
 800032e:	203b      	movs	r0, #59	; 0x3b
 8000330:	f7ff ff62 	bl	80001f8 <rsa_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000334:	f000 f842 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000338:	f000 f914 	bl	8000564 <MX_GPIO_Init>
  MX_DMA_Init();
 800033c:	f000 f8f4 	bl	8000528 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000340:	f000 f8c8 	bl	80004d4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000344:	f000 f89c 	bl	8000480 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000348:	f000 f87d 	bl	8000446 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_buffer, sizeof(receive_buffer) / sizeof(receive_buffer[0]));
 800034c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000350:	4915      	ldr	r1, [pc, #84]	; (80003a8 <main+0x88>)
 8000352:	4816      	ldr	r0, [pc, #88]	; (80003ac <main+0x8c>)
 8000354:	f001 fec7 	bl	80020e6 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)"Reciver connected\n", strlen("Reciver connected\n"));
 8000358:	2212      	movs	r2, #18
 800035a:	4915      	ldr	r1, [pc, #84]	; (80003b0 <main+0x90>)
 800035c:	4815      	ldr	r0, [pc, #84]	; (80003b4 <main+0x94>)
 800035e:	f001 fe7e 	bl	800205e <HAL_UART_Transmit_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (new_encrypted_message) {
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <main+0x98>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2b00      	cmp	r3, #0
 800036a:	d0fa      	beq.n	8000362 <main+0x42>
		  decrypt_message(message_rx);
 800036c:	463b      	mov	r3, r7
 800036e:	4618      	mov	r0, r3
 8000370:	f000 f9ee 	bl	8000750 <decrypt_message>
		  new_encrypted_message = false;
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <main+0x98>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_rx, strlen(message_rx) + 1);
 800037a:	463b      	mov	r3, r7
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff fee5 	bl	800014c <strlen>
 8000382:	4603      	mov	r3, r0
 8000384:	b29b      	uxth	r3, r3
 8000386:	3301      	adds	r3, #1
 8000388:	b29a      	uxth	r2, r3
 800038a:	463b      	mov	r3, r7
 800038c:	4619      	mov	r1, r3
 800038e:	4809      	ldr	r0, [pc, #36]	; (80003b4 <main+0x94>)
 8000390:	f001 fe65 	bl	800205e <HAL_UART_Transmit_IT>
		  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_buffer, sizeof(receive_buffer) / sizeof(receive_buffer[0]));
 8000394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000398:	4903      	ldr	r1, [pc, #12]	; (80003a8 <main+0x88>)
 800039a:	4804      	ldr	r0, [pc, #16]	; (80003ac <main+0x8c>)
 800039c:	f001 fea3 	bl	80020e6 <HAL_UARTEx_ReceiveToIdle_DMA>
	  if (new_encrypted_message) {
 80003a0:	e7df      	b.n	8000362 <main+0x42>
 80003a2:	bf00      	nop
 80003a4:	2000019c 	.word	0x2000019c
 80003a8:	200001bc 	.word	0x200001bc
 80003ac:	200000d0 	.word	0x200000d0
 80003b0:	08004224 	.word	0x08004224
 80003b4:	2000008c 	.word	0x2000008c
 80003b8:	200003bc 	.word	0x200003bc

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b090      	sub	sp, #64	; 0x40
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0318 	add.w	r3, r7, #24
 80003c6:	2228      	movs	r2, #40	; 0x28
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f002 fc0e 	bl	8002bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003de:	2301      	movs	r3, #1
 80003e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ec:	2301      	movs	r3, #1
 80003ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f0:	2302      	movs	r3, #2
 80003f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000400:	f107 0318 	add.w	r3, r7, #24
 8000404:	4618      	mov	r0, r3
 8000406:	f001 f9c3 	bl	8001790 <HAL_RCC_OscConfig>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000410:	f000 f9c8 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000414:	230f      	movs	r3, #15
 8000416:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000418:	2302      	movs	r3, #2
 800041a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2102      	movs	r1, #2
 800042e:	4618      	mov	r0, r3
 8000430:	f001 fc30 	bl	8001c94 <HAL_RCC_ClockConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800043a:	f000 f9b3 	bl	80007a4 <Error_Handler>
  }
}
 800043e:	bf00      	nop
 8000440:	3740      	adds	r7, #64	; 0x40
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	af00      	add	r7, sp, #0
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	2010      	movs	r0, #16
 8000450:	f000 fd2d 	bl	8000eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000454:	2010      	movs	r0, #16
 8000456:	f000 fd46 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	2026      	movs	r0, #38	; 0x26
 8000460:	f000 fd25 	bl	8000eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000464:	2026      	movs	r0, #38	; 0x26
 8000466:	f000 fd3e 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	2025      	movs	r0, #37	; 0x25
 8000470:	f000 fd1d 	bl	8000eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000474:	2025      	movs	r0, #37	; 0x25
 8000476:	f000 fd36 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <MX_USART1_UART_Init+0x50>)
 8000488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 800048c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004a6:	220c      	movs	r2, #12
 80004a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004b8:	f001 fd84 	bl	8001fc4 <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004c2:	f000 f96f 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	2000008c 	.word	0x2000008c
 80004d0:	40013800 	.word	0x40013800

080004d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004da:	4a12      	ldr	r2, [pc, #72]	; (8000524 <MX_USART2_UART_Init+0x50>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_USART2_UART_Init+0x4c>)
 800050c:	f001 fd5a 	bl	8001fc4 <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000516:	f000 f945 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200000d0 	.word	0x200000d0
 8000524:	40004400 	.word	0x40004400

08000528 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_DMA_Init+0x38>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <MX_DMA_Init+0x38>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_DMA_Init+0x38>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	200f      	movs	r0, #15
 800054c:	f000 fcaf 	bl	8000eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000550:	200f      	movs	r0, #15
 8000552:	f000 fcc8 	bl	8000ee6 <HAL_NVIC_EnableIRQ>

}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000578:	4b24      	ldr	r3, [pc, #144]	; (800060c <MX_GPIO_Init+0xa8>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a23      	ldr	r2, [pc, #140]	; (800060c <MX_GPIO_Init+0xa8>)
 800057e:	f043 0310 	orr.w	r3, r3, #16
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b21      	ldr	r3, [pc, #132]	; (800060c <MX_GPIO_Init+0xa8>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0310 	and.w	r3, r3, #16
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <MX_GPIO_Init+0xa8>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a1d      	ldr	r2, [pc, #116]	; (800060c <MX_GPIO_Init+0xa8>)
 8000596:	f043 0320 	orr.w	r3, r3, #32
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <MX_GPIO_Init+0xa8>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0320 	and.w	r3, r3, #32
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_GPIO_Init+0xa8>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a17      	ldr	r2, [pc, #92]	; (800060c <MX_GPIO_Init+0xa8>)
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_GPIO_Init+0xa8>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_GPIO_Init+0xa8>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a11      	ldr	r2, [pc, #68]	; (800060c <MX_GPIO_Init+0xa8>)
 80005c6:	f043 0308 	orr.w	r3, r3, #8
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_GPIO_Init+0xa8>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0308 	and.w	r3, r3, #8
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_CORRUPTED_GPIO_Port, DATA_CORRUPTED_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	480c      	ldr	r0, [pc, #48]	; (8000610 <MX_GPIO_Init+0xac>)
 80005e0:	f001 f8be 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_CORRUPTED_Pin */
  GPIO_InitStruct.Pin = DATA_CORRUPTED_Pin;
 80005e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_CORRUPTED_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_GPIO_Init+0xac>)
 80005fe:	f000 ff2b 	bl	8001458 <HAL_GPIO_Init>

}
 8000602:	bf00      	nop
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	40011000 	.word	0x40011000

08000614 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
	static char tmp_buffer[128];
    // Check if UART2 trigger the Callback
    if(huart->Instance == USART2)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a3b      	ldr	r2, [pc, #236]	; (8000714 <HAL_UARTEx_RxEventCallback+0x100>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d170      	bne.n	800070c <HAL_UARTEx_RxEventCallback+0xf8>
    {
    	receive_buffer[Size] = '\0';
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	4a3a      	ldr	r2, [pc, #232]	; (8000718 <HAL_UARTEx_RxEventCallback+0x104>)
 800062e:	2100      	movs	r1, #0
 8000630:	54d1      	strb	r1, [r2, r3]

    	if (new_encrypted_message) {
 8000632:	4b3a      	ldr	r3, [pc, #232]	; (800071c <HAL_UARTEx_RxEventCallback+0x108>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00b      	beq.n	8000654 <HAL_UARTEx_RxEventCallback+0x40>
    		new_encrypted_message = false;
 800063c:	4b37      	ldr	r3, [pc, #220]	; (800071c <HAL_UARTEx_RxEventCallback+0x108>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
    		last_encrypted_message_length = 0;
 8000642:	4b37      	ldr	r3, [pc, #220]	; (8000720 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
    		HAL_GPIO_WritePin(DATA_CORRUPTED_GPIO_Port, DATA_CORRUPTED_Pin, true);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064e:	4835      	ldr	r0, [pc, #212]	; (8000724 <HAL_UARTEx_RxEventCallback+0x110>)
 8000650:	f001 f886 	bl	8001760 <HAL_GPIO_WritePin>
    	}

    	if (!strncmp((char*)receive_buffer, GIVE_PUBLIC_KEY_CMD, sizeof(GIVE_PUBLIC_KEY_CMD) - 1)) {
 8000654:	220f      	movs	r2, #15
 8000656:	4934      	ldr	r1, [pc, #208]	; (8000728 <HAL_UARTEx_RxEventCallback+0x114>)
 8000658:	482f      	ldr	r0, [pc, #188]	; (8000718 <HAL_UARTEx_RxEventCallback+0x104>)
 800065a:	f002 fe09 	bl	8003270 <strncmp>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d123      	bne.n	80006ac <HAL_UARTEx_RxEventCallback+0x98>
    		rsa_public_key *public_key = rsa_get_public_key(&rsa_ctx);
 8000664:	4831      	ldr	r0, [pc, #196]	; (800072c <HAL_UARTEx_RxEventCallback+0x118>)
 8000666:	f7ff fe4f 	bl	8000308 <rsa_get_public_key>
 800066a:	6138      	str	r0, [r7, #16]
    		int len = snprintf(tmp_buffer, sizeof(tmp_buffer), "%s%lu,%lu", PUBLIC_KEY_MESSAGE_HEADER, public_key->e, public_key->n);
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	693a      	ldr	r2, [r7, #16]
 8000672:	6812      	ldr	r2, [r2, #0]
 8000674:	9201      	str	r2, [sp, #4]
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <HAL_UARTEx_RxEventCallback+0x11c>)
 800067a:	4a2e      	ldr	r2, [pc, #184]	; (8000734 <HAL_UARTEx_RxEventCallback+0x120>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	482e      	ldr	r0, [pc, #184]	; (8000738 <HAL_UARTEx_RxEventCallback+0x124>)
 8000680:	f002 fdc2 	bl	8003208 <sniprintf>
 8000684:	60f8      	str	r0, [r7, #12]
    		if (len) {
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d008      	beq.n	800069e <HAL_UARTEx_RxEventCallback+0x8a>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t*)tmp_buffer, len + 1);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	b29b      	uxth	r3, r3
 8000690:	3301      	adds	r3, #1
 8000692:	b29b      	uxth	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	4928      	ldr	r1, [pc, #160]	; (8000738 <HAL_UARTEx_RxEventCallback+0x124>)
 8000698:	4828      	ldr	r0, [pc, #160]	; (800073c <HAL_UARTEx_RxEventCallback+0x128>)
 800069a:	f001 fce0 	bl	800205e <HAL_UART_Transmit_IT>
    		}
    		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_buffer, sizeof(receive_buffer) / sizeof(receive_buffer[0]));
 800069e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a2:	491d      	ldr	r1, [pc, #116]	; (8000718 <HAL_UARTEx_RxEventCallback+0x104>)
 80006a4:	4825      	ldr	r0, [pc, #148]	; (800073c <HAL_UARTEx_RxEventCallback+0x128>)
 80006a6:	f001 fd1e 	bl	80020e6 <HAL_UARTEx_ReceiveToIdle_DMA>
    	} else {
    		new_encrypted_message = true;
    		last_encrypted_message_length = Size;
    	}
    }
}
 80006aa:	e02f      	b.n	800070c <HAL_UARTEx_RxEventCallback+0xf8>
    	} else if (!strncmp((char*)receive_buffer, PUBLIC_KEY_MESSAGE_HEADER, sizeof(PUBLIC_KEY_MESSAGE_HEADER) - 1)) {
 80006ac:	220b      	movs	r2, #11
 80006ae:	4920      	ldr	r1, [pc, #128]	; (8000730 <HAL_UARTEx_RxEventCallback+0x11c>)
 80006b0:	4819      	ldr	r0, [pc, #100]	; (8000718 <HAL_UARTEx_RxEventCallback+0x104>)
 80006b2:	f002 fddd 	bl	8003270 <strncmp>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d121      	bne.n	8000700 <HAL_UARTEx_RxEventCallback+0xec>
    		rsa_second_board_public_key.e = atoi((char*)&receive_buffer[sizeof(PUBLIC_KEY_MESSAGE_HEADER) - 1]);
 80006bc:	4820      	ldr	r0, [pc, #128]	; (8000740 <HAL_UARTEx_RxEventCallback+0x12c>)
 80006be:	f002 fa55 	bl	8002b6c <atoi>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <HAL_UARTEx_RxEventCallback+0x130>)
 80006c8:	605a      	str	r2, [r3, #4]
    		char *ptr = strtok((char*)receive_buffer, ",");
 80006ca:	491f      	ldr	r1, [pc, #124]	; (8000748 <HAL_UARTEx_RxEventCallback+0x134>)
 80006cc:	4812      	ldr	r0, [pc, #72]	; (8000718 <HAL_UARTEx_RxEventCallback+0x104>)
 80006ce:	f002 fde3 	bl	8003298 <strtok>
 80006d2:	6178      	str	r0, [r7, #20]
    		ptr = strtok(NULL, ",");
 80006d4:	491c      	ldr	r1, [pc, #112]	; (8000748 <HAL_UARTEx_RxEventCallback+0x134>)
 80006d6:	2000      	movs	r0, #0
 80006d8:	f002 fdde 	bl	8003298 <strtok>
 80006dc:	6178      	str	r0, [r7, #20]
			rsa_second_board_public_key.n = atoi(ptr);
 80006de:	6978      	ldr	r0, [r7, #20]
 80006e0:	f002 fa44 	bl	8002b6c <atoi>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_UARTEx_RxEventCallback+0x130>)
 80006ea:	601a      	str	r2, [r3, #0]
			public_key_obtained = true;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <HAL_UARTEx_RxEventCallback+0x138>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_buffer, sizeof(receive_buffer) / sizeof(receive_buffer[0]));
 80006f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f6:	4908      	ldr	r1, [pc, #32]	; (8000718 <HAL_UARTEx_RxEventCallback+0x104>)
 80006f8:	4810      	ldr	r0, [pc, #64]	; (800073c <HAL_UARTEx_RxEventCallback+0x128>)
 80006fa:	f001 fcf4 	bl	80020e6 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80006fe:	e005      	b.n	800070c <HAL_UARTEx_RxEventCallback+0xf8>
    		new_encrypted_message = true;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_UARTEx_RxEventCallback+0x108>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
    		last_encrypted_message_length = Size;
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	4a05      	ldr	r2, [pc, #20]	; (8000720 <HAL_UARTEx_RxEventCallback+0x10c>)
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40004400 	.word	0x40004400
 8000718:	200001bc 	.word	0x200001bc
 800071c:	200003bc 	.word	0x200003bc
 8000720:	200003c0 	.word	0x200003c0
 8000724:	40011000 	.word	0x40011000
 8000728:	08004238 	.word	0x08004238
 800072c:	2000019c 	.word	0x2000019c
 8000730:	08004248 	.word	0x08004248
 8000734:	08004254 	.word	0x08004254
 8000738:	200003c8 	.word	0x200003c8
 800073c:	200000d0 	.word	0x200000d0
 8000740:	200001c7 	.word	0x200001c7
 8000744:	200001b4 	.word	0x200001b4
 8000748:	08004260 	.word	0x08004260
 800074c:	200003c4 	.word	0x200003c4

08000750 <decrypt_message>:

static void decrypt_message(char *buff) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < last_encrypted_message_length; i += 4) {
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	e011      	b.n	8000782 <decrypt_message+0x32>
		buff[i / 4] = (char)rsa_decrypt(*(uint32_t*)&receive_buffer[i], &rsa_ctx);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <decrypt_message+0x48>)
 8000762:	4413      	add	r3, r2
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <decrypt_message+0x4c>)
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fdbb 	bl	80002e4 <rsa_decrypt>
 800076e:	4601      	mov	r1, r0
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	089b      	lsrs	r3, r3, #2
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	b2ca      	uxtb	r2, r1
 800077a:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < last_encrypted_message_length; i += 4) {
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3304      	adds	r3, #4
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <decrypt_message+0x50>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	429a      	cmp	r2, r3
 800078a:	d3e8      	bcc.n	800075e <decrypt_message+0xe>
	}
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200001bc 	.word	0x200001bc
 800079c:	2000019c 	.word	0x2000019c
 80007a0:	200003c0 	.word	0x200003c0

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_MspInit+0x5c>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <HAL_MspInit+0x5c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_MspInit+0x5c>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_MspInit+0x5c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_MspInit+0x5c>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_MspInit+0x5c>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_MspInit+0x60>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_MspInit+0x60>)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	40021000 	.word	0x40021000
 8000810:	40010000 	.word	0x40010000

08000814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0318 	add.w	r3, r7, #24
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a5d      	ldr	r2, [pc, #372]	; (80009a4 <HAL_UART_MspInit+0x190>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d158      	bne.n	80008e6 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000834:	4b5c      	ldr	r3, [pc, #368]	; (80009a8 <HAL_UART_MspInit+0x194>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a5b      	ldr	r2, [pc, #364]	; (80009a8 <HAL_UART_MspInit+0x194>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b59      	ldr	r3, [pc, #356]	; (80009a8 <HAL_UART_MspInit+0x194>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	4b56      	ldr	r3, [pc, #344]	; (80009a8 <HAL_UART_MspInit+0x194>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a55      	ldr	r2, [pc, #340]	; (80009a8 <HAL_UART_MspInit+0x194>)
 8000852:	f043 0304 	orr.w	r3, r3, #4
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b53      	ldr	r3, [pc, #332]	; (80009a8 <HAL_UART_MspInit+0x194>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f003 0304 	and.w	r3, r3, #4
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0318 	add.w	r3, r7, #24
 8000876:	4619      	mov	r1, r3
 8000878:	484c      	ldr	r0, [pc, #304]	; (80009ac <HAL_UART_MspInit+0x198>)
 800087a:	f000 fded 	bl	8001458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 0318 	add.w	r3, r7, #24
 8000890:	4619      	mov	r1, r3
 8000892:	4846      	ldr	r0, [pc, #280]	; (80009ac <HAL_UART_MspInit+0x198>)
 8000894:	f000 fde0 	bl	8001458 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000898:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <HAL_UART_MspInit+0x19c>)
 800089a:	4a46      	ldr	r2, [pc, #280]	; (80009b4 <HAL_UART_MspInit+0x1a0>)
 800089c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800089e:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <HAL_UART_MspInit+0x19c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a4:	4b42      	ldr	r3, [pc, #264]	; (80009b0 <HAL_UART_MspInit+0x19c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008aa:	4b41      	ldr	r3, [pc, #260]	; (80009b0 <HAL_UART_MspInit+0x19c>)
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b0:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <HAL_UART_MspInit+0x19c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b6:	4b3e      	ldr	r3, [pc, #248]	; (80009b0 <HAL_UART_MspInit+0x19c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008bc:	4b3c      	ldr	r3, [pc, #240]	; (80009b0 <HAL_UART_MspInit+0x19c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008c2:	4b3b      	ldr	r3, [pc, #236]	; (80009b0 <HAL_UART_MspInit+0x19c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008c8:	4839      	ldr	r0, [pc, #228]	; (80009b0 <HAL_UART_MspInit+0x19c>)
 80008ca:	f000 fb27 	bl	8000f1c <HAL_DMA_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80008d4:	f7ff ff66 	bl	80007a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a35      	ldr	r2, [pc, #212]	; (80009b0 <HAL_UART_MspInit+0x19c>)
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38
 80008de:	4a34      	ldr	r2, [pc, #208]	; (80009b0 <HAL_UART_MspInit+0x19c>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e4:	e05a      	b.n	800099c <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART2)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <HAL_UART_MspInit+0x1a4>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d155      	bne.n	800099c <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f0:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <HAL_UART_MspInit+0x194>)
 80008f2:	69db      	ldr	r3, [r3, #28]
 80008f4:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <HAL_UART_MspInit+0x194>)
 80008f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fa:	61d3      	str	r3, [r2, #28]
 80008fc:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <HAL_UART_MspInit+0x194>)
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <HAL_UART_MspInit+0x194>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <HAL_UART_MspInit+0x194>)
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <HAL_UART_MspInit+0x194>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000920:	2304      	movs	r3, #4
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 0318 	add.w	r3, r7, #24
 8000930:	4619      	mov	r1, r3
 8000932:	481e      	ldr	r0, [pc, #120]	; (80009ac <HAL_UART_MspInit+0x198>)
 8000934:	f000 fd90 	bl	8001458 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000938:	2308      	movs	r3, #8
 800093a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000940:	2301      	movs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	4619      	mov	r1, r3
 800094a:	4818      	ldr	r0, [pc, #96]	; (80009ac <HAL_UART_MspInit+0x198>)
 800094c:	f000 fd84 	bl	8001458 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <HAL_UART_MspInit+0x1a8>)
 8000952:	4a1b      	ldr	r2, [pc, #108]	; (80009c0 <HAL_UART_MspInit+0x1ac>)
 8000954:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_UART_MspInit+0x1a8>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_UART_MspInit+0x1a8>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_UART_MspInit+0x1a8>)
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_UART_MspInit+0x1a8>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <HAL_UART_MspInit+0x1a8>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_UART_MspInit+0x1a8>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_UART_MspInit+0x1a8>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000980:	480e      	ldr	r0, [pc, #56]	; (80009bc <HAL_UART_MspInit+0x1a8>)
 8000982:	f000 facb 	bl	8000f1c <HAL_DMA_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 800098c:	f7ff ff0a 	bl	80007a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_UART_MspInit+0x1a8>)
 8000994:	639a      	str	r2, [r3, #56]	; 0x38
 8000996:	4a09      	ldr	r2, [pc, #36]	; (80009bc <HAL_UART_MspInit+0x1a8>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40013800 	.word	0x40013800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800
 80009b0:	20000114 	.word	0x20000114
 80009b4:	40020058 	.word	0x40020058
 80009b8:	40004400 	.word	0x40004400
 80009bc:	20000158 	.word	0x20000158
 80009c0:	4002006c 	.word	0x4002006c

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0a:	f000 f95d 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <DMA1_Channel5_IRQHandler+0x10>)
 8000a1a:	f000 fbe9 	bl	80011f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000114 	.word	0x20000114

08000a28 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <DMA1_Channel6_IRQHandler+0x10>)
 8000a2e:	f000 fbdf 	bl	80011f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000158 	.word	0x20000158

08000a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <USART1_IRQHandler+0x10>)
 8000a42:	f001 fb9f 	bl	8002184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000008c 	.word	0x2000008c

08000a50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <USART2_IRQHandler+0x10>)
 8000a56:	f001 fb95 	bl	8002184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000d0 	.word	0x200000d0

08000a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	return 1;
 8000a68:	2301      	movs	r3, #1
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <_kill>:

int _kill(int pid, int sig)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a7c:	f002 f87a 	bl	8002b74 <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2216      	movs	r2, #22
 8000a84:	601a      	str	r2, [r3, #0]
	return -1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <_exit>:

void _exit (int status)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffe7 	bl	8000a72 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000aa4:	e7fe      	b.n	8000aa4 <_exit+0x12>

08000aa6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	e00a      	b.n	8000ace <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ab8:	f3af 8000 	nop.w
 8000abc:	4601      	mov	r1, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	60ba      	str	r2, [r7, #8]
 8000ac4:	b2ca      	uxtb	r2, r1
 8000ac6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	3301      	adds	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	dbf0      	blt.n	8000ab8 <_read+0x12>
	}

return len;
 8000ad6:	687b      	ldr	r3, [r7, #4]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e009      	b.n	8000b06 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1c5a      	adds	r2, r3, #1
 8000af6:	60ba      	str	r2, [r7, #8]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3301      	adds	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dbf1      	blt.n	8000af2 <_write+0x12>
	}
	return len;
 8000b0e:	687b      	ldr	r3, [r7, #4]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_close>:

int _close(int file)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	return -1;
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <_isatty>:

int _isatty(int file)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	return 1;
 8000b54:	2301      	movs	r3, #1
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f001 ffe4 	bl	8002b74 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20005000 	.word	0x20005000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	20000448 	.word	0x20000448
 8000be0:	20000460 	.word	0x20000460

08000be4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	; (8000c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c16:	f7ff ffe5 	bl	8000be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f001 ffc3 	bl	8002ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1e:	f7ff fb7f 	bl	8000320 <main>
  bx lr
 8000c22:	4770      	bx	lr
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c2c:	080044dc 	.word	0x080044dc
  ldr r2, =_sbss
 8000c30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c34:	20000460 	.word	0x20000460

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x28>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x28>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f923 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	200f      	movs	r0, #15
 8000c54:	f000 f808 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fdaa 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40022000 	.word	0x40022000

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f93b 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f000 f903 	bl	8000eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_IncTick+0x1c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a03      	ldr	r2, [pc, #12]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	2000044c 	.word	0x2000044c

08000cec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b02      	ldr	r3, [pc, #8]	; (8000cfc <HAL_GetTick+0x10>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	2000044c 	.word	0x2000044c

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4906      	ldr	r1, [pc, #24]	; (8000d98 <__NVIC_EnableIRQ+0x34>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	f7ff ff90 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff2d 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff42 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff90 	bl	8000df0 <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5f 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff35 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa2 	bl	8000e54 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e043      	b.n	8000fba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <HAL_DMA_Init+0xa8>)
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <HAL_DMA_Init+0xac>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	091b      	lsrs	r3, r3, #4
 8000f44:	009a      	lsls	r2, r3, #2
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <HAL_DMA_Init+0xb0>)
 8000f4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2202      	movs	r2, #2
 8000f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	bffdfff8 	.word	0xbffdfff8
 8000fc8:	cccccccd 	.word	0xcccccccd
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <HAL_DMA_Start_IT+0x20>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e04a      	b.n	8001086 <HAL_DMA_Start_IT+0xb6>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d13a      	bne.n	8001078 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2202      	movs	r2, #2
 8001006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2200      	movs	r2, #0
 800100e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0201 	bic.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f000 f9e8 	bl	80013fc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	2b00      	cmp	r3, #0
 8001032:	d008      	beq.n	8001046 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 020e 	orr.w	r2, r2, #14
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	e00f      	b.n	8001066 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0204 	bic.w	r2, r2, #4
 8001054:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f042 020a 	orr.w	r2, r2, #10
 8001064:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0201 	orr.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e005      	b.n	8001084 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001080:	2302      	movs	r3, #2
 8001082:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001084:	7dfb      	ldrb	r3, [r7, #23]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800108e:	b480      	push	{r7}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d008      	beq.n	80010b6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2204      	movs	r2, #4
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e020      	b.n	80010f8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 020e 	bic.w	r2, r2, #14
 80010c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
	...

08001104 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001116:	2b02      	cmp	r3, #2
 8001118:	d005      	beq.n	8001126 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2204      	movs	r2, #4
 800111e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e051      	b.n	80011ca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 020e 	bic.w	r2, r2, #14
 8001134:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <HAL_DMA_Abort_IT+0xd0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d029      	beq.n	80011a4 <HAL_DMA_Abort_IT+0xa0>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <HAL_DMA_Abort_IT+0xd4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d022      	beq.n	80011a0 <HAL_DMA_Abort_IT+0x9c>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_DMA_Abort_IT+0xd8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d01a      	beq.n	800119a <HAL_DMA_Abort_IT+0x96>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <HAL_DMA_Abort_IT+0xdc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d012      	beq.n	8001194 <HAL_DMA_Abort_IT+0x90>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <HAL_DMA_Abort_IT+0xe0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d00a      	beq.n	800118e <HAL_DMA_Abort_IT+0x8a>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_DMA_Abort_IT+0xe4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d102      	bne.n	8001188 <HAL_DMA_Abort_IT+0x84>
 8001182:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001186:	e00e      	b.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 8001188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800118c:	e00b      	b.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 800118e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001192:	e008      	b.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	e005      	b.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 800119a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119e:	e002      	b.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 80011a0:	2310      	movs	r3, #16
 80011a2:	e000      	b.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 80011a4:	2301      	movs	r3, #1
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <HAL_DMA_Abort_IT+0xe8>)
 80011a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	4798      	blx	r3
    } 
  }
  return status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020008 	.word	0x40020008
 80011d8:	4002001c 	.word	0x4002001c
 80011dc:	40020030 	.word	0x40020030
 80011e0:	40020044 	.word	0x40020044
 80011e4:	40020058 	.word	0x40020058
 80011e8:	4002006c 	.word	0x4002006c
 80011ec:	40020000 	.word	0x40020000

080011f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	2204      	movs	r2, #4
 800120e:	409a      	lsls	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d04f      	beq.n	80012b8 <HAL_DMA_IRQHandler+0xc8>
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	2b00      	cmp	r3, #0
 8001220:	d04a      	beq.n	80012b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	2b00      	cmp	r3, #0
 800122e:	d107      	bne.n	8001240 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0204 	bic.w	r2, r2, #4
 800123e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a66      	ldr	r2, [pc, #408]	; (80013e0 <HAL_DMA_IRQHandler+0x1f0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d029      	beq.n	800129e <HAL_DMA_IRQHandler+0xae>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a65      	ldr	r2, [pc, #404]	; (80013e4 <HAL_DMA_IRQHandler+0x1f4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d022      	beq.n	800129a <HAL_DMA_IRQHandler+0xaa>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a63      	ldr	r2, [pc, #396]	; (80013e8 <HAL_DMA_IRQHandler+0x1f8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01a      	beq.n	8001294 <HAL_DMA_IRQHandler+0xa4>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a62      	ldr	r2, [pc, #392]	; (80013ec <HAL_DMA_IRQHandler+0x1fc>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d012      	beq.n	800128e <HAL_DMA_IRQHandler+0x9e>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a60      	ldr	r2, [pc, #384]	; (80013f0 <HAL_DMA_IRQHandler+0x200>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00a      	beq.n	8001288 <HAL_DMA_IRQHandler+0x98>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a5f      	ldr	r2, [pc, #380]	; (80013f4 <HAL_DMA_IRQHandler+0x204>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d102      	bne.n	8001282 <HAL_DMA_IRQHandler+0x92>
 800127c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001280:	e00e      	b.n	80012a0 <HAL_DMA_IRQHandler+0xb0>
 8001282:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001286:	e00b      	b.n	80012a0 <HAL_DMA_IRQHandler+0xb0>
 8001288:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800128c:	e008      	b.n	80012a0 <HAL_DMA_IRQHandler+0xb0>
 800128e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001292:	e005      	b.n	80012a0 <HAL_DMA_IRQHandler+0xb0>
 8001294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001298:	e002      	b.n	80012a0 <HAL_DMA_IRQHandler+0xb0>
 800129a:	2340      	movs	r3, #64	; 0x40
 800129c:	e000      	b.n	80012a0 <HAL_DMA_IRQHandler+0xb0>
 800129e:	2304      	movs	r3, #4
 80012a0:	4a55      	ldr	r2, [pc, #340]	; (80013f8 <HAL_DMA_IRQHandler+0x208>)
 80012a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 8094 	beq.w	80013d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012b6:	e08e      	b.n	80013d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	2202      	movs	r2, #2
 80012be:	409a      	lsls	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d056      	beq.n	8001376 <HAL_DMA_IRQHandler+0x186>
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d051      	beq.n	8001376 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10b      	bne.n	80012f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 020a 	bic.w	r2, r2, #10
 80012ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a38      	ldr	r2, [pc, #224]	; (80013e0 <HAL_DMA_IRQHandler+0x1f0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d029      	beq.n	8001356 <HAL_DMA_IRQHandler+0x166>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a37      	ldr	r2, [pc, #220]	; (80013e4 <HAL_DMA_IRQHandler+0x1f4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d022      	beq.n	8001352 <HAL_DMA_IRQHandler+0x162>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a35      	ldr	r2, [pc, #212]	; (80013e8 <HAL_DMA_IRQHandler+0x1f8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01a      	beq.n	800134c <HAL_DMA_IRQHandler+0x15c>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a34      	ldr	r2, [pc, #208]	; (80013ec <HAL_DMA_IRQHandler+0x1fc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d012      	beq.n	8001346 <HAL_DMA_IRQHandler+0x156>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <HAL_DMA_IRQHandler+0x200>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00a      	beq.n	8001340 <HAL_DMA_IRQHandler+0x150>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a31      	ldr	r2, [pc, #196]	; (80013f4 <HAL_DMA_IRQHandler+0x204>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d102      	bne.n	800133a <HAL_DMA_IRQHandler+0x14a>
 8001334:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001338:	e00e      	b.n	8001358 <HAL_DMA_IRQHandler+0x168>
 800133a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800133e:	e00b      	b.n	8001358 <HAL_DMA_IRQHandler+0x168>
 8001340:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001344:	e008      	b.n	8001358 <HAL_DMA_IRQHandler+0x168>
 8001346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134a:	e005      	b.n	8001358 <HAL_DMA_IRQHandler+0x168>
 800134c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001350:	e002      	b.n	8001358 <HAL_DMA_IRQHandler+0x168>
 8001352:	2320      	movs	r3, #32
 8001354:	e000      	b.n	8001358 <HAL_DMA_IRQHandler+0x168>
 8001356:	2302      	movs	r3, #2
 8001358:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <HAL_DMA_IRQHandler+0x208>)
 800135a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	2b00      	cmp	r3, #0
 800136a:	d034      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001374:	e02f      	b.n	80013d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	2208      	movs	r2, #8
 800137c:	409a      	lsls	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d028      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x1e8>
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	d023      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 020e 	bic.w	r2, r2, #14
 800139e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a8:	2101      	movs	r1, #1
 80013aa:	fa01 f202 	lsl.w	r2, r1, r2
 80013ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d004      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	4798      	blx	r3
    }
  }
  return;
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
}
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40020008 	.word	0x40020008
 80013e4:	4002001c 	.word	0x4002001c
 80013e8:	40020030 	.word	0x40020030
 80013ec:	40020044 	.word	0x40020044
 80013f0:	40020058 	.word	0x40020058
 80013f4:	4002006c 	.word	0x4002006c
 80013f8:	40020000 	.word	0x40020000

080013fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b10      	cmp	r3, #16
 8001428:	d108      	bne.n	800143c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800143a:	e007      	b.n	800144c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	60da      	str	r2, [r3, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
	...

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b480      	push	{r7}
 800145a:	b08b      	sub	sp, #44	; 0x2c
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146a:	e169      	b.n	8001740 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800146c:	2201      	movs	r2, #1
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	429a      	cmp	r2, r3
 8001486:	f040 8158 	bne.w	800173a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4a9a      	ldr	r2, [pc, #616]	; (80016f8 <HAL_GPIO_Init+0x2a0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d05e      	beq.n	8001552 <HAL_GPIO_Init+0xfa>
 8001494:	4a98      	ldr	r2, [pc, #608]	; (80016f8 <HAL_GPIO_Init+0x2a0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d875      	bhi.n	8001586 <HAL_GPIO_Init+0x12e>
 800149a:	4a98      	ldr	r2, [pc, #608]	; (80016fc <HAL_GPIO_Init+0x2a4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d058      	beq.n	8001552 <HAL_GPIO_Init+0xfa>
 80014a0:	4a96      	ldr	r2, [pc, #600]	; (80016fc <HAL_GPIO_Init+0x2a4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d86f      	bhi.n	8001586 <HAL_GPIO_Init+0x12e>
 80014a6:	4a96      	ldr	r2, [pc, #600]	; (8001700 <HAL_GPIO_Init+0x2a8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d052      	beq.n	8001552 <HAL_GPIO_Init+0xfa>
 80014ac:	4a94      	ldr	r2, [pc, #592]	; (8001700 <HAL_GPIO_Init+0x2a8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d869      	bhi.n	8001586 <HAL_GPIO_Init+0x12e>
 80014b2:	4a94      	ldr	r2, [pc, #592]	; (8001704 <HAL_GPIO_Init+0x2ac>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d04c      	beq.n	8001552 <HAL_GPIO_Init+0xfa>
 80014b8:	4a92      	ldr	r2, [pc, #584]	; (8001704 <HAL_GPIO_Init+0x2ac>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d863      	bhi.n	8001586 <HAL_GPIO_Init+0x12e>
 80014be:	4a92      	ldr	r2, [pc, #584]	; (8001708 <HAL_GPIO_Init+0x2b0>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d046      	beq.n	8001552 <HAL_GPIO_Init+0xfa>
 80014c4:	4a90      	ldr	r2, [pc, #576]	; (8001708 <HAL_GPIO_Init+0x2b0>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d85d      	bhi.n	8001586 <HAL_GPIO_Init+0x12e>
 80014ca:	2b12      	cmp	r3, #18
 80014cc:	d82a      	bhi.n	8001524 <HAL_GPIO_Init+0xcc>
 80014ce:	2b12      	cmp	r3, #18
 80014d0:	d859      	bhi.n	8001586 <HAL_GPIO_Init+0x12e>
 80014d2:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <HAL_GPIO_Init+0x80>)
 80014d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d8:	08001553 	.word	0x08001553
 80014dc:	0800152d 	.word	0x0800152d
 80014e0:	0800153f 	.word	0x0800153f
 80014e4:	08001581 	.word	0x08001581
 80014e8:	08001587 	.word	0x08001587
 80014ec:	08001587 	.word	0x08001587
 80014f0:	08001587 	.word	0x08001587
 80014f4:	08001587 	.word	0x08001587
 80014f8:	08001587 	.word	0x08001587
 80014fc:	08001587 	.word	0x08001587
 8001500:	08001587 	.word	0x08001587
 8001504:	08001587 	.word	0x08001587
 8001508:	08001587 	.word	0x08001587
 800150c:	08001587 	.word	0x08001587
 8001510:	08001587 	.word	0x08001587
 8001514:	08001587 	.word	0x08001587
 8001518:	08001587 	.word	0x08001587
 800151c:	08001535 	.word	0x08001535
 8001520:	08001549 	.word	0x08001549
 8001524:	4a79      	ldr	r2, [pc, #484]	; (800170c <HAL_GPIO_Init+0x2b4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800152a:	e02c      	b.n	8001586 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e029      	b.n	8001588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	3304      	adds	r3, #4
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	e024      	b.n	8001588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	3308      	adds	r3, #8
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e01f      	b.n	8001588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	330c      	adds	r3, #12
 800154e:	623b      	str	r3, [r7, #32]
          break;
 8001550:	e01a      	b.n	8001588 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800155a:	2304      	movs	r3, #4
 800155c:	623b      	str	r3, [r7, #32]
          break;
 800155e:	e013      	b.n	8001588 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001568:	2308      	movs	r3, #8
 800156a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	611a      	str	r2, [r3, #16]
          break;
 8001572:	e009      	b.n	8001588 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001574:	2308      	movs	r3, #8
 8001576:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	615a      	str	r2, [r3, #20]
          break;
 800157e:	e003      	b.n	8001588 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
          break;
 8001584:	e000      	b.n	8001588 <HAL_GPIO_Init+0x130>
          break;
 8001586:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2bff      	cmp	r3, #255	; 0xff
 800158c:	d801      	bhi.n	8001592 <HAL_GPIO_Init+0x13a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	e001      	b.n	8001596 <HAL_GPIO_Init+0x13e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3304      	adds	r3, #4
 8001596:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	2bff      	cmp	r3, #255	; 0xff
 800159c:	d802      	bhi.n	80015a4 <HAL_GPIO_Init+0x14c>
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	e002      	b.n	80015aa <HAL_GPIO_Init+0x152>
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	3b08      	subs	r3, #8
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	210f      	movs	r1, #15
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	401a      	ands	r2, r3
 80015bc:	6a39      	ldr	r1, [r7, #32]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	431a      	orrs	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80b1 	beq.w	800173a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d8:	4b4d      	ldr	r3, [pc, #308]	; (8001710 <HAL_GPIO_Init+0x2b8>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a4c      	ldr	r2, [pc, #304]	; (8001710 <HAL_GPIO_Init+0x2b8>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b4a      	ldr	r3, [pc, #296]	; (8001710 <HAL_GPIO_Init+0x2b8>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015f0:	4a48      	ldr	r2, [pc, #288]	; (8001714 <HAL_GPIO_Init+0x2bc>)
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a40      	ldr	r2, [pc, #256]	; (8001718 <HAL_GPIO_Init+0x2c0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d013      	beq.n	8001644 <HAL_GPIO_Init+0x1ec>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a3f      	ldr	r2, [pc, #252]	; (800171c <HAL_GPIO_Init+0x2c4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d00d      	beq.n	8001640 <HAL_GPIO_Init+0x1e8>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a3e      	ldr	r2, [pc, #248]	; (8001720 <HAL_GPIO_Init+0x2c8>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d007      	beq.n	800163c <HAL_GPIO_Init+0x1e4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a3d      	ldr	r2, [pc, #244]	; (8001724 <HAL_GPIO_Init+0x2cc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_GPIO_Init+0x1e0>
 8001634:	2303      	movs	r3, #3
 8001636:	e006      	b.n	8001646 <HAL_GPIO_Init+0x1ee>
 8001638:	2304      	movs	r3, #4
 800163a:	e004      	b.n	8001646 <HAL_GPIO_Init+0x1ee>
 800163c:	2302      	movs	r3, #2
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0x1ee>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_GPIO_Init+0x1ee>
 8001644:	2300      	movs	r3, #0
 8001646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001648:	f002 0203 	and.w	r2, r2, #3
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	4093      	lsls	r3, r2
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001656:	492f      	ldr	r1, [pc, #188]	; (8001714 <HAL_GPIO_Init+0x2bc>)
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001670:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	492c      	ldr	r1, [pc, #176]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	43db      	mvns	r3, r3
 8001686:	4928      	ldr	r1, [pc, #160]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 8001688:	4013      	ands	r3, r2
 800168a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4922      	ldr	r1, [pc, #136]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	491e      	ldr	r1, [pc, #120]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d006      	beq.n	80016ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	4918      	ldr	r1, [pc, #96]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4914      	ldr	r1, [pc, #80]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 80016d8:	4013      	ands	r3, r2
 80016da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d021      	beq.n	800172c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	490e      	ldr	r1, [pc, #56]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60cb      	str	r3, [r1, #12]
 80016f4:	e021      	b.n	800173a <HAL_GPIO_Init+0x2e2>
 80016f6:	bf00      	nop
 80016f8:	10320000 	.word	0x10320000
 80016fc:	10310000 	.word	0x10310000
 8001700:	10220000 	.word	0x10220000
 8001704:	10210000 	.word	0x10210000
 8001708:	10120000 	.word	0x10120000
 800170c:	10110000 	.word	0x10110000
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000
 8001718:	40010800 	.word	0x40010800
 800171c:	40010c00 	.word	0x40010c00
 8001720:	40011000 	.word	0x40011000
 8001724:	40011400 	.word	0x40011400
 8001728:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_GPIO_Init+0x304>)
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	43db      	mvns	r3, r3
 8001734:	4909      	ldr	r1, [pc, #36]	; (800175c <HAL_GPIO_Init+0x304>)
 8001736:	4013      	ands	r3, r2
 8001738:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	3301      	adds	r3, #1
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	f47f ae8e 	bne.w	800146c <HAL_GPIO_Init+0x14>
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	372c      	adds	r7, #44	; 0x2c
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800177c:	e003      	b.n	8001786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	611a      	str	r2, [r3, #16]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e272      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8087 	beq.w	80018be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b0:	4b92      	ldr	r3, [pc, #584]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d00c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017bc:	4b8f      	ldr	r3, [pc, #572]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d112      	bne.n	80017ee <HAL_RCC_OscConfig+0x5e>
 80017c8:	4b8c      	ldr	r3, [pc, #560]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d4:	d10b      	bne.n	80017ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d6:	4b89      	ldr	r3, [pc, #548]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d06c      	beq.n	80018bc <HAL_RCC_OscConfig+0x12c>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d168      	bne.n	80018bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e24c      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x76>
 80017f8:	4b80      	ldr	r3, [pc, #512]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a7f      	ldr	r2, [pc, #508]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e02e      	b.n	8001864 <HAL_RCC_OscConfig+0xd4>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x98>
 800180e:	4b7b      	ldr	r3, [pc, #492]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a7a      	ldr	r2, [pc, #488]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b78      	ldr	r3, [pc, #480]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a77      	ldr	r2, [pc, #476]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e01d      	b.n	8001864 <HAL_RCC_OscConfig+0xd4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0xbc>
 8001832:	4b72      	ldr	r3, [pc, #456]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a71      	ldr	r2, [pc, #452]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a6e      	ldr	r2, [pc, #440]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e00b      	b.n	8001864 <HAL_RCC_OscConfig+0xd4>
 800184c:	4b6b      	ldr	r3, [pc, #428]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a6a      	ldr	r2, [pc, #424]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b68      	ldr	r3, [pc, #416]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a67      	ldr	r2, [pc, #412]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 800185e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001862:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fa3e 	bl	8000cec <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fa3a 	bl	8000cec <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e200      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b5d      	ldr	r3, [pc, #372]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0xe4>
 8001892:	e014      	b.n	80018be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fa2a 	bl	8000cec <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff fa26 	bl	8000cec <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e1ec      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x10c>
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d063      	beq.n	8001992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ca:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00b      	beq.n	80018ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018d6:	4b49      	ldr	r3, [pc, #292]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d11c      	bne.n	800191c <HAL_RCC_OscConfig+0x18c>
 80018e2:	4b46      	ldr	r3, [pc, #280]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d116      	bne.n	800191c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_RCC_OscConfig+0x176>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e1c0      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4939      	ldr	r1, [pc, #228]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	e03a      	b.n	8001992 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d020      	beq.n	8001966 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001924:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff f9df 	bl	8000cec <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001932:	f7ff f9db 	bl	8000cec <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1a1      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4927      	ldr	r1, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
 8001964:	e015      	b.n	8001992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff f9be 	bl	8000cec <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001974:	f7ff f9ba 	bl	8000cec <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e180      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d03a      	beq.n	8001a14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d019      	beq.n	80019da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ac:	f7ff f99e 	bl	8000cec <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b4:	f7ff f99a 	bl	8000cec <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e160      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_RCC_OscConfig+0x26c>)
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f000 fad8 	bl	8001f88 <RCC_Delay>
 80019d8:	e01c      	b.n	8001a14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_RCC_OscConfig+0x274>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e0:	f7ff f984 	bl	8000cec <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e6:	e00f      	b.n	8001a08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e8:	f7ff f980 	bl	8000cec <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d908      	bls.n	8001a08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e146      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	42420000 	.word	0x42420000
 8001a04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a08:	4b92      	ldr	r3, [pc, #584]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1e9      	bne.n	80019e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80a6 	beq.w	8001b6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a26:	4b8b      	ldr	r3, [pc, #556]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10d      	bne.n	8001a4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b88      	ldr	r3, [pc, #544]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a87      	ldr	r2, [pc, #540]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b85      	ldr	r3, [pc, #532]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	4b82      	ldr	r3, [pc, #520]	; (8001c58 <HAL_RCC_OscConfig+0x4c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d118      	bne.n	8001a8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5a:	4b7f      	ldr	r3, [pc, #508]	; (8001c58 <HAL_RCC_OscConfig+0x4c8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a7e      	ldr	r2, [pc, #504]	; (8001c58 <HAL_RCC_OscConfig+0x4c8>)
 8001a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a66:	f7ff f941 	bl	8000cec <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6e:	f7ff f93d 	bl	8000cec <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	; 0x64
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e103      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	4b75      	ldr	r3, [pc, #468]	; (8001c58 <HAL_RCC_OscConfig+0x4c8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x312>
 8001a94:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4a6e      	ldr	r2, [pc, #440]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6213      	str	r3, [r2, #32]
 8001aa0:	e02d      	b.n	8001afe <HAL_RCC_OscConfig+0x36e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x334>
 8001aaa:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a69      	ldr	r2, [pc, #420]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	4b67      	ldr	r3, [pc, #412]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4a66      	ldr	r2, [pc, #408]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	f023 0304 	bic.w	r3, r3, #4
 8001ac0:	6213      	str	r3, [r2, #32]
 8001ac2:	e01c      	b.n	8001afe <HAL_RCC_OscConfig+0x36e>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d10c      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x356>
 8001acc:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4a60      	ldr	r2, [pc, #384]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	6213      	str	r3, [r2, #32]
 8001ad8:	4b5e      	ldr	r3, [pc, #376]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4a5d      	ldr	r2, [pc, #372]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6213      	str	r3, [r2, #32]
 8001ae4:	e00b      	b.n	8001afe <HAL_RCC_OscConfig+0x36e>
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a5a      	ldr	r2, [pc, #360]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6213      	str	r3, [r2, #32]
 8001af2:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4a57      	ldr	r2, [pc, #348]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	f023 0304 	bic.w	r3, r3, #4
 8001afc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d015      	beq.n	8001b32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff f8f1 	bl	8000cec <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff f8ed 	bl	8000cec <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e0b1      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0ee      	beq.n	8001b0e <HAL_RCC_OscConfig+0x37e>
 8001b30:	e014      	b.n	8001b5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7ff f8db 	bl	8000cec <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff f8d7 	bl	8000cec <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e09b      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	4b40      	ldr	r3, [pc, #256]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1ee      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d105      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b62:	4b3c      	ldr	r3, [pc, #240]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a3b      	ldr	r2, [pc, #236]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8087 	beq.w	8001c86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d061      	beq.n	8001c48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d146      	bne.n	8001c1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8c:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <HAL_RCC_OscConfig+0x4cc>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7ff f8ab 	bl	8000cec <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff f8a7 	bl	8000cec <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e06d      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bac:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc0:	d108      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	4921      	ldr	r1, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a19      	ldr	r1, [r3, #32]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	430b      	orrs	r3, r1
 8001be6:	491b      	ldr	r1, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x4cc>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff f87b 	bl	8000cec <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff f877 	bl	8000cec <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e03d      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x46a>
 8001c18:	e035      	b.n	8001c86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_RCC_OscConfig+0x4cc>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff f864 	bl	8000cec <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f860 	bl	8000cec <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e026      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x498>
 8001c46:	e01e      	b.n	8001c86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e019      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_RCC_OscConfig+0x500>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d106      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0d0      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b6a      	ldr	r3, [pc, #424]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d910      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b67      	ldr	r3, [pc, #412]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 0207 	bic.w	r2, r3, #7
 8001cbe:	4965      	ldr	r1, [pc, #404]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b63      	ldr	r3, [pc, #396]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0b8      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d020      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf0:	4b59      	ldr	r3, [pc, #356]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d08:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	494d      	ldr	r1, [pc, #308]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d040      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d115      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e07f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e073      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e06b      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d72:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f023 0203 	bic.w	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4936      	ldr	r1, [pc, #216]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d84:	f7fe ffb2 	bl	8000cec <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8c:	f7fe ffae 	bl	8000cec <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e053      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 020c 	and.w	r2, r3, #12
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d1eb      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d210      	bcs.n	8001de4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 0207 	bic.w	r2, r3, #7
 8001dca:	4922      	ldr	r1, [pc, #136]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e032      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4916      	ldr	r1, [pc, #88]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	490e      	ldr	r1, [pc, #56]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e22:	f000 f821 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	490a      	ldr	r1, [pc, #40]	; (8001e5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e34:	5ccb      	ldrb	r3, [r1, r3]
 8001e36:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3a:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <HAL_RCC_ClockConfig+0x1cc>)
 8001e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_RCC_ClockConfig+0x1d0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe ff10 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40022000 	.word	0x40022000
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08004274 	.word	0x08004274
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	b490      	push	{r4, r7}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e70:	1d3c      	adds	r4, r7, #4
 8001e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e78:	f240 2301 	movw	r3, #513	; 0x201
 8001e7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d002      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d003      	beq.n	8001eae <HAL_RCC_GetSysClockFreq+0x46>
 8001ea6:	e02b      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eaa:	623b      	str	r3, [r7, #32]
      break;
 8001eac:	e02b      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	0c9b      	lsrs	r3, r3, #18
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3328      	adds	r3, #40	; 0x28
 8001eb8:	443b      	add	r3, r7
 8001eba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ebe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d012      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	0c5b      	lsrs	r3, r3, #17
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	3328      	adds	r3, #40	; 0x28
 8001ed6:	443b      	add	r3, r7
 8001ed8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001edc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ee2:	fb03 f202 	mul.w	r2, r3, r2
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	e004      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	623b      	str	r3, [r7, #32]
      break;
 8001efe:	e002      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f02:	623b      	str	r3, [r7, #32]
      break;
 8001f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f06:	6a3b      	ldr	r3, [r7, #32]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc90      	pop	{r4, r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	08004264 	.word	0x08004264
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	007a1200 	.word	0x007a1200
 8001f20:	003d0900 	.word	0x003d0900

08001f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f28:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	20000000 	.word	0x20000000

08001f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f3c:	f7ff fff2 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4903      	ldr	r1, [pc, #12]	; (8001f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08004284 	.word	0x08004284

08001f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	0adb      	lsrs	r3, r3, #11
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	4903      	ldr	r1, [pc, #12]	; (8001f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08004284 	.word	0x08004284

08001f88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <RCC_Delay+0x34>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <RCC_Delay+0x38>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0a5b      	lsrs	r3, r3, #9
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa4:	bf00      	nop
  }
  while (Delay --);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	60fa      	str	r2, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f9      	bne.n	8001fa4 <RCC_Delay+0x1c>
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	10624dd3 	.word	0x10624dd3

08001fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e03f      	b.n	8002056 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe fc12 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2224      	movs	r2, #36	; 0x24
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fd03 	bl	8002a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800201c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800202c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800203c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	4613      	mov	r3, r2
 800206a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b20      	cmp	r3, #32
 8002076:	d130      	bne.n	80020da <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_UART_Transmit_IT+0x26>
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e029      	b.n	80020dc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_UART_Transmit_IT+0x38>
 8002092:	2302      	movs	r3, #2
 8002094:	e022      	b.n	80020dc <HAL_UART_Transmit_IT+0x7e>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	88fa      	ldrh	r2, [r7, #6]
 80020a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	88fa      	ldrh	r2, [r7, #6]
 80020ae:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2221      	movs	r2, #33	; 0x21
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020d4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80020da:	2302      	movs	r3, #2
  }
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	4613      	mov	r3, r2
 80020f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d13c      	bne.n	800217a <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e035      	b.n	800217c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800211a:	2302      	movs	r3, #2
 800211c:	e02e      	b.n	800217c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	461a      	mov	r2, r3
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 faa4 	bl	8002680 <UART_Start_Receive_DMA>
 8002138:	4603      	mov	r3, r0
 800213a:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800213c:	7dfb      	ldrb	r3, [r7, #23]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d119      	bne.n	8002176 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	2b01      	cmp	r3, #1
 8002148:	d113      	bne.n	8002172 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0210 	orr.w	r2, r2, #16
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	e001      	b.n	8002176 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8002176:	7dfb      	ldrb	r3, [r7, #23]
 8002178:	e000      	b.n	800217c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 800217a:	2302      	movs	r3, #2
  }
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_UART_IRQHandler+0x52>
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fb76 	bl	80028c0 <UART_Receive_IT>
      return;
 80021d4:	e17b      	b.n	80024ce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80b1 	beq.w	8002340 <HAL_UART_IRQHandler+0x1bc>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <HAL_UART_IRQHandler+0x70>
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80a6 	beq.w	8002340 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_UART_IRQHandler+0x90>
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_UART_IRQHandler+0xb0>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0202 	orr.w	r2, r3, #2
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_UART_IRQHandler+0xd0>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00f      	beq.n	800227e <HAL_UART_IRQHandler+0xfa>
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <HAL_UART_IRQHandler+0xee>
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f043 0208 	orr.w	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 811e 	beq.w	80024c4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_UART_IRQHandler+0x11e>
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fb0f 	bl	80028c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <HAL_UART_IRQHandler+0x146>
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d031      	beq.n	800232e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fa51 	bl	8002772 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d023      	beq.n	8002326 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d013      	beq.n	800231e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	4a76      	ldr	r2, [pc, #472]	; (80024d4 <HAL_UART_IRQHandler+0x350>)
 80022fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fefe 	bl	8001104 <HAL_DMA_Abort_IT>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d016      	beq.n	800233c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002318:	4610      	mov	r0, r2
 800231a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800231c:	e00e      	b.n	800233c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8f5 	bl	800250e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002324:	e00a      	b.n	800233c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8f1 	bl	800250e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800232c:	e006      	b.n	800233c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f8ed 	bl	800250e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800233a:	e0c3      	b.n	80024c4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800233c:	bf00      	nop
    return;
 800233e:	e0c1      	b.n	80024c4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	2b01      	cmp	r3, #1
 8002346:	f040 80a1 	bne.w	800248c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 809b 	beq.w	800248c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8095 	beq.w	800248c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d04e      	beq.n	8002424 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002390:	8a3b      	ldrh	r3, [r7, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 8098 	beq.w	80024c8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800239c:	8a3a      	ldrh	r2, [r7, #16]
 800239e:	429a      	cmp	r2, r3
 80023a0:	f080 8092 	bcs.w	80024c8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8a3a      	ldrh	r2, [r7, #16]
 80023a8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d02b      	beq.n	800240c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023e2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0210 	bic.w	r2, r2, #16
 8002400:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fe41 	bl	800108e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002414:	b29b      	uxth	r3, r3
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	b29b      	uxth	r3, r3
 800241a:	4619      	mov	r1, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7fe f8f9 	bl	8000614 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002422:	e051      	b.n	80024c8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800242c:	b29b      	uxth	r3, r3
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d047      	beq.n	80024cc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800243c:	8a7b      	ldrh	r3, [r7, #18]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d044      	beq.n	80024cc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002450:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0210 	bic.w	r2, r2, #16
 800247e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002480:	8a7b      	ldrh	r3, [r7, #18]
 8002482:	4619      	mov	r1, r3
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7fe f8c5 	bl	8000614 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800248a:	e01f      	b.n	80024cc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <HAL_UART_IRQHandler+0x324>
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f9a6 	bl	80027f2 <UART_Transmit_IT>
    return;
 80024a6:	e012      	b.n	80024ce <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <HAL_UART_IRQHandler+0x34a>
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f9e7 	bl	8002890 <UART_EndTransmit_IT>
    return;
 80024c2:	e004      	b.n	80024ce <HAL_UART_IRQHandler+0x34a>
    return;
 80024c4:	bf00      	nop
 80024c6:	e002      	b.n	80024ce <HAL_UART_IRQHandler+0x34a>
      return;
 80024c8:	bf00      	nop
 80024ca:	e000      	b.n	80024ce <HAL_UART_IRQHandler+0x34a>
      return;
 80024cc:	bf00      	nop
  }
}
 80024ce:	3728      	adds	r7, #40	; 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	080027cb 	.word	0x080027cb

080024d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d12a      	bne.n	8002592 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002550:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002570:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0210 	bic.w	r2, r2, #16
 8002590:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	2b01      	cmp	r3, #1
 8002598:	d106      	bne.n	80025a8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800259e:	4619      	mov	r1, r3
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7fe f837 	bl	8000614 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80025a6:	e002      	b.n	80025ae <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff ff9e 	bl	80024ea <HAL_UART_RxCpltCallback>
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d108      	bne.n	80025de <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4619      	mov	r1, r3
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f7fe f81c 	bl	8000614 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80025dc:	e002      	b.n	80025e4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f7ff ff8c 	bl	80024fc <HAL_UART_RxHalfCpltCallback>
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b21      	cmp	r3, #33	; 0x21
 800261e:	d108      	bne.n	8002632 <UART_DMAError+0x46>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800262c:	68b8      	ldr	r0, [r7, #8]
 800262e:	f000 f88b 	bl	8002748 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b22      	cmp	r3, #34	; 0x22
 8002652:	d108      	bne.n	8002666 <UART_DMAError+0x7a>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2200      	movs	r2, #0
 800265e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002660:	68b8      	ldr	r0, [r7, #8]
 8002662:	f000 f886 	bl	8002772 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f043 0210 	orr.w	r2, r3, #16
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002672:	68b8      	ldr	r0, [r7, #8]
 8002674:	f7ff ff4b 	bl	800250e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2222      	movs	r2, #34	; 0x22
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	4a23      	ldr	r2, [pc, #140]	; (800273c <UART_Start_Receive_DMA+0xbc>)
 80026ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <UART_Start_Receive_DMA+0xc0>)
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	4a21      	ldr	r2, [pc, #132]	; (8002744 <UART_Start_Receive_DMA+0xc4>)
 80026be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	2200      	movs	r2, #0
 80026c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3304      	adds	r3, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	f7fe fc76 	bl	8000fd0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002710:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002730:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	08002521 	.word	0x08002521
 8002740:	080025b7 	.word	0x080025b7
 8002744:	080025ed 	.word	0x080025ed

08002748 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800275e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002788:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0210 	bic.w	r2, r2, #16
 80027b0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fe92 	bl	800250e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b21      	cmp	r3, #33	; 0x21
 8002804:	d13e      	bne.n	8002884 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	d114      	bne.n	800283a <UART_Transmit_IT+0x48>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d110      	bne.n	800283a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800282c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	1c9a      	adds	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	621a      	str	r2, [r3, #32]
 8002838:	e008      	b.n	800284c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	1c59      	adds	r1, r3, #1
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6211      	str	r1, [r2, #32]
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29b      	uxth	r3, r3
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4619      	mov	r1, r3
 800285a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10f      	bne.n	8002880 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800286e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff fe11 	bl	80024d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b22      	cmp	r3, #34	; 0x22
 80028d2:	f040 8099 	bne.w	8002a08 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028de:	d117      	bne.n	8002910 <UART_Receive_IT+0x50>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d113      	bne.n	8002910 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028fe:	b29a      	uxth	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	1c9a      	adds	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
 800290e:	e026      	b.n	800295e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002922:	d007      	beq.n	8002934 <UART_Receive_IT+0x74>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <UART_Receive_IT+0x82>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e008      	b.n	8002954 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800294e:	b2da      	uxtb	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29b      	uxth	r3, r3
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4619      	mov	r1, r3
 800296c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800296e:	2b00      	cmp	r3, #0
 8002970:	d148      	bne.n	8002a04 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0220 	bic.w	r2, r2, #32
 8002980:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002990:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d123      	bne.n	80029fa <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0210 	bic.w	r2, r2, #16
 80029c6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b10      	cmp	r3, #16
 80029d4:	d10a      	bne.n	80029ec <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029f0:	4619      	mov	r1, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fd fe0e 	bl	8000614 <HAL_UARTEx_RxEventCallback>
 80029f8:	e002      	b.n	8002a00 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fd75 	bl	80024ea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e002      	b.n	8002a0a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e000      	b.n	8002a0a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
  }
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a4e:	f023 030c 	bic.w	r3, r3, #12
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a2c      	ldr	r2, [pc, #176]	; (8002b28 <UART_SetConfig+0x114>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d103      	bne.n	8002a84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a7c:	f7ff fa70 	bl	8001f60 <HAL_RCC_GetPCLK2Freq>
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	e002      	b.n	8002a8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a84:	f7ff fa58 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8002a88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	009a      	lsls	r2, r3, #2
 8002a94:	441a      	add	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa0:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <UART_SetConfig+0x118>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	0119      	lsls	r1, r3, #4
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	441a      	add	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <UART_SetConfig+0x118>)
 8002ac2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2064      	movs	r0, #100	; 0x64
 8002aca:	fb00 f303 	mul.w	r3, r0, r3
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	3332      	adds	r3, #50	; 0x32
 8002ad4:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <UART_SetConfig+0x118>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae0:	4419      	add	r1, r3
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	009a      	lsls	r2, r3, #2
 8002aec:	441a      	add	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <UART_SetConfig+0x118>)
 8002afa:	fba3 0302 	umull	r0, r3, r3, r2
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2064      	movs	r0, #100	; 0x64
 8002b02:	fb00 f303 	mul.w	r3, r0, r3
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	3332      	adds	r3, #50	; 0x32
 8002b0c:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <UART_SetConfig+0x118>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	440a      	add	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40013800 	.word	0x40013800
 8002b2c:	51eb851f 	.word	0x51eb851f

08002b30 <__assert_func>:
 8002b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b32:	4614      	mov	r4, r2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <__assert_func+0x2c>)
 8002b38:	4605      	mov	r5, r0
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68d8      	ldr	r0, [r3, #12]
 8002b3e:	b14c      	cbz	r4, 8002b54 <__assert_func+0x24>
 8002b40:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <__assert_func+0x30>)
 8002b42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002b46:	9100      	str	r1, [sp, #0]
 8002b48:	462b      	mov	r3, r5
 8002b4a:	4906      	ldr	r1, [pc, #24]	; (8002b64 <__assert_func+0x34>)
 8002b4c:	f000 f818 	bl	8002b80 <fiprintf>
 8002b50:	f000 fd44 	bl	80035dc <abort>
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <__assert_func+0x38>)
 8002b56:	461c      	mov	r4, r3
 8002b58:	e7f3      	b.n	8002b42 <__assert_func+0x12>
 8002b5a:	bf00      	nop
 8002b5c:	2000000c 	.word	0x2000000c
 8002b60:	0800428c 	.word	0x0800428c
 8002b64:	08004299 	.word	0x08004299
 8002b68:	080042c7 	.word	0x080042c7

08002b6c <atoi>:
 8002b6c:	220a      	movs	r2, #10
 8002b6e:	2100      	movs	r1, #0
 8002b70:	f000 bc6a 	b.w	8003448 <strtol>

08002b74 <__errno>:
 8002b74:	4b01      	ldr	r3, [pc, #4]	; (8002b7c <__errno+0x8>)
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	2000000c 	.word	0x2000000c

08002b80 <fiprintf>:
 8002b80:	b40e      	push	{r1, r2, r3}
 8002b82:	b503      	push	{r0, r1, lr}
 8002b84:	4601      	mov	r1, r0
 8002b86:	ab03      	add	r3, sp, #12
 8002b88:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <fiprintf+0x20>)
 8002b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b8e:	6800      	ldr	r0, [r0, #0]
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	f000 f85b 	bl	8002c4c <_vfiprintf_r>
 8002b96:	b002      	add	sp, #8
 8002b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b9c:	b003      	add	sp, #12
 8002b9e:	4770      	bx	lr
 8002ba0:	2000000c 	.word	0x2000000c

08002ba4 <__libc_init_array>:
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	2600      	movs	r6, #0
 8002ba8:	4d0c      	ldr	r5, [pc, #48]	; (8002bdc <__libc_init_array+0x38>)
 8002baa:	4c0d      	ldr	r4, [pc, #52]	; (8002be0 <__libc_init_array+0x3c>)
 8002bac:	1b64      	subs	r4, r4, r5
 8002bae:	10a4      	asrs	r4, r4, #2
 8002bb0:	42a6      	cmp	r6, r4
 8002bb2:	d109      	bne.n	8002bc8 <__libc_init_array+0x24>
 8002bb4:	f001 faee 	bl	8004194 <_init>
 8002bb8:	2600      	movs	r6, #0
 8002bba:	4d0a      	ldr	r5, [pc, #40]	; (8002be4 <__libc_init_array+0x40>)
 8002bbc:	4c0a      	ldr	r4, [pc, #40]	; (8002be8 <__libc_init_array+0x44>)
 8002bbe:	1b64      	subs	r4, r4, r5
 8002bc0:	10a4      	asrs	r4, r4, #2
 8002bc2:	42a6      	cmp	r6, r4
 8002bc4:	d105      	bne.n	8002bd2 <__libc_init_array+0x2e>
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bcc:	4798      	blx	r3
 8002bce:	3601      	adds	r6, #1
 8002bd0:	e7ee      	b.n	8002bb0 <__libc_init_array+0xc>
 8002bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd6:	4798      	blx	r3
 8002bd8:	3601      	adds	r6, #1
 8002bda:	e7f2      	b.n	8002bc2 <__libc_init_array+0x1e>
 8002bdc:	080044d4 	.word	0x080044d4
 8002be0:	080044d4 	.word	0x080044d4
 8002be4:	080044d4 	.word	0x080044d4
 8002be8:	080044d8 	.word	0x080044d8

08002bec <memset>:
 8002bec:	4603      	mov	r3, r0
 8002bee:	4402      	add	r2, r0
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d100      	bne.n	8002bf6 <memset+0xa>
 8002bf4:	4770      	bx	lr
 8002bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bfa:	e7f9      	b.n	8002bf0 <memset+0x4>

08002bfc <__sfputc_r>:
 8002bfc:	6893      	ldr	r3, [r2, #8]
 8002bfe:	b410      	push	{r4}
 8002c00:	3b01      	subs	r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	6093      	str	r3, [r2, #8]
 8002c06:	da07      	bge.n	8002c18 <__sfputc_r+0x1c>
 8002c08:	6994      	ldr	r4, [r2, #24]
 8002c0a:	42a3      	cmp	r3, r4
 8002c0c:	db01      	blt.n	8002c12 <__sfputc_r+0x16>
 8002c0e:	290a      	cmp	r1, #10
 8002c10:	d102      	bne.n	8002c18 <__sfputc_r+0x1c>
 8002c12:	bc10      	pop	{r4}
 8002c14:	f000 bc22 	b.w	800345c <__swbuf_r>
 8002c18:	6813      	ldr	r3, [r2, #0]
 8002c1a:	1c58      	adds	r0, r3, #1
 8002c1c:	6010      	str	r0, [r2, #0]
 8002c1e:	7019      	strb	r1, [r3, #0]
 8002c20:	4608      	mov	r0, r1
 8002c22:	bc10      	pop	{r4}
 8002c24:	4770      	bx	lr

08002c26 <__sfputs_r>:
 8002c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c28:	4606      	mov	r6, r0
 8002c2a:	460f      	mov	r7, r1
 8002c2c:	4614      	mov	r4, r2
 8002c2e:	18d5      	adds	r5, r2, r3
 8002c30:	42ac      	cmp	r4, r5
 8002c32:	d101      	bne.n	8002c38 <__sfputs_r+0x12>
 8002c34:	2000      	movs	r0, #0
 8002c36:	e007      	b.n	8002c48 <__sfputs_r+0x22>
 8002c38:	463a      	mov	r2, r7
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c40:	f7ff ffdc 	bl	8002bfc <__sfputc_r>
 8002c44:	1c43      	adds	r3, r0, #1
 8002c46:	d1f3      	bne.n	8002c30 <__sfputs_r+0xa>
 8002c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c4c <_vfiprintf_r>:
 8002c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c50:	460d      	mov	r5, r1
 8002c52:	4614      	mov	r4, r2
 8002c54:	4698      	mov	r8, r3
 8002c56:	4606      	mov	r6, r0
 8002c58:	b09d      	sub	sp, #116	; 0x74
 8002c5a:	b118      	cbz	r0, 8002c64 <_vfiprintf_r+0x18>
 8002c5c:	6983      	ldr	r3, [r0, #24]
 8002c5e:	b90b      	cbnz	r3, 8002c64 <_vfiprintf_r+0x18>
 8002c60:	f000 fdda 	bl	8003818 <__sinit>
 8002c64:	4b89      	ldr	r3, [pc, #548]	; (8002e8c <_vfiprintf_r+0x240>)
 8002c66:	429d      	cmp	r5, r3
 8002c68:	d11b      	bne.n	8002ca2 <_vfiprintf_r+0x56>
 8002c6a:	6875      	ldr	r5, [r6, #4]
 8002c6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c6e:	07d9      	lsls	r1, r3, #31
 8002c70:	d405      	bmi.n	8002c7e <_vfiprintf_r+0x32>
 8002c72:	89ab      	ldrh	r3, [r5, #12]
 8002c74:	059a      	lsls	r2, r3, #22
 8002c76:	d402      	bmi.n	8002c7e <_vfiprintf_r+0x32>
 8002c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c7a:	f000 fe6b 	bl	8003954 <__retarget_lock_acquire_recursive>
 8002c7e:	89ab      	ldrh	r3, [r5, #12]
 8002c80:	071b      	lsls	r3, r3, #28
 8002c82:	d501      	bpl.n	8002c88 <_vfiprintf_r+0x3c>
 8002c84:	692b      	ldr	r3, [r5, #16]
 8002c86:	b9eb      	cbnz	r3, 8002cc4 <_vfiprintf_r+0x78>
 8002c88:	4629      	mov	r1, r5
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	f000 fc38 	bl	8003500 <__swsetup_r>
 8002c90:	b1c0      	cbz	r0, 8002cc4 <_vfiprintf_r+0x78>
 8002c92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c94:	07dc      	lsls	r4, r3, #31
 8002c96:	d50e      	bpl.n	8002cb6 <_vfiprintf_r+0x6a>
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c9c:	b01d      	add	sp, #116	; 0x74
 8002c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ca2:	4b7b      	ldr	r3, [pc, #492]	; (8002e90 <_vfiprintf_r+0x244>)
 8002ca4:	429d      	cmp	r5, r3
 8002ca6:	d101      	bne.n	8002cac <_vfiprintf_r+0x60>
 8002ca8:	68b5      	ldr	r5, [r6, #8]
 8002caa:	e7df      	b.n	8002c6c <_vfiprintf_r+0x20>
 8002cac:	4b79      	ldr	r3, [pc, #484]	; (8002e94 <_vfiprintf_r+0x248>)
 8002cae:	429d      	cmp	r5, r3
 8002cb0:	bf08      	it	eq
 8002cb2:	68f5      	ldreq	r5, [r6, #12]
 8002cb4:	e7da      	b.n	8002c6c <_vfiprintf_r+0x20>
 8002cb6:	89ab      	ldrh	r3, [r5, #12]
 8002cb8:	0598      	lsls	r0, r3, #22
 8002cba:	d4ed      	bmi.n	8002c98 <_vfiprintf_r+0x4c>
 8002cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cbe:	f000 fe4a 	bl	8003956 <__retarget_lock_release_recursive>
 8002cc2:	e7e9      	b.n	8002c98 <_vfiprintf_r+0x4c>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cc8:	2320      	movs	r3, #32
 8002cca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cce:	2330      	movs	r3, #48	; 0x30
 8002cd0:	f04f 0901 	mov.w	r9, #1
 8002cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cd8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002e98 <_vfiprintf_r+0x24c>
 8002cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ce0:	4623      	mov	r3, r4
 8002ce2:	469a      	mov	sl, r3
 8002ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ce8:	b10a      	cbz	r2, 8002cee <_vfiprintf_r+0xa2>
 8002cea:	2a25      	cmp	r2, #37	; 0x25
 8002cec:	d1f9      	bne.n	8002ce2 <_vfiprintf_r+0x96>
 8002cee:	ebba 0b04 	subs.w	fp, sl, r4
 8002cf2:	d00b      	beq.n	8002d0c <_vfiprintf_r+0xc0>
 8002cf4:	465b      	mov	r3, fp
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	4630      	mov	r0, r6
 8002cfc:	f7ff ff93 	bl	8002c26 <__sfputs_r>
 8002d00:	3001      	adds	r0, #1
 8002d02:	f000 80aa 	beq.w	8002e5a <_vfiprintf_r+0x20e>
 8002d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d08:	445a      	add	r2, fp
 8002d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8002d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80a2 	beq.w	8002e5a <_vfiprintf_r+0x20e>
 8002d16:	2300      	movs	r3, #0
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d20:	f10a 0a01 	add.w	sl, sl, #1
 8002d24:	9304      	str	r3, [sp, #16]
 8002d26:	9307      	str	r3, [sp, #28]
 8002d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8002d2e:	4654      	mov	r4, sl
 8002d30:	2205      	movs	r2, #5
 8002d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d36:	4858      	ldr	r0, [pc, #352]	; (8002e98 <_vfiprintf_r+0x24c>)
 8002d38:	f000 fe7c 	bl	8003a34 <memchr>
 8002d3c:	9a04      	ldr	r2, [sp, #16]
 8002d3e:	b9d8      	cbnz	r0, 8002d78 <_vfiprintf_r+0x12c>
 8002d40:	06d1      	lsls	r1, r2, #27
 8002d42:	bf44      	itt	mi
 8002d44:	2320      	movmi	r3, #32
 8002d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d4a:	0713      	lsls	r3, r2, #28
 8002d4c:	bf44      	itt	mi
 8002d4e:	232b      	movmi	r3, #43	; 0x2b
 8002d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d54:	f89a 3000 	ldrb.w	r3, [sl]
 8002d58:	2b2a      	cmp	r3, #42	; 0x2a
 8002d5a:	d015      	beq.n	8002d88 <_vfiprintf_r+0x13c>
 8002d5c:	4654      	mov	r4, sl
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f04f 0c0a 	mov.w	ip, #10
 8002d64:	9a07      	ldr	r2, [sp, #28]
 8002d66:	4621      	mov	r1, r4
 8002d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d6c:	3b30      	subs	r3, #48	; 0x30
 8002d6e:	2b09      	cmp	r3, #9
 8002d70:	d94e      	bls.n	8002e10 <_vfiprintf_r+0x1c4>
 8002d72:	b1b0      	cbz	r0, 8002da2 <_vfiprintf_r+0x156>
 8002d74:	9207      	str	r2, [sp, #28]
 8002d76:	e014      	b.n	8002da2 <_vfiprintf_r+0x156>
 8002d78:	eba0 0308 	sub.w	r3, r0, r8
 8002d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8002d80:	4313      	orrs	r3, r2
 8002d82:	46a2      	mov	sl, r4
 8002d84:	9304      	str	r3, [sp, #16]
 8002d86:	e7d2      	b.n	8002d2e <_vfiprintf_r+0xe2>
 8002d88:	9b03      	ldr	r3, [sp, #12]
 8002d8a:	1d19      	adds	r1, r3, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	9103      	str	r1, [sp, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bfbb      	ittet	lt
 8002d94:	425b      	neglt	r3, r3
 8002d96:	f042 0202 	orrlt.w	r2, r2, #2
 8002d9a:	9307      	strge	r3, [sp, #28]
 8002d9c:	9307      	strlt	r3, [sp, #28]
 8002d9e:	bfb8      	it	lt
 8002da0:	9204      	strlt	r2, [sp, #16]
 8002da2:	7823      	ldrb	r3, [r4, #0]
 8002da4:	2b2e      	cmp	r3, #46	; 0x2e
 8002da6:	d10c      	bne.n	8002dc2 <_vfiprintf_r+0x176>
 8002da8:	7863      	ldrb	r3, [r4, #1]
 8002daa:	2b2a      	cmp	r3, #42	; 0x2a
 8002dac:	d135      	bne.n	8002e1a <_vfiprintf_r+0x1ce>
 8002dae:	9b03      	ldr	r3, [sp, #12]
 8002db0:	3402      	adds	r4, #2
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	9203      	str	r2, [sp, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bfb8      	it	lt
 8002dbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002dc0:	9305      	str	r3, [sp, #20]
 8002dc2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002e9c <_vfiprintf_r+0x250>
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	4650      	mov	r0, sl
 8002dca:	7821      	ldrb	r1, [r4, #0]
 8002dcc:	f000 fe32 	bl	8003a34 <memchr>
 8002dd0:	b140      	cbz	r0, 8002de4 <_vfiprintf_r+0x198>
 8002dd2:	2340      	movs	r3, #64	; 0x40
 8002dd4:	eba0 000a 	sub.w	r0, r0, sl
 8002dd8:	fa03 f000 	lsl.w	r0, r3, r0
 8002ddc:	9b04      	ldr	r3, [sp, #16]
 8002dde:	3401      	adds	r4, #1
 8002de0:	4303      	orrs	r3, r0
 8002de2:	9304      	str	r3, [sp, #16]
 8002de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002de8:	2206      	movs	r2, #6
 8002dea:	482d      	ldr	r0, [pc, #180]	; (8002ea0 <_vfiprintf_r+0x254>)
 8002dec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002df0:	f000 fe20 	bl	8003a34 <memchr>
 8002df4:	2800      	cmp	r0, #0
 8002df6:	d03f      	beq.n	8002e78 <_vfiprintf_r+0x22c>
 8002df8:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <_vfiprintf_r+0x258>)
 8002dfa:	bb1b      	cbnz	r3, 8002e44 <_vfiprintf_r+0x1f8>
 8002dfc:	9b03      	ldr	r3, [sp, #12]
 8002dfe:	3307      	adds	r3, #7
 8002e00:	f023 0307 	bic.w	r3, r3, #7
 8002e04:	3308      	adds	r3, #8
 8002e06:	9303      	str	r3, [sp, #12]
 8002e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e0a:	443b      	add	r3, r7
 8002e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e0e:	e767      	b.n	8002ce0 <_vfiprintf_r+0x94>
 8002e10:	460c      	mov	r4, r1
 8002e12:	2001      	movs	r0, #1
 8002e14:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e18:	e7a5      	b.n	8002d66 <_vfiprintf_r+0x11a>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f04f 0c0a 	mov.w	ip, #10
 8002e20:	4619      	mov	r1, r3
 8002e22:	3401      	adds	r4, #1
 8002e24:	9305      	str	r3, [sp, #20]
 8002e26:	4620      	mov	r0, r4
 8002e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e2c:	3a30      	subs	r2, #48	; 0x30
 8002e2e:	2a09      	cmp	r2, #9
 8002e30:	d903      	bls.n	8002e3a <_vfiprintf_r+0x1ee>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0c5      	beq.n	8002dc2 <_vfiprintf_r+0x176>
 8002e36:	9105      	str	r1, [sp, #20]
 8002e38:	e7c3      	b.n	8002dc2 <_vfiprintf_r+0x176>
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e42:	e7f0      	b.n	8002e26 <_vfiprintf_r+0x1da>
 8002e44:	ab03      	add	r3, sp, #12
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	462a      	mov	r2, r5
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <_vfiprintf_r+0x25c>)
 8002e4e:	a904      	add	r1, sp, #16
 8002e50:	f3af 8000 	nop.w
 8002e54:	4607      	mov	r7, r0
 8002e56:	1c78      	adds	r0, r7, #1
 8002e58:	d1d6      	bne.n	8002e08 <_vfiprintf_r+0x1bc>
 8002e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e5c:	07d9      	lsls	r1, r3, #31
 8002e5e:	d405      	bmi.n	8002e6c <_vfiprintf_r+0x220>
 8002e60:	89ab      	ldrh	r3, [r5, #12]
 8002e62:	059a      	lsls	r2, r3, #22
 8002e64:	d402      	bmi.n	8002e6c <_vfiprintf_r+0x220>
 8002e66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e68:	f000 fd75 	bl	8003956 <__retarget_lock_release_recursive>
 8002e6c:	89ab      	ldrh	r3, [r5, #12]
 8002e6e:	065b      	lsls	r3, r3, #25
 8002e70:	f53f af12 	bmi.w	8002c98 <_vfiprintf_r+0x4c>
 8002e74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e76:	e711      	b.n	8002c9c <_vfiprintf_r+0x50>
 8002e78:	ab03      	add	r3, sp, #12
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	462a      	mov	r2, r5
 8002e7e:	4630      	mov	r0, r6
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <_vfiprintf_r+0x25c>)
 8002e82:	a904      	add	r1, sp, #16
 8002e84:	f000 f882 	bl	8002f8c <_printf_i>
 8002e88:	e7e4      	b.n	8002e54 <_vfiprintf_r+0x208>
 8002e8a:	bf00      	nop
 8002e8c:	08004494 	.word	0x08004494
 8002e90:	080044b4 	.word	0x080044b4
 8002e94:	08004474 	.word	0x08004474
 8002e98:	080042cc 	.word	0x080042cc
 8002e9c:	080042d2 	.word	0x080042d2
 8002ea0:	080042d6 	.word	0x080042d6
 8002ea4:	00000000 	.word	0x00000000
 8002ea8:	08002c27 	.word	0x08002c27

08002eac <_printf_common>:
 8002eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb0:	4616      	mov	r6, r2
 8002eb2:	4699      	mov	r9, r3
 8002eb4:	688a      	ldr	r2, [r1, #8]
 8002eb6:	690b      	ldr	r3, [r1, #16]
 8002eb8:	4607      	mov	r7, r0
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	bfb8      	it	lt
 8002ebe:	4613      	movlt	r3, r2
 8002ec0:	6033      	str	r3, [r6, #0]
 8002ec2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ecc:	b10a      	cbz	r2, 8002ed2 <_printf_common+0x26>
 8002ece:	3301      	adds	r3, #1
 8002ed0:	6033      	str	r3, [r6, #0]
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	0699      	lsls	r1, r3, #26
 8002ed6:	bf42      	ittt	mi
 8002ed8:	6833      	ldrmi	r3, [r6, #0]
 8002eda:	3302      	addmi	r3, #2
 8002edc:	6033      	strmi	r3, [r6, #0]
 8002ede:	6825      	ldr	r5, [r4, #0]
 8002ee0:	f015 0506 	ands.w	r5, r5, #6
 8002ee4:	d106      	bne.n	8002ef4 <_printf_common+0x48>
 8002ee6:	f104 0a19 	add.w	sl, r4, #25
 8002eea:	68e3      	ldr	r3, [r4, #12]
 8002eec:	6832      	ldr	r2, [r6, #0]
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	42ab      	cmp	r3, r5
 8002ef2:	dc28      	bgt.n	8002f46 <_printf_common+0x9a>
 8002ef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ef8:	1e13      	subs	r3, r2, #0
 8002efa:	6822      	ldr	r2, [r4, #0]
 8002efc:	bf18      	it	ne
 8002efe:	2301      	movne	r3, #1
 8002f00:	0692      	lsls	r2, r2, #26
 8002f02:	d42d      	bmi.n	8002f60 <_printf_common+0xb4>
 8002f04:	4649      	mov	r1, r9
 8002f06:	4638      	mov	r0, r7
 8002f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f0c:	47c0      	blx	r8
 8002f0e:	3001      	adds	r0, #1
 8002f10:	d020      	beq.n	8002f54 <_printf_common+0xa8>
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	68e5      	ldr	r5, [r4, #12]
 8002f16:	f003 0306 	and.w	r3, r3, #6
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	bf18      	it	ne
 8002f1e:	2500      	movne	r5, #0
 8002f20:	6832      	ldr	r2, [r6, #0]
 8002f22:	f04f 0600 	mov.w	r6, #0
 8002f26:	68a3      	ldr	r3, [r4, #8]
 8002f28:	bf08      	it	eq
 8002f2a:	1aad      	subeq	r5, r5, r2
 8002f2c:	6922      	ldr	r2, [r4, #16]
 8002f2e:	bf08      	it	eq
 8002f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bfc4      	itt	gt
 8002f38:	1a9b      	subgt	r3, r3, r2
 8002f3a:	18ed      	addgt	r5, r5, r3
 8002f3c:	341a      	adds	r4, #26
 8002f3e:	42b5      	cmp	r5, r6
 8002f40:	d11a      	bne.n	8002f78 <_printf_common+0xcc>
 8002f42:	2000      	movs	r0, #0
 8002f44:	e008      	b.n	8002f58 <_printf_common+0xac>
 8002f46:	2301      	movs	r3, #1
 8002f48:	4652      	mov	r2, sl
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	47c0      	blx	r8
 8002f50:	3001      	adds	r0, #1
 8002f52:	d103      	bne.n	8002f5c <_printf_common+0xb0>
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f5c:	3501      	adds	r5, #1
 8002f5e:	e7c4      	b.n	8002eea <_printf_common+0x3e>
 8002f60:	2030      	movs	r0, #48	; 0x30
 8002f62:	18e1      	adds	r1, r4, r3
 8002f64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f6e:	4422      	add	r2, r4
 8002f70:	3302      	adds	r3, #2
 8002f72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f76:	e7c5      	b.n	8002f04 <_printf_common+0x58>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	4649      	mov	r1, r9
 8002f7e:	4638      	mov	r0, r7
 8002f80:	47c0      	blx	r8
 8002f82:	3001      	adds	r0, #1
 8002f84:	d0e6      	beq.n	8002f54 <_printf_common+0xa8>
 8002f86:	3601      	adds	r6, #1
 8002f88:	e7d9      	b.n	8002f3e <_printf_common+0x92>
	...

08002f8c <_printf_i>:
 8002f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f90:	7e0f      	ldrb	r7, [r1, #24]
 8002f92:	4691      	mov	r9, r2
 8002f94:	2f78      	cmp	r7, #120	; 0x78
 8002f96:	4680      	mov	r8, r0
 8002f98:	460c      	mov	r4, r1
 8002f9a:	469a      	mov	sl, r3
 8002f9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002fa2:	d807      	bhi.n	8002fb4 <_printf_i+0x28>
 8002fa4:	2f62      	cmp	r7, #98	; 0x62
 8002fa6:	d80a      	bhi.n	8002fbe <_printf_i+0x32>
 8002fa8:	2f00      	cmp	r7, #0
 8002faa:	f000 80d9 	beq.w	8003160 <_printf_i+0x1d4>
 8002fae:	2f58      	cmp	r7, #88	; 0x58
 8002fb0:	f000 80a4 	beq.w	80030fc <_printf_i+0x170>
 8002fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fbc:	e03a      	b.n	8003034 <_printf_i+0xa8>
 8002fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fc2:	2b15      	cmp	r3, #21
 8002fc4:	d8f6      	bhi.n	8002fb4 <_printf_i+0x28>
 8002fc6:	a101      	add	r1, pc, #4	; (adr r1, 8002fcc <_printf_i+0x40>)
 8002fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fcc:	08003025 	.word	0x08003025
 8002fd0:	08003039 	.word	0x08003039
 8002fd4:	08002fb5 	.word	0x08002fb5
 8002fd8:	08002fb5 	.word	0x08002fb5
 8002fdc:	08002fb5 	.word	0x08002fb5
 8002fe0:	08002fb5 	.word	0x08002fb5
 8002fe4:	08003039 	.word	0x08003039
 8002fe8:	08002fb5 	.word	0x08002fb5
 8002fec:	08002fb5 	.word	0x08002fb5
 8002ff0:	08002fb5 	.word	0x08002fb5
 8002ff4:	08002fb5 	.word	0x08002fb5
 8002ff8:	08003147 	.word	0x08003147
 8002ffc:	08003069 	.word	0x08003069
 8003000:	08003129 	.word	0x08003129
 8003004:	08002fb5 	.word	0x08002fb5
 8003008:	08002fb5 	.word	0x08002fb5
 800300c:	08003169 	.word	0x08003169
 8003010:	08002fb5 	.word	0x08002fb5
 8003014:	08003069 	.word	0x08003069
 8003018:	08002fb5 	.word	0x08002fb5
 800301c:	08002fb5 	.word	0x08002fb5
 8003020:	08003131 	.word	0x08003131
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	1d1a      	adds	r2, r3, #4
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	602a      	str	r2, [r5, #0]
 800302c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003034:	2301      	movs	r3, #1
 8003036:	e0a4      	b.n	8003182 <_printf_i+0x1f6>
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	6829      	ldr	r1, [r5, #0]
 800303c:	0606      	lsls	r6, r0, #24
 800303e:	f101 0304 	add.w	r3, r1, #4
 8003042:	d50a      	bpl.n	800305a <_printf_i+0xce>
 8003044:	680e      	ldr	r6, [r1, #0]
 8003046:	602b      	str	r3, [r5, #0]
 8003048:	2e00      	cmp	r6, #0
 800304a:	da03      	bge.n	8003054 <_printf_i+0xc8>
 800304c:	232d      	movs	r3, #45	; 0x2d
 800304e:	4276      	negs	r6, r6
 8003050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003054:	230a      	movs	r3, #10
 8003056:	485e      	ldr	r0, [pc, #376]	; (80031d0 <_printf_i+0x244>)
 8003058:	e019      	b.n	800308e <_printf_i+0x102>
 800305a:	680e      	ldr	r6, [r1, #0]
 800305c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003060:	602b      	str	r3, [r5, #0]
 8003062:	bf18      	it	ne
 8003064:	b236      	sxthne	r6, r6
 8003066:	e7ef      	b.n	8003048 <_printf_i+0xbc>
 8003068:	682b      	ldr	r3, [r5, #0]
 800306a:	6820      	ldr	r0, [r4, #0]
 800306c:	1d19      	adds	r1, r3, #4
 800306e:	6029      	str	r1, [r5, #0]
 8003070:	0601      	lsls	r1, r0, #24
 8003072:	d501      	bpl.n	8003078 <_printf_i+0xec>
 8003074:	681e      	ldr	r6, [r3, #0]
 8003076:	e002      	b.n	800307e <_printf_i+0xf2>
 8003078:	0646      	lsls	r6, r0, #25
 800307a:	d5fb      	bpl.n	8003074 <_printf_i+0xe8>
 800307c:	881e      	ldrh	r6, [r3, #0]
 800307e:	2f6f      	cmp	r7, #111	; 0x6f
 8003080:	bf0c      	ite	eq
 8003082:	2308      	moveq	r3, #8
 8003084:	230a      	movne	r3, #10
 8003086:	4852      	ldr	r0, [pc, #328]	; (80031d0 <_printf_i+0x244>)
 8003088:	2100      	movs	r1, #0
 800308a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800308e:	6865      	ldr	r5, [r4, #4]
 8003090:	2d00      	cmp	r5, #0
 8003092:	bfa8      	it	ge
 8003094:	6821      	ldrge	r1, [r4, #0]
 8003096:	60a5      	str	r5, [r4, #8]
 8003098:	bfa4      	itt	ge
 800309a:	f021 0104 	bicge.w	r1, r1, #4
 800309e:	6021      	strge	r1, [r4, #0]
 80030a0:	b90e      	cbnz	r6, 80030a6 <_printf_i+0x11a>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d04d      	beq.n	8003142 <_printf_i+0x1b6>
 80030a6:	4615      	mov	r5, r2
 80030a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80030ac:	fb03 6711 	mls	r7, r3, r1, r6
 80030b0:	5dc7      	ldrb	r7, [r0, r7]
 80030b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030b6:	4637      	mov	r7, r6
 80030b8:	42bb      	cmp	r3, r7
 80030ba:	460e      	mov	r6, r1
 80030bc:	d9f4      	bls.n	80030a8 <_printf_i+0x11c>
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d10b      	bne.n	80030da <_printf_i+0x14e>
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	07de      	lsls	r6, r3, #31
 80030c6:	d508      	bpl.n	80030da <_printf_i+0x14e>
 80030c8:	6923      	ldr	r3, [r4, #16]
 80030ca:	6861      	ldr	r1, [r4, #4]
 80030cc:	4299      	cmp	r1, r3
 80030ce:	bfde      	ittt	le
 80030d0:	2330      	movle	r3, #48	; 0x30
 80030d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030d6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80030da:	1b52      	subs	r2, r2, r5
 80030dc:	6122      	str	r2, [r4, #16]
 80030de:	464b      	mov	r3, r9
 80030e0:	4621      	mov	r1, r4
 80030e2:	4640      	mov	r0, r8
 80030e4:	f8cd a000 	str.w	sl, [sp]
 80030e8:	aa03      	add	r2, sp, #12
 80030ea:	f7ff fedf 	bl	8002eac <_printf_common>
 80030ee:	3001      	adds	r0, #1
 80030f0:	d14c      	bne.n	800318c <_printf_i+0x200>
 80030f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030f6:	b004      	add	sp, #16
 80030f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030fc:	4834      	ldr	r0, [pc, #208]	; (80031d0 <_printf_i+0x244>)
 80030fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003102:	6829      	ldr	r1, [r5, #0]
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	f851 6b04 	ldr.w	r6, [r1], #4
 800310a:	6029      	str	r1, [r5, #0]
 800310c:	061d      	lsls	r5, r3, #24
 800310e:	d514      	bpl.n	800313a <_printf_i+0x1ae>
 8003110:	07df      	lsls	r7, r3, #31
 8003112:	bf44      	itt	mi
 8003114:	f043 0320 	orrmi.w	r3, r3, #32
 8003118:	6023      	strmi	r3, [r4, #0]
 800311a:	b91e      	cbnz	r6, 8003124 <_printf_i+0x198>
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	f023 0320 	bic.w	r3, r3, #32
 8003122:	6023      	str	r3, [r4, #0]
 8003124:	2310      	movs	r3, #16
 8003126:	e7af      	b.n	8003088 <_printf_i+0xfc>
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	f043 0320 	orr.w	r3, r3, #32
 800312e:	6023      	str	r3, [r4, #0]
 8003130:	2378      	movs	r3, #120	; 0x78
 8003132:	4828      	ldr	r0, [pc, #160]	; (80031d4 <_printf_i+0x248>)
 8003134:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003138:	e7e3      	b.n	8003102 <_printf_i+0x176>
 800313a:	0659      	lsls	r1, r3, #25
 800313c:	bf48      	it	mi
 800313e:	b2b6      	uxthmi	r6, r6
 8003140:	e7e6      	b.n	8003110 <_printf_i+0x184>
 8003142:	4615      	mov	r5, r2
 8003144:	e7bb      	b.n	80030be <_printf_i+0x132>
 8003146:	682b      	ldr	r3, [r5, #0]
 8003148:	6826      	ldr	r6, [r4, #0]
 800314a:	1d18      	adds	r0, r3, #4
 800314c:	6961      	ldr	r1, [r4, #20]
 800314e:	6028      	str	r0, [r5, #0]
 8003150:	0635      	lsls	r5, r6, #24
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	d501      	bpl.n	800315a <_printf_i+0x1ce>
 8003156:	6019      	str	r1, [r3, #0]
 8003158:	e002      	b.n	8003160 <_printf_i+0x1d4>
 800315a:	0670      	lsls	r0, r6, #25
 800315c:	d5fb      	bpl.n	8003156 <_printf_i+0x1ca>
 800315e:	8019      	strh	r1, [r3, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	4615      	mov	r5, r2
 8003164:	6123      	str	r3, [r4, #16]
 8003166:	e7ba      	b.n	80030de <_printf_i+0x152>
 8003168:	682b      	ldr	r3, [r5, #0]
 800316a:	2100      	movs	r1, #0
 800316c:	1d1a      	adds	r2, r3, #4
 800316e:	602a      	str	r2, [r5, #0]
 8003170:	681d      	ldr	r5, [r3, #0]
 8003172:	6862      	ldr	r2, [r4, #4]
 8003174:	4628      	mov	r0, r5
 8003176:	f000 fc5d 	bl	8003a34 <memchr>
 800317a:	b108      	cbz	r0, 8003180 <_printf_i+0x1f4>
 800317c:	1b40      	subs	r0, r0, r5
 800317e:	6060      	str	r0, [r4, #4]
 8003180:	6863      	ldr	r3, [r4, #4]
 8003182:	6123      	str	r3, [r4, #16]
 8003184:	2300      	movs	r3, #0
 8003186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800318a:	e7a8      	b.n	80030de <_printf_i+0x152>
 800318c:	462a      	mov	r2, r5
 800318e:	4649      	mov	r1, r9
 8003190:	4640      	mov	r0, r8
 8003192:	6923      	ldr	r3, [r4, #16]
 8003194:	47d0      	blx	sl
 8003196:	3001      	adds	r0, #1
 8003198:	d0ab      	beq.n	80030f2 <_printf_i+0x166>
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	079b      	lsls	r3, r3, #30
 800319e:	d413      	bmi.n	80031c8 <_printf_i+0x23c>
 80031a0:	68e0      	ldr	r0, [r4, #12]
 80031a2:	9b03      	ldr	r3, [sp, #12]
 80031a4:	4298      	cmp	r0, r3
 80031a6:	bfb8      	it	lt
 80031a8:	4618      	movlt	r0, r3
 80031aa:	e7a4      	b.n	80030f6 <_printf_i+0x16a>
 80031ac:	2301      	movs	r3, #1
 80031ae:	4632      	mov	r2, r6
 80031b0:	4649      	mov	r1, r9
 80031b2:	4640      	mov	r0, r8
 80031b4:	47d0      	blx	sl
 80031b6:	3001      	adds	r0, #1
 80031b8:	d09b      	beq.n	80030f2 <_printf_i+0x166>
 80031ba:	3501      	adds	r5, #1
 80031bc:	68e3      	ldr	r3, [r4, #12]
 80031be:	9903      	ldr	r1, [sp, #12]
 80031c0:	1a5b      	subs	r3, r3, r1
 80031c2:	42ab      	cmp	r3, r5
 80031c4:	dcf2      	bgt.n	80031ac <_printf_i+0x220>
 80031c6:	e7eb      	b.n	80031a0 <_printf_i+0x214>
 80031c8:	2500      	movs	r5, #0
 80031ca:	f104 0619 	add.w	r6, r4, #25
 80031ce:	e7f5      	b.n	80031bc <_printf_i+0x230>
 80031d0:	080042dd 	.word	0x080042dd
 80031d4:	080042ee 	.word	0x080042ee

080031d8 <iprintf>:
 80031d8:	b40f      	push	{r0, r1, r2, r3}
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <iprintf+0x2c>)
 80031dc:	b513      	push	{r0, r1, r4, lr}
 80031de:	681c      	ldr	r4, [r3, #0]
 80031e0:	b124      	cbz	r4, 80031ec <iprintf+0x14>
 80031e2:	69a3      	ldr	r3, [r4, #24]
 80031e4:	b913      	cbnz	r3, 80031ec <iprintf+0x14>
 80031e6:	4620      	mov	r0, r4
 80031e8:	f000 fb16 	bl	8003818 <__sinit>
 80031ec:	ab05      	add	r3, sp, #20
 80031ee:	4620      	mov	r0, r4
 80031f0:	9a04      	ldr	r2, [sp, #16]
 80031f2:	68a1      	ldr	r1, [r4, #8]
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	f7ff fd29 	bl	8002c4c <_vfiprintf_r>
 80031fa:	b002      	add	sp, #8
 80031fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003200:	b004      	add	sp, #16
 8003202:	4770      	bx	lr
 8003204:	2000000c 	.word	0x2000000c

08003208 <sniprintf>:
 8003208:	b40c      	push	{r2, r3}
 800320a:	b530      	push	{r4, r5, lr}
 800320c:	4b17      	ldr	r3, [pc, #92]	; (800326c <sniprintf+0x64>)
 800320e:	1e0c      	subs	r4, r1, #0
 8003210:	681d      	ldr	r5, [r3, #0]
 8003212:	b09d      	sub	sp, #116	; 0x74
 8003214:	da08      	bge.n	8003228 <sniprintf+0x20>
 8003216:	238b      	movs	r3, #139	; 0x8b
 8003218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800321c:	602b      	str	r3, [r5, #0]
 800321e:	b01d      	add	sp, #116	; 0x74
 8003220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003224:	b002      	add	sp, #8
 8003226:	4770      	bx	lr
 8003228:	f44f 7302 	mov.w	r3, #520	; 0x208
 800322c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003230:	bf0c      	ite	eq
 8003232:	4623      	moveq	r3, r4
 8003234:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003238:	9304      	str	r3, [sp, #16]
 800323a:	9307      	str	r3, [sp, #28]
 800323c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003240:	9002      	str	r0, [sp, #8]
 8003242:	9006      	str	r0, [sp, #24]
 8003244:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003248:	4628      	mov	r0, r5
 800324a:	ab21      	add	r3, sp, #132	; 0x84
 800324c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800324e:	a902      	add	r1, sp, #8
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	f000 fd8b 	bl	8003d6c <_svfiprintf_r>
 8003256:	1c43      	adds	r3, r0, #1
 8003258:	bfbc      	itt	lt
 800325a:	238b      	movlt	r3, #139	; 0x8b
 800325c:	602b      	strlt	r3, [r5, #0]
 800325e:	2c00      	cmp	r4, #0
 8003260:	d0dd      	beq.n	800321e <sniprintf+0x16>
 8003262:	2200      	movs	r2, #0
 8003264:	9b02      	ldr	r3, [sp, #8]
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e7d9      	b.n	800321e <sniprintf+0x16>
 800326a:	bf00      	nop
 800326c:	2000000c 	.word	0x2000000c

08003270 <strncmp>:
 8003270:	4603      	mov	r3, r0
 8003272:	b510      	push	{r4, lr}
 8003274:	b172      	cbz	r2, 8003294 <strncmp+0x24>
 8003276:	3901      	subs	r1, #1
 8003278:	1884      	adds	r4, r0, r2
 800327a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800327e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003282:	4290      	cmp	r0, r2
 8003284:	d101      	bne.n	800328a <strncmp+0x1a>
 8003286:	42a3      	cmp	r3, r4
 8003288:	d101      	bne.n	800328e <strncmp+0x1e>
 800328a:	1a80      	subs	r0, r0, r2
 800328c:	bd10      	pop	{r4, pc}
 800328e:	2800      	cmp	r0, #0
 8003290:	d1f3      	bne.n	800327a <strncmp+0xa>
 8003292:	e7fa      	b.n	800328a <strncmp+0x1a>
 8003294:	4610      	mov	r0, r2
 8003296:	e7f9      	b.n	800328c <strncmp+0x1c>

08003298 <strtok>:
 8003298:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <strtok+0x5c>)
 800329a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800329e:	681f      	ldr	r7, [r3, #0]
 80032a0:	4605      	mov	r5, r0
 80032a2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80032a4:	460e      	mov	r6, r1
 80032a6:	b9ec      	cbnz	r4, 80032e4 <strtok+0x4c>
 80032a8:	2050      	movs	r0, #80	; 0x50
 80032aa:	f000 fbbb 	bl	8003a24 <malloc>
 80032ae:	4602      	mov	r2, r0
 80032b0:	65b8      	str	r0, [r7, #88]	; 0x58
 80032b2:	b920      	cbnz	r0, 80032be <strtok+0x26>
 80032b4:	2157      	movs	r1, #87	; 0x57
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <strtok+0x60>)
 80032b8:	4810      	ldr	r0, [pc, #64]	; (80032fc <strtok+0x64>)
 80032ba:	f7ff fc39 	bl	8002b30 <__assert_func>
 80032be:	e9c0 4400 	strd	r4, r4, [r0]
 80032c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80032c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80032ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80032ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80032d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80032d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80032da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80032de:	6184      	str	r4, [r0, #24]
 80032e0:	7704      	strb	r4, [r0, #28]
 80032e2:	6244      	str	r4, [r0, #36]	; 0x24
 80032e4:	4631      	mov	r1, r6
 80032e6:	4628      	mov	r0, r5
 80032e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032ea:	2301      	movs	r3, #1
 80032ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032f0:	f000 b806 	b.w	8003300 <__strtok_r>
 80032f4:	2000000c 	.word	0x2000000c
 80032f8:	080042ff 	.word	0x080042ff
 80032fc:	08004316 	.word	0x08004316

08003300 <__strtok_r>:
 8003300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003302:	b908      	cbnz	r0, 8003308 <__strtok_r+0x8>
 8003304:	6810      	ldr	r0, [r2, #0]
 8003306:	b188      	cbz	r0, 800332c <__strtok_r+0x2c>
 8003308:	4604      	mov	r4, r0
 800330a:	460f      	mov	r7, r1
 800330c:	4620      	mov	r0, r4
 800330e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003312:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003316:	b91e      	cbnz	r6, 8003320 <__strtok_r+0x20>
 8003318:	b965      	cbnz	r5, 8003334 <__strtok_r+0x34>
 800331a:	4628      	mov	r0, r5
 800331c:	6015      	str	r5, [r2, #0]
 800331e:	e005      	b.n	800332c <__strtok_r+0x2c>
 8003320:	42b5      	cmp	r5, r6
 8003322:	d1f6      	bne.n	8003312 <__strtok_r+0x12>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <__strtok_r+0xa>
 8003328:	6014      	str	r4, [r2, #0]
 800332a:	7003      	strb	r3, [r0, #0]
 800332c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800332e:	461c      	mov	r4, r3
 8003330:	e00c      	b.n	800334c <__strtok_r+0x4c>
 8003332:	b915      	cbnz	r5, 800333a <__strtok_r+0x3a>
 8003334:	460e      	mov	r6, r1
 8003336:	f814 3b01 	ldrb.w	r3, [r4], #1
 800333a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800333e:	42ab      	cmp	r3, r5
 8003340:	d1f7      	bne.n	8003332 <__strtok_r+0x32>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f3      	beq.n	800332e <__strtok_r+0x2e>
 8003346:	2300      	movs	r3, #0
 8003348:	f804 3c01 	strb.w	r3, [r4, #-1]
 800334c:	6014      	str	r4, [r2, #0]
 800334e:	e7ed      	b.n	800332c <__strtok_r+0x2c>

08003350 <_strtol_l.constprop.0>:
 8003350:	2b01      	cmp	r3, #1
 8003352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003356:	4680      	mov	r8, r0
 8003358:	d001      	beq.n	800335e <_strtol_l.constprop.0+0xe>
 800335a:	2b24      	cmp	r3, #36	; 0x24
 800335c:	d906      	bls.n	800336c <_strtol_l.constprop.0+0x1c>
 800335e:	f7ff fc09 	bl	8002b74 <__errno>
 8003362:	2316      	movs	r3, #22
 8003364:	6003      	str	r3, [r0, #0]
 8003366:	2000      	movs	r0, #0
 8003368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800336c:	460d      	mov	r5, r1
 800336e:	4f35      	ldr	r7, [pc, #212]	; (8003444 <_strtol_l.constprop.0+0xf4>)
 8003370:	4628      	mov	r0, r5
 8003372:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003376:	5de6      	ldrb	r6, [r4, r7]
 8003378:	f016 0608 	ands.w	r6, r6, #8
 800337c:	d1f8      	bne.n	8003370 <_strtol_l.constprop.0+0x20>
 800337e:	2c2d      	cmp	r4, #45	; 0x2d
 8003380:	d12f      	bne.n	80033e2 <_strtol_l.constprop.0+0x92>
 8003382:	2601      	movs	r6, #1
 8003384:	782c      	ldrb	r4, [r5, #0]
 8003386:	1c85      	adds	r5, r0, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d057      	beq.n	800343c <_strtol_l.constprop.0+0xec>
 800338c:	2b10      	cmp	r3, #16
 800338e:	d109      	bne.n	80033a4 <_strtol_l.constprop.0+0x54>
 8003390:	2c30      	cmp	r4, #48	; 0x30
 8003392:	d107      	bne.n	80033a4 <_strtol_l.constprop.0+0x54>
 8003394:	7828      	ldrb	r0, [r5, #0]
 8003396:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800339a:	2858      	cmp	r0, #88	; 0x58
 800339c:	d149      	bne.n	8003432 <_strtol_l.constprop.0+0xe2>
 800339e:	2310      	movs	r3, #16
 80033a0:	786c      	ldrb	r4, [r5, #1]
 80033a2:	3502      	adds	r5, #2
 80033a4:	2700      	movs	r7, #0
 80033a6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80033aa:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80033ae:	fbbe f9f3 	udiv	r9, lr, r3
 80033b2:	4638      	mov	r0, r7
 80033b4:	fb03 ea19 	mls	sl, r3, r9, lr
 80033b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80033bc:	f1bc 0f09 	cmp.w	ip, #9
 80033c0:	d814      	bhi.n	80033ec <_strtol_l.constprop.0+0x9c>
 80033c2:	4664      	mov	r4, ip
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	dd22      	ble.n	800340e <_strtol_l.constprop.0+0xbe>
 80033c8:	2f00      	cmp	r7, #0
 80033ca:	db1d      	blt.n	8003408 <_strtol_l.constprop.0+0xb8>
 80033cc:	4581      	cmp	r9, r0
 80033ce:	d31b      	bcc.n	8003408 <_strtol_l.constprop.0+0xb8>
 80033d0:	d101      	bne.n	80033d6 <_strtol_l.constprop.0+0x86>
 80033d2:	45a2      	cmp	sl, r4
 80033d4:	db18      	blt.n	8003408 <_strtol_l.constprop.0+0xb8>
 80033d6:	2701      	movs	r7, #1
 80033d8:	fb00 4003 	mla	r0, r0, r3, r4
 80033dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80033e0:	e7ea      	b.n	80033b8 <_strtol_l.constprop.0+0x68>
 80033e2:	2c2b      	cmp	r4, #43	; 0x2b
 80033e4:	bf04      	itt	eq
 80033e6:	782c      	ldrbeq	r4, [r5, #0]
 80033e8:	1c85      	addeq	r5, r0, #2
 80033ea:	e7cd      	b.n	8003388 <_strtol_l.constprop.0+0x38>
 80033ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80033f0:	f1bc 0f19 	cmp.w	ip, #25
 80033f4:	d801      	bhi.n	80033fa <_strtol_l.constprop.0+0xaa>
 80033f6:	3c37      	subs	r4, #55	; 0x37
 80033f8:	e7e4      	b.n	80033c4 <_strtol_l.constprop.0+0x74>
 80033fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80033fe:	f1bc 0f19 	cmp.w	ip, #25
 8003402:	d804      	bhi.n	800340e <_strtol_l.constprop.0+0xbe>
 8003404:	3c57      	subs	r4, #87	; 0x57
 8003406:	e7dd      	b.n	80033c4 <_strtol_l.constprop.0+0x74>
 8003408:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800340c:	e7e6      	b.n	80033dc <_strtol_l.constprop.0+0x8c>
 800340e:	2f00      	cmp	r7, #0
 8003410:	da07      	bge.n	8003422 <_strtol_l.constprop.0+0xd2>
 8003412:	2322      	movs	r3, #34	; 0x22
 8003414:	4670      	mov	r0, lr
 8003416:	f8c8 3000 	str.w	r3, [r8]
 800341a:	2a00      	cmp	r2, #0
 800341c:	d0a4      	beq.n	8003368 <_strtol_l.constprop.0+0x18>
 800341e:	1e69      	subs	r1, r5, #1
 8003420:	e005      	b.n	800342e <_strtol_l.constprop.0+0xde>
 8003422:	b106      	cbz	r6, 8003426 <_strtol_l.constprop.0+0xd6>
 8003424:	4240      	negs	r0, r0
 8003426:	2a00      	cmp	r2, #0
 8003428:	d09e      	beq.n	8003368 <_strtol_l.constprop.0+0x18>
 800342a:	2f00      	cmp	r7, #0
 800342c:	d1f7      	bne.n	800341e <_strtol_l.constprop.0+0xce>
 800342e:	6011      	str	r1, [r2, #0]
 8003430:	e79a      	b.n	8003368 <_strtol_l.constprop.0+0x18>
 8003432:	2430      	movs	r4, #48	; 0x30
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1b5      	bne.n	80033a4 <_strtol_l.constprop.0+0x54>
 8003438:	2308      	movs	r3, #8
 800343a:	e7b3      	b.n	80033a4 <_strtol_l.constprop.0+0x54>
 800343c:	2c30      	cmp	r4, #48	; 0x30
 800343e:	d0a9      	beq.n	8003394 <_strtol_l.constprop.0+0x44>
 8003440:	230a      	movs	r3, #10
 8003442:	e7af      	b.n	80033a4 <_strtol_l.constprop.0+0x54>
 8003444:	08004374 	.word	0x08004374

08003448 <strtol>:
 8003448:	4613      	mov	r3, r2
 800344a:	460a      	mov	r2, r1
 800344c:	4601      	mov	r1, r0
 800344e:	4802      	ldr	r0, [pc, #8]	; (8003458 <strtol+0x10>)
 8003450:	6800      	ldr	r0, [r0, #0]
 8003452:	f7ff bf7d 	b.w	8003350 <_strtol_l.constprop.0>
 8003456:	bf00      	nop
 8003458:	2000000c 	.word	0x2000000c

0800345c <__swbuf_r>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	460e      	mov	r6, r1
 8003460:	4614      	mov	r4, r2
 8003462:	4605      	mov	r5, r0
 8003464:	b118      	cbz	r0, 800346e <__swbuf_r+0x12>
 8003466:	6983      	ldr	r3, [r0, #24]
 8003468:	b90b      	cbnz	r3, 800346e <__swbuf_r+0x12>
 800346a:	f000 f9d5 	bl	8003818 <__sinit>
 800346e:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <__swbuf_r+0x98>)
 8003470:	429c      	cmp	r4, r3
 8003472:	d12b      	bne.n	80034cc <__swbuf_r+0x70>
 8003474:	686c      	ldr	r4, [r5, #4]
 8003476:	69a3      	ldr	r3, [r4, #24]
 8003478:	60a3      	str	r3, [r4, #8]
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	071a      	lsls	r2, r3, #28
 800347e:	d52f      	bpl.n	80034e0 <__swbuf_r+0x84>
 8003480:	6923      	ldr	r3, [r4, #16]
 8003482:	b36b      	cbz	r3, 80034e0 <__swbuf_r+0x84>
 8003484:	6923      	ldr	r3, [r4, #16]
 8003486:	6820      	ldr	r0, [r4, #0]
 8003488:	b2f6      	uxtb	r6, r6
 800348a:	1ac0      	subs	r0, r0, r3
 800348c:	6963      	ldr	r3, [r4, #20]
 800348e:	4637      	mov	r7, r6
 8003490:	4283      	cmp	r3, r0
 8003492:	dc04      	bgt.n	800349e <__swbuf_r+0x42>
 8003494:	4621      	mov	r1, r4
 8003496:	4628      	mov	r0, r5
 8003498:	f000 f92a 	bl	80036f0 <_fflush_r>
 800349c:	bb30      	cbnz	r0, 80034ec <__swbuf_r+0x90>
 800349e:	68a3      	ldr	r3, [r4, #8]
 80034a0:	3001      	adds	r0, #1
 80034a2:	3b01      	subs	r3, #1
 80034a4:	60a3      	str	r3, [r4, #8]
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	6022      	str	r2, [r4, #0]
 80034ac:	701e      	strb	r6, [r3, #0]
 80034ae:	6963      	ldr	r3, [r4, #20]
 80034b0:	4283      	cmp	r3, r0
 80034b2:	d004      	beq.n	80034be <__swbuf_r+0x62>
 80034b4:	89a3      	ldrh	r3, [r4, #12]
 80034b6:	07db      	lsls	r3, r3, #31
 80034b8:	d506      	bpl.n	80034c8 <__swbuf_r+0x6c>
 80034ba:	2e0a      	cmp	r6, #10
 80034bc:	d104      	bne.n	80034c8 <__swbuf_r+0x6c>
 80034be:	4621      	mov	r1, r4
 80034c0:	4628      	mov	r0, r5
 80034c2:	f000 f915 	bl	80036f0 <_fflush_r>
 80034c6:	b988      	cbnz	r0, 80034ec <__swbuf_r+0x90>
 80034c8:	4638      	mov	r0, r7
 80034ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <__swbuf_r+0x9c>)
 80034ce:	429c      	cmp	r4, r3
 80034d0:	d101      	bne.n	80034d6 <__swbuf_r+0x7a>
 80034d2:	68ac      	ldr	r4, [r5, #8]
 80034d4:	e7cf      	b.n	8003476 <__swbuf_r+0x1a>
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <__swbuf_r+0xa0>)
 80034d8:	429c      	cmp	r4, r3
 80034da:	bf08      	it	eq
 80034dc:	68ec      	ldreq	r4, [r5, #12]
 80034de:	e7ca      	b.n	8003476 <__swbuf_r+0x1a>
 80034e0:	4621      	mov	r1, r4
 80034e2:	4628      	mov	r0, r5
 80034e4:	f000 f80c 	bl	8003500 <__swsetup_r>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d0cb      	beq.n	8003484 <__swbuf_r+0x28>
 80034ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80034f0:	e7ea      	b.n	80034c8 <__swbuf_r+0x6c>
 80034f2:	bf00      	nop
 80034f4:	08004494 	.word	0x08004494
 80034f8:	080044b4 	.word	0x080044b4
 80034fc:	08004474 	.word	0x08004474

08003500 <__swsetup_r>:
 8003500:	4b32      	ldr	r3, [pc, #200]	; (80035cc <__swsetup_r+0xcc>)
 8003502:	b570      	push	{r4, r5, r6, lr}
 8003504:	681d      	ldr	r5, [r3, #0]
 8003506:	4606      	mov	r6, r0
 8003508:	460c      	mov	r4, r1
 800350a:	b125      	cbz	r5, 8003516 <__swsetup_r+0x16>
 800350c:	69ab      	ldr	r3, [r5, #24]
 800350e:	b913      	cbnz	r3, 8003516 <__swsetup_r+0x16>
 8003510:	4628      	mov	r0, r5
 8003512:	f000 f981 	bl	8003818 <__sinit>
 8003516:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <__swsetup_r+0xd0>)
 8003518:	429c      	cmp	r4, r3
 800351a:	d10f      	bne.n	800353c <__swsetup_r+0x3c>
 800351c:	686c      	ldr	r4, [r5, #4]
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003524:	0719      	lsls	r1, r3, #28
 8003526:	d42c      	bmi.n	8003582 <__swsetup_r+0x82>
 8003528:	06dd      	lsls	r5, r3, #27
 800352a:	d411      	bmi.n	8003550 <__swsetup_r+0x50>
 800352c:	2309      	movs	r3, #9
 800352e:	6033      	str	r3, [r6, #0]
 8003530:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003538:	81a3      	strh	r3, [r4, #12]
 800353a:	e03e      	b.n	80035ba <__swsetup_r+0xba>
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <__swsetup_r+0xd4>)
 800353e:	429c      	cmp	r4, r3
 8003540:	d101      	bne.n	8003546 <__swsetup_r+0x46>
 8003542:	68ac      	ldr	r4, [r5, #8]
 8003544:	e7eb      	b.n	800351e <__swsetup_r+0x1e>
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <__swsetup_r+0xd8>)
 8003548:	429c      	cmp	r4, r3
 800354a:	bf08      	it	eq
 800354c:	68ec      	ldreq	r4, [r5, #12]
 800354e:	e7e6      	b.n	800351e <__swsetup_r+0x1e>
 8003550:	0758      	lsls	r0, r3, #29
 8003552:	d512      	bpl.n	800357a <__swsetup_r+0x7a>
 8003554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003556:	b141      	cbz	r1, 800356a <__swsetup_r+0x6a>
 8003558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800355c:	4299      	cmp	r1, r3
 800355e:	d002      	beq.n	8003566 <__swsetup_r+0x66>
 8003560:	4630      	mov	r0, r6
 8003562:	f000 fa9d 	bl	8003aa0 <_free_r>
 8003566:	2300      	movs	r3, #0
 8003568:	6363      	str	r3, [r4, #52]	; 0x34
 800356a:	89a3      	ldrh	r3, [r4, #12]
 800356c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003570:	81a3      	strh	r3, [r4, #12]
 8003572:	2300      	movs	r3, #0
 8003574:	6063      	str	r3, [r4, #4]
 8003576:	6923      	ldr	r3, [r4, #16]
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	89a3      	ldrh	r3, [r4, #12]
 800357c:	f043 0308 	orr.w	r3, r3, #8
 8003580:	81a3      	strh	r3, [r4, #12]
 8003582:	6923      	ldr	r3, [r4, #16]
 8003584:	b94b      	cbnz	r3, 800359a <__swsetup_r+0x9a>
 8003586:	89a3      	ldrh	r3, [r4, #12]
 8003588:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800358c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003590:	d003      	beq.n	800359a <__swsetup_r+0x9a>
 8003592:	4621      	mov	r1, r4
 8003594:	4630      	mov	r0, r6
 8003596:	f000 fa05 	bl	80039a4 <__smakebuf_r>
 800359a:	89a0      	ldrh	r0, [r4, #12]
 800359c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035a0:	f010 0301 	ands.w	r3, r0, #1
 80035a4:	d00a      	beq.n	80035bc <__swsetup_r+0xbc>
 80035a6:	2300      	movs	r3, #0
 80035a8:	60a3      	str	r3, [r4, #8]
 80035aa:	6963      	ldr	r3, [r4, #20]
 80035ac:	425b      	negs	r3, r3
 80035ae:	61a3      	str	r3, [r4, #24]
 80035b0:	6923      	ldr	r3, [r4, #16]
 80035b2:	b943      	cbnz	r3, 80035c6 <__swsetup_r+0xc6>
 80035b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80035b8:	d1ba      	bne.n	8003530 <__swsetup_r+0x30>
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
 80035bc:	0781      	lsls	r1, r0, #30
 80035be:	bf58      	it	pl
 80035c0:	6963      	ldrpl	r3, [r4, #20]
 80035c2:	60a3      	str	r3, [r4, #8]
 80035c4:	e7f4      	b.n	80035b0 <__swsetup_r+0xb0>
 80035c6:	2000      	movs	r0, #0
 80035c8:	e7f7      	b.n	80035ba <__swsetup_r+0xba>
 80035ca:	bf00      	nop
 80035cc:	2000000c 	.word	0x2000000c
 80035d0:	08004494 	.word	0x08004494
 80035d4:	080044b4 	.word	0x080044b4
 80035d8:	08004474 	.word	0x08004474

080035dc <abort>:
 80035dc:	2006      	movs	r0, #6
 80035de:	b508      	push	{r3, lr}
 80035e0:	f000 fcfc 	bl	8003fdc <raise>
 80035e4:	2001      	movs	r0, #1
 80035e6:	f7fd fa54 	bl	8000a92 <_exit>
	...

080035ec <__sflush_r>:
 80035ec:	898a      	ldrh	r2, [r1, #12]
 80035ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f0:	4605      	mov	r5, r0
 80035f2:	0710      	lsls	r0, r2, #28
 80035f4:	460c      	mov	r4, r1
 80035f6:	d457      	bmi.n	80036a8 <__sflush_r+0xbc>
 80035f8:	684b      	ldr	r3, [r1, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	dc04      	bgt.n	8003608 <__sflush_r+0x1c>
 80035fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003600:	2b00      	cmp	r3, #0
 8003602:	dc01      	bgt.n	8003608 <__sflush_r+0x1c>
 8003604:	2000      	movs	r0, #0
 8003606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800360a:	2e00      	cmp	r6, #0
 800360c:	d0fa      	beq.n	8003604 <__sflush_r+0x18>
 800360e:	2300      	movs	r3, #0
 8003610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003614:	682f      	ldr	r7, [r5, #0]
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	d032      	beq.n	8003680 <__sflush_r+0x94>
 800361a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	075a      	lsls	r2, r3, #29
 8003620:	d505      	bpl.n	800362e <__sflush_r+0x42>
 8003622:	6863      	ldr	r3, [r4, #4]
 8003624:	1ac0      	subs	r0, r0, r3
 8003626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003628:	b10b      	cbz	r3, 800362e <__sflush_r+0x42>
 800362a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800362c:	1ac0      	subs	r0, r0, r3
 800362e:	2300      	movs	r3, #0
 8003630:	4602      	mov	r2, r0
 8003632:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003634:	4628      	mov	r0, r5
 8003636:	6a21      	ldr	r1, [r4, #32]
 8003638:	47b0      	blx	r6
 800363a:	1c43      	adds	r3, r0, #1
 800363c:	89a3      	ldrh	r3, [r4, #12]
 800363e:	d106      	bne.n	800364e <__sflush_r+0x62>
 8003640:	6829      	ldr	r1, [r5, #0]
 8003642:	291d      	cmp	r1, #29
 8003644:	d82c      	bhi.n	80036a0 <__sflush_r+0xb4>
 8003646:	4a29      	ldr	r2, [pc, #164]	; (80036ec <__sflush_r+0x100>)
 8003648:	40ca      	lsrs	r2, r1
 800364a:	07d6      	lsls	r6, r2, #31
 800364c:	d528      	bpl.n	80036a0 <__sflush_r+0xb4>
 800364e:	2200      	movs	r2, #0
 8003650:	6062      	str	r2, [r4, #4]
 8003652:	6922      	ldr	r2, [r4, #16]
 8003654:	04d9      	lsls	r1, r3, #19
 8003656:	6022      	str	r2, [r4, #0]
 8003658:	d504      	bpl.n	8003664 <__sflush_r+0x78>
 800365a:	1c42      	adds	r2, r0, #1
 800365c:	d101      	bne.n	8003662 <__sflush_r+0x76>
 800365e:	682b      	ldr	r3, [r5, #0]
 8003660:	b903      	cbnz	r3, 8003664 <__sflush_r+0x78>
 8003662:	6560      	str	r0, [r4, #84]	; 0x54
 8003664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003666:	602f      	str	r7, [r5, #0]
 8003668:	2900      	cmp	r1, #0
 800366a:	d0cb      	beq.n	8003604 <__sflush_r+0x18>
 800366c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003670:	4299      	cmp	r1, r3
 8003672:	d002      	beq.n	800367a <__sflush_r+0x8e>
 8003674:	4628      	mov	r0, r5
 8003676:	f000 fa13 	bl	8003aa0 <_free_r>
 800367a:	2000      	movs	r0, #0
 800367c:	6360      	str	r0, [r4, #52]	; 0x34
 800367e:	e7c2      	b.n	8003606 <__sflush_r+0x1a>
 8003680:	6a21      	ldr	r1, [r4, #32]
 8003682:	2301      	movs	r3, #1
 8003684:	4628      	mov	r0, r5
 8003686:	47b0      	blx	r6
 8003688:	1c41      	adds	r1, r0, #1
 800368a:	d1c7      	bne.n	800361c <__sflush_r+0x30>
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0c4      	beq.n	800361c <__sflush_r+0x30>
 8003692:	2b1d      	cmp	r3, #29
 8003694:	d001      	beq.n	800369a <__sflush_r+0xae>
 8003696:	2b16      	cmp	r3, #22
 8003698:	d101      	bne.n	800369e <__sflush_r+0xb2>
 800369a:	602f      	str	r7, [r5, #0]
 800369c:	e7b2      	b.n	8003604 <__sflush_r+0x18>
 800369e:	89a3      	ldrh	r3, [r4, #12]
 80036a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a4:	81a3      	strh	r3, [r4, #12]
 80036a6:	e7ae      	b.n	8003606 <__sflush_r+0x1a>
 80036a8:	690f      	ldr	r7, [r1, #16]
 80036aa:	2f00      	cmp	r7, #0
 80036ac:	d0aa      	beq.n	8003604 <__sflush_r+0x18>
 80036ae:	0793      	lsls	r3, r2, #30
 80036b0:	bf18      	it	ne
 80036b2:	2300      	movne	r3, #0
 80036b4:	680e      	ldr	r6, [r1, #0]
 80036b6:	bf08      	it	eq
 80036b8:	694b      	ldreq	r3, [r1, #20]
 80036ba:	1bf6      	subs	r6, r6, r7
 80036bc:	600f      	str	r7, [r1, #0]
 80036be:	608b      	str	r3, [r1, #8]
 80036c0:	2e00      	cmp	r6, #0
 80036c2:	dd9f      	ble.n	8003604 <__sflush_r+0x18>
 80036c4:	4633      	mov	r3, r6
 80036c6:	463a      	mov	r2, r7
 80036c8:	4628      	mov	r0, r5
 80036ca:	6a21      	ldr	r1, [r4, #32]
 80036cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80036d0:	47e0      	blx	ip
 80036d2:	2800      	cmp	r0, #0
 80036d4:	dc06      	bgt.n	80036e4 <__sflush_r+0xf8>
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e0:	81a3      	strh	r3, [r4, #12]
 80036e2:	e790      	b.n	8003606 <__sflush_r+0x1a>
 80036e4:	4407      	add	r7, r0
 80036e6:	1a36      	subs	r6, r6, r0
 80036e8:	e7ea      	b.n	80036c0 <__sflush_r+0xd4>
 80036ea:	bf00      	nop
 80036ec:	20400001 	.word	0x20400001

080036f0 <_fflush_r>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	690b      	ldr	r3, [r1, #16]
 80036f4:	4605      	mov	r5, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	b913      	cbnz	r3, 8003700 <_fflush_r+0x10>
 80036fa:	2500      	movs	r5, #0
 80036fc:	4628      	mov	r0, r5
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
 8003700:	b118      	cbz	r0, 800370a <_fflush_r+0x1a>
 8003702:	6983      	ldr	r3, [r0, #24]
 8003704:	b90b      	cbnz	r3, 800370a <_fflush_r+0x1a>
 8003706:	f000 f887 	bl	8003818 <__sinit>
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <_fflush_r+0x6c>)
 800370c:	429c      	cmp	r4, r3
 800370e:	d11b      	bne.n	8003748 <_fflush_r+0x58>
 8003710:	686c      	ldr	r4, [r5, #4]
 8003712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ef      	beq.n	80036fa <_fflush_r+0xa>
 800371a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800371c:	07d0      	lsls	r0, r2, #31
 800371e:	d404      	bmi.n	800372a <_fflush_r+0x3a>
 8003720:	0599      	lsls	r1, r3, #22
 8003722:	d402      	bmi.n	800372a <_fflush_r+0x3a>
 8003724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003726:	f000 f915 	bl	8003954 <__retarget_lock_acquire_recursive>
 800372a:	4628      	mov	r0, r5
 800372c:	4621      	mov	r1, r4
 800372e:	f7ff ff5d 	bl	80035ec <__sflush_r>
 8003732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003734:	4605      	mov	r5, r0
 8003736:	07da      	lsls	r2, r3, #31
 8003738:	d4e0      	bmi.n	80036fc <_fflush_r+0xc>
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	059b      	lsls	r3, r3, #22
 800373e:	d4dd      	bmi.n	80036fc <_fflush_r+0xc>
 8003740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003742:	f000 f908 	bl	8003956 <__retarget_lock_release_recursive>
 8003746:	e7d9      	b.n	80036fc <_fflush_r+0xc>
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <_fflush_r+0x70>)
 800374a:	429c      	cmp	r4, r3
 800374c:	d101      	bne.n	8003752 <_fflush_r+0x62>
 800374e:	68ac      	ldr	r4, [r5, #8]
 8003750:	e7df      	b.n	8003712 <_fflush_r+0x22>
 8003752:	4b04      	ldr	r3, [pc, #16]	; (8003764 <_fflush_r+0x74>)
 8003754:	429c      	cmp	r4, r3
 8003756:	bf08      	it	eq
 8003758:	68ec      	ldreq	r4, [r5, #12]
 800375a:	e7da      	b.n	8003712 <_fflush_r+0x22>
 800375c:	08004494 	.word	0x08004494
 8003760:	080044b4 	.word	0x080044b4
 8003764:	08004474 	.word	0x08004474

08003768 <std>:
 8003768:	2300      	movs	r3, #0
 800376a:	b510      	push	{r4, lr}
 800376c:	4604      	mov	r4, r0
 800376e:	e9c0 3300 	strd	r3, r3, [r0]
 8003772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003776:	6083      	str	r3, [r0, #8]
 8003778:	8181      	strh	r1, [r0, #12]
 800377a:	6643      	str	r3, [r0, #100]	; 0x64
 800377c:	81c2      	strh	r2, [r0, #14]
 800377e:	6183      	str	r3, [r0, #24]
 8003780:	4619      	mov	r1, r3
 8003782:	2208      	movs	r2, #8
 8003784:	305c      	adds	r0, #92	; 0x5c
 8003786:	f7ff fa31 	bl	8002bec <memset>
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <std+0x38>)
 800378c:	6224      	str	r4, [r4, #32]
 800378e:	6263      	str	r3, [r4, #36]	; 0x24
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <std+0x3c>)
 8003792:	62a3      	str	r3, [r4, #40]	; 0x28
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <std+0x40>)
 8003796:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <std+0x44>)
 800379a:	6323      	str	r3, [r4, #48]	; 0x30
 800379c:	bd10      	pop	{r4, pc}
 800379e:	bf00      	nop
 80037a0:	08004015 	.word	0x08004015
 80037a4:	08004037 	.word	0x08004037
 80037a8:	0800406f 	.word	0x0800406f
 80037ac:	08004093 	.word	0x08004093

080037b0 <_cleanup_r>:
 80037b0:	4901      	ldr	r1, [pc, #4]	; (80037b8 <_cleanup_r+0x8>)
 80037b2:	f000 b8af 	b.w	8003914 <_fwalk_reent>
 80037b6:	bf00      	nop
 80037b8:	080036f1 	.word	0x080036f1

080037bc <__sfmoreglue>:
 80037bc:	2268      	movs	r2, #104	; 0x68
 80037be:	b570      	push	{r4, r5, r6, lr}
 80037c0:	1e4d      	subs	r5, r1, #1
 80037c2:	4355      	muls	r5, r2
 80037c4:	460e      	mov	r6, r1
 80037c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037ca:	f000 f9d1 	bl	8003b70 <_malloc_r>
 80037ce:	4604      	mov	r4, r0
 80037d0:	b140      	cbz	r0, 80037e4 <__sfmoreglue+0x28>
 80037d2:	2100      	movs	r1, #0
 80037d4:	e9c0 1600 	strd	r1, r6, [r0]
 80037d8:	300c      	adds	r0, #12
 80037da:	60a0      	str	r0, [r4, #8]
 80037dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037e0:	f7ff fa04 	bl	8002bec <memset>
 80037e4:	4620      	mov	r0, r4
 80037e6:	bd70      	pop	{r4, r5, r6, pc}

080037e8 <__sfp_lock_acquire>:
 80037e8:	4801      	ldr	r0, [pc, #4]	; (80037f0 <__sfp_lock_acquire+0x8>)
 80037ea:	f000 b8b3 	b.w	8003954 <__retarget_lock_acquire_recursive>
 80037ee:	bf00      	nop
 80037f0:	20000451 	.word	0x20000451

080037f4 <__sfp_lock_release>:
 80037f4:	4801      	ldr	r0, [pc, #4]	; (80037fc <__sfp_lock_release+0x8>)
 80037f6:	f000 b8ae 	b.w	8003956 <__retarget_lock_release_recursive>
 80037fa:	bf00      	nop
 80037fc:	20000451 	.word	0x20000451

08003800 <__sinit_lock_acquire>:
 8003800:	4801      	ldr	r0, [pc, #4]	; (8003808 <__sinit_lock_acquire+0x8>)
 8003802:	f000 b8a7 	b.w	8003954 <__retarget_lock_acquire_recursive>
 8003806:	bf00      	nop
 8003808:	20000452 	.word	0x20000452

0800380c <__sinit_lock_release>:
 800380c:	4801      	ldr	r0, [pc, #4]	; (8003814 <__sinit_lock_release+0x8>)
 800380e:	f000 b8a2 	b.w	8003956 <__retarget_lock_release_recursive>
 8003812:	bf00      	nop
 8003814:	20000452 	.word	0x20000452

08003818 <__sinit>:
 8003818:	b510      	push	{r4, lr}
 800381a:	4604      	mov	r4, r0
 800381c:	f7ff fff0 	bl	8003800 <__sinit_lock_acquire>
 8003820:	69a3      	ldr	r3, [r4, #24]
 8003822:	b11b      	cbz	r3, 800382c <__sinit+0x14>
 8003824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003828:	f7ff bff0 	b.w	800380c <__sinit_lock_release>
 800382c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003830:	6523      	str	r3, [r4, #80]	; 0x50
 8003832:	4b13      	ldr	r3, [pc, #76]	; (8003880 <__sinit+0x68>)
 8003834:	4a13      	ldr	r2, [pc, #76]	; (8003884 <__sinit+0x6c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	62a2      	str	r2, [r4, #40]	; 0x28
 800383a:	42a3      	cmp	r3, r4
 800383c:	bf08      	it	eq
 800383e:	2301      	moveq	r3, #1
 8003840:	4620      	mov	r0, r4
 8003842:	bf08      	it	eq
 8003844:	61a3      	streq	r3, [r4, #24]
 8003846:	f000 f81f 	bl	8003888 <__sfp>
 800384a:	6060      	str	r0, [r4, #4]
 800384c:	4620      	mov	r0, r4
 800384e:	f000 f81b 	bl	8003888 <__sfp>
 8003852:	60a0      	str	r0, [r4, #8]
 8003854:	4620      	mov	r0, r4
 8003856:	f000 f817 	bl	8003888 <__sfp>
 800385a:	2200      	movs	r2, #0
 800385c:	2104      	movs	r1, #4
 800385e:	60e0      	str	r0, [r4, #12]
 8003860:	6860      	ldr	r0, [r4, #4]
 8003862:	f7ff ff81 	bl	8003768 <std>
 8003866:	2201      	movs	r2, #1
 8003868:	2109      	movs	r1, #9
 800386a:	68a0      	ldr	r0, [r4, #8]
 800386c:	f7ff ff7c 	bl	8003768 <std>
 8003870:	2202      	movs	r2, #2
 8003872:	2112      	movs	r1, #18
 8003874:	68e0      	ldr	r0, [r4, #12]
 8003876:	f7ff ff77 	bl	8003768 <std>
 800387a:	2301      	movs	r3, #1
 800387c:	61a3      	str	r3, [r4, #24]
 800387e:	e7d1      	b.n	8003824 <__sinit+0xc>
 8003880:	080042c8 	.word	0x080042c8
 8003884:	080037b1 	.word	0x080037b1

08003888 <__sfp>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	4607      	mov	r7, r0
 800388c:	f7ff ffac 	bl	80037e8 <__sfp_lock_acquire>
 8003890:	4b1e      	ldr	r3, [pc, #120]	; (800390c <__sfp+0x84>)
 8003892:	681e      	ldr	r6, [r3, #0]
 8003894:	69b3      	ldr	r3, [r6, #24]
 8003896:	b913      	cbnz	r3, 800389e <__sfp+0x16>
 8003898:	4630      	mov	r0, r6
 800389a:	f7ff ffbd 	bl	8003818 <__sinit>
 800389e:	3648      	adds	r6, #72	; 0x48
 80038a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	d503      	bpl.n	80038b0 <__sfp+0x28>
 80038a8:	6833      	ldr	r3, [r6, #0]
 80038aa:	b30b      	cbz	r3, 80038f0 <__sfp+0x68>
 80038ac:	6836      	ldr	r6, [r6, #0]
 80038ae:	e7f7      	b.n	80038a0 <__sfp+0x18>
 80038b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038b4:	b9d5      	cbnz	r5, 80038ec <__sfp+0x64>
 80038b6:	4b16      	ldr	r3, [pc, #88]	; (8003910 <__sfp+0x88>)
 80038b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038bc:	60e3      	str	r3, [r4, #12]
 80038be:	6665      	str	r5, [r4, #100]	; 0x64
 80038c0:	f000 f847 	bl	8003952 <__retarget_lock_init_recursive>
 80038c4:	f7ff ff96 	bl	80037f4 <__sfp_lock_release>
 80038c8:	2208      	movs	r2, #8
 80038ca:	4629      	mov	r1, r5
 80038cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80038d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80038d4:	6025      	str	r5, [r4, #0]
 80038d6:	61a5      	str	r5, [r4, #24]
 80038d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038dc:	f7ff f986 	bl	8002bec <memset>
 80038e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038e8:	4620      	mov	r0, r4
 80038ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ec:	3468      	adds	r4, #104	; 0x68
 80038ee:	e7d9      	b.n	80038a4 <__sfp+0x1c>
 80038f0:	2104      	movs	r1, #4
 80038f2:	4638      	mov	r0, r7
 80038f4:	f7ff ff62 	bl	80037bc <__sfmoreglue>
 80038f8:	4604      	mov	r4, r0
 80038fa:	6030      	str	r0, [r6, #0]
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d1d5      	bne.n	80038ac <__sfp+0x24>
 8003900:	f7ff ff78 	bl	80037f4 <__sfp_lock_release>
 8003904:	230c      	movs	r3, #12
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	e7ee      	b.n	80038e8 <__sfp+0x60>
 800390a:	bf00      	nop
 800390c:	080042c8 	.word	0x080042c8
 8003910:	ffff0001 	.word	0xffff0001

08003914 <_fwalk_reent>:
 8003914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003918:	4606      	mov	r6, r0
 800391a:	4688      	mov	r8, r1
 800391c:	2700      	movs	r7, #0
 800391e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003922:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003926:	f1b9 0901 	subs.w	r9, r9, #1
 800392a:	d505      	bpl.n	8003938 <_fwalk_reent+0x24>
 800392c:	6824      	ldr	r4, [r4, #0]
 800392e:	2c00      	cmp	r4, #0
 8003930:	d1f7      	bne.n	8003922 <_fwalk_reent+0xe>
 8003932:	4638      	mov	r0, r7
 8003934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003938:	89ab      	ldrh	r3, [r5, #12]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d907      	bls.n	800394e <_fwalk_reent+0x3a>
 800393e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003942:	3301      	adds	r3, #1
 8003944:	d003      	beq.n	800394e <_fwalk_reent+0x3a>
 8003946:	4629      	mov	r1, r5
 8003948:	4630      	mov	r0, r6
 800394a:	47c0      	blx	r8
 800394c:	4307      	orrs	r7, r0
 800394e:	3568      	adds	r5, #104	; 0x68
 8003950:	e7e9      	b.n	8003926 <_fwalk_reent+0x12>

08003952 <__retarget_lock_init_recursive>:
 8003952:	4770      	bx	lr

08003954 <__retarget_lock_acquire_recursive>:
 8003954:	4770      	bx	lr

08003956 <__retarget_lock_release_recursive>:
 8003956:	4770      	bx	lr

08003958 <__swhatbuf_r>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	460e      	mov	r6, r1
 800395c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003960:	4614      	mov	r4, r2
 8003962:	2900      	cmp	r1, #0
 8003964:	461d      	mov	r5, r3
 8003966:	b096      	sub	sp, #88	; 0x58
 8003968:	da08      	bge.n	800397c <__swhatbuf_r+0x24>
 800396a:	2200      	movs	r2, #0
 800396c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003970:	602a      	str	r2, [r5, #0]
 8003972:	061a      	lsls	r2, r3, #24
 8003974:	d410      	bmi.n	8003998 <__swhatbuf_r+0x40>
 8003976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800397a:	e00e      	b.n	800399a <__swhatbuf_r+0x42>
 800397c:	466a      	mov	r2, sp
 800397e:	f000 fbaf 	bl	80040e0 <_fstat_r>
 8003982:	2800      	cmp	r0, #0
 8003984:	dbf1      	blt.n	800396a <__swhatbuf_r+0x12>
 8003986:	9a01      	ldr	r2, [sp, #4]
 8003988:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800398c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003990:	425a      	negs	r2, r3
 8003992:	415a      	adcs	r2, r3
 8003994:	602a      	str	r2, [r5, #0]
 8003996:	e7ee      	b.n	8003976 <__swhatbuf_r+0x1e>
 8003998:	2340      	movs	r3, #64	; 0x40
 800399a:	2000      	movs	r0, #0
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	b016      	add	sp, #88	; 0x58
 80039a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080039a4 <__smakebuf_r>:
 80039a4:	898b      	ldrh	r3, [r1, #12]
 80039a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039a8:	079d      	lsls	r5, r3, #30
 80039aa:	4606      	mov	r6, r0
 80039ac:	460c      	mov	r4, r1
 80039ae:	d507      	bpl.n	80039c0 <__smakebuf_r+0x1c>
 80039b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	6123      	str	r3, [r4, #16]
 80039b8:	2301      	movs	r3, #1
 80039ba:	6163      	str	r3, [r4, #20]
 80039bc:	b002      	add	sp, #8
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	466a      	mov	r2, sp
 80039c2:	ab01      	add	r3, sp, #4
 80039c4:	f7ff ffc8 	bl	8003958 <__swhatbuf_r>
 80039c8:	9900      	ldr	r1, [sp, #0]
 80039ca:	4605      	mov	r5, r0
 80039cc:	4630      	mov	r0, r6
 80039ce:	f000 f8cf 	bl	8003b70 <_malloc_r>
 80039d2:	b948      	cbnz	r0, 80039e8 <__smakebuf_r+0x44>
 80039d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d8:	059a      	lsls	r2, r3, #22
 80039da:	d4ef      	bmi.n	80039bc <__smakebuf_r+0x18>
 80039dc:	f023 0303 	bic.w	r3, r3, #3
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	81a3      	strh	r3, [r4, #12]
 80039e6:	e7e3      	b.n	80039b0 <__smakebuf_r+0xc>
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <__smakebuf_r+0x7c>)
 80039ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	6020      	str	r0, [r4, #0]
 80039f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f4:	81a3      	strh	r3, [r4, #12]
 80039f6:	9b00      	ldr	r3, [sp, #0]
 80039f8:	6120      	str	r0, [r4, #16]
 80039fa:	6163      	str	r3, [r4, #20]
 80039fc:	9b01      	ldr	r3, [sp, #4]
 80039fe:	b15b      	cbz	r3, 8003a18 <__smakebuf_r+0x74>
 8003a00:	4630      	mov	r0, r6
 8003a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a06:	f000 fb7d 	bl	8004104 <_isatty_r>
 8003a0a:	b128      	cbz	r0, 8003a18 <__smakebuf_r+0x74>
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	f023 0303 	bic.w	r3, r3, #3
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	81a3      	strh	r3, [r4, #12]
 8003a18:	89a0      	ldrh	r0, [r4, #12]
 8003a1a:	4305      	orrs	r5, r0
 8003a1c:	81a5      	strh	r5, [r4, #12]
 8003a1e:	e7cd      	b.n	80039bc <__smakebuf_r+0x18>
 8003a20:	080037b1 	.word	0x080037b1

08003a24 <malloc>:
 8003a24:	4b02      	ldr	r3, [pc, #8]	; (8003a30 <malloc+0xc>)
 8003a26:	4601      	mov	r1, r0
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	f000 b8a1 	b.w	8003b70 <_malloc_r>
 8003a2e:	bf00      	nop
 8003a30:	2000000c 	.word	0x2000000c

08003a34 <memchr>:
 8003a34:	4603      	mov	r3, r0
 8003a36:	b510      	push	{r4, lr}
 8003a38:	b2c9      	uxtb	r1, r1
 8003a3a:	4402      	add	r2, r0
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	d101      	bne.n	8003a46 <memchr+0x12>
 8003a42:	2000      	movs	r0, #0
 8003a44:	e003      	b.n	8003a4e <memchr+0x1a>
 8003a46:	7804      	ldrb	r4, [r0, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	428c      	cmp	r4, r1
 8003a4c:	d1f6      	bne.n	8003a3c <memchr+0x8>
 8003a4e:	bd10      	pop	{r4, pc}

08003a50 <memcpy>:
 8003a50:	440a      	add	r2, r1
 8003a52:	4291      	cmp	r1, r2
 8003a54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003a58:	d100      	bne.n	8003a5c <memcpy+0xc>
 8003a5a:	4770      	bx	lr
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a62:	4291      	cmp	r1, r2
 8003a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a68:	d1f9      	bne.n	8003a5e <memcpy+0xe>
 8003a6a:	bd10      	pop	{r4, pc}

08003a6c <memmove>:
 8003a6c:	4288      	cmp	r0, r1
 8003a6e:	b510      	push	{r4, lr}
 8003a70:	eb01 0402 	add.w	r4, r1, r2
 8003a74:	d902      	bls.n	8003a7c <memmove+0x10>
 8003a76:	4284      	cmp	r4, r0
 8003a78:	4623      	mov	r3, r4
 8003a7a:	d807      	bhi.n	8003a8c <memmove+0x20>
 8003a7c:	1e43      	subs	r3, r0, #1
 8003a7e:	42a1      	cmp	r1, r4
 8003a80:	d008      	beq.n	8003a94 <memmove+0x28>
 8003a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a8a:	e7f8      	b.n	8003a7e <memmove+0x12>
 8003a8c:	4601      	mov	r1, r0
 8003a8e:	4402      	add	r2, r0
 8003a90:	428a      	cmp	r2, r1
 8003a92:	d100      	bne.n	8003a96 <memmove+0x2a>
 8003a94:	bd10      	pop	{r4, pc}
 8003a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a9e:	e7f7      	b.n	8003a90 <memmove+0x24>

08003aa0 <_free_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	2900      	cmp	r1, #0
 8003aa6:	d040      	beq.n	8003b2a <_free_r+0x8a>
 8003aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aac:	1f0c      	subs	r4, r1, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bfb8      	it	lt
 8003ab2:	18e4      	addlt	r4, r4, r3
 8003ab4:	f000 fb48 	bl	8004148 <__malloc_lock>
 8003ab8:	4a1c      	ldr	r2, [pc, #112]	; (8003b2c <_free_r+0x8c>)
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	b933      	cbnz	r3, 8003acc <_free_r+0x2c>
 8003abe:	6063      	str	r3, [r4, #4]
 8003ac0:	6014      	str	r4, [r2, #0]
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ac8:	f000 bb44 	b.w	8004154 <__malloc_unlock>
 8003acc:	42a3      	cmp	r3, r4
 8003ace:	d908      	bls.n	8003ae2 <_free_r+0x42>
 8003ad0:	6820      	ldr	r0, [r4, #0]
 8003ad2:	1821      	adds	r1, r4, r0
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	bf01      	itttt	eq
 8003ad8:	6819      	ldreq	r1, [r3, #0]
 8003ada:	685b      	ldreq	r3, [r3, #4]
 8003adc:	1809      	addeq	r1, r1, r0
 8003ade:	6021      	streq	r1, [r4, #0]
 8003ae0:	e7ed      	b.n	8003abe <_free_r+0x1e>
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	b10b      	cbz	r3, 8003aec <_free_r+0x4c>
 8003ae8:	42a3      	cmp	r3, r4
 8003aea:	d9fa      	bls.n	8003ae2 <_free_r+0x42>
 8003aec:	6811      	ldr	r1, [r2, #0]
 8003aee:	1850      	adds	r0, r2, r1
 8003af0:	42a0      	cmp	r0, r4
 8003af2:	d10b      	bne.n	8003b0c <_free_r+0x6c>
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	4401      	add	r1, r0
 8003af8:	1850      	adds	r0, r2, r1
 8003afa:	4283      	cmp	r3, r0
 8003afc:	6011      	str	r1, [r2, #0]
 8003afe:	d1e0      	bne.n	8003ac2 <_free_r+0x22>
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4401      	add	r1, r0
 8003b06:	6011      	str	r1, [r2, #0]
 8003b08:	6053      	str	r3, [r2, #4]
 8003b0a:	e7da      	b.n	8003ac2 <_free_r+0x22>
 8003b0c:	d902      	bls.n	8003b14 <_free_r+0x74>
 8003b0e:	230c      	movs	r3, #12
 8003b10:	602b      	str	r3, [r5, #0]
 8003b12:	e7d6      	b.n	8003ac2 <_free_r+0x22>
 8003b14:	6820      	ldr	r0, [r4, #0]
 8003b16:	1821      	adds	r1, r4, r0
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	bf01      	itttt	eq
 8003b1c:	6819      	ldreq	r1, [r3, #0]
 8003b1e:	685b      	ldreq	r3, [r3, #4]
 8003b20:	1809      	addeq	r1, r1, r0
 8003b22:	6021      	streq	r1, [r4, #0]
 8003b24:	6063      	str	r3, [r4, #4]
 8003b26:	6054      	str	r4, [r2, #4]
 8003b28:	e7cb      	b.n	8003ac2 <_free_r+0x22>
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	20000454 	.word	0x20000454

08003b30 <sbrk_aligned>:
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	4e0e      	ldr	r6, [pc, #56]	; (8003b6c <sbrk_aligned+0x3c>)
 8003b34:	460c      	mov	r4, r1
 8003b36:	6831      	ldr	r1, [r6, #0]
 8003b38:	4605      	mov	r5, r0
 8003b3a:	b911      	cbnz	r1, 8003b42 <sbrk_aligned+0x12>
 8003b3c:	f000 fa16 	bl	8003f6c <_sbrk_r>
 8003b40:	6030      	str	r0, [r6, #0]
 8003b42:	4621      	mov	r1, r4
 8003b44:	4628      	mov	r0, r5
 8003b46:	f000 fa11 	bl	8003f6c <_sbrk_r>
 8003b4a:	1c43      	adds	r3, r0, #1
 8003b4c:	d00a      	beq.n	8003b64 <sbrk_aligned+0x34>
 8003b4e:	1cc4      	adds	r4, r0, #3
 8003b50:	f024 0403 	bic.w	r4, r4, #3
 8003b54:	42a0      	cmp	r0, r4
 8003b56:	d007      	beq.n	8003b68 <sbrk_aligned+0x38>
 8003b58:	1a21      	subs	r1, r4, r0
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f000 fa06 	bl	8003f6c <_sbrk_r>
 8003b60:	3001      	adds	r0, #1
 8003b62:	d101      	bne.n	8003b68 <sbrk_aligned+0x38>
 8003b64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003b68:	4620      	mov	r0, r4
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	20000458 	.word	0x20000458

08003b70 <_malloc_r>:
 8003b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b74:	1ccd      	adds	r5, r1, #3
 8003b76:	f025 0503 	bic.w	r5, r5, #3
 8003b7a:	3508      	adds	r5, #8
 8003b7c:	2d0c      	cmp	r5, #12
 8003b7e:	bf38      	it	cc
 8003b80:	250c      	movcc	r5, #12
 8003b82:	2d00      	cmp	r5, #0
 8003b84:	4607      	mov	r7, r0
 8003b86:	db01      	blt.n	8003b8c <_malloc_r+0x1c>
 8003b88:	42a9      	cmp	r1, r5
 8003b8a:	d905      	bls.n	8003b98 <_malloc_r+0x28>
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	2600      	movs	r6, #0
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	4630      	mov	r0, r6
 8003b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b98:	4e2e      	ldr	r6, [pc, #184]	; (8003c54 <_malloc_r+0xe4>)
 8003b9a:	f000 fad5 	bl	8004148 <__malloc_lock>
 8003b9e:	6833      	ldr	r3, [r6, #0]
 8003ba0:	461c      	mov	r4, r3
 8003ba2:	bb34      	cbnz	r4, 8003bf2 <_malloc_r+0x82>
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	4638      	mov	r0, r7
 8003ba8:	f7ff ffc2 	bl	8003b30 <sbrk_aligned>
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	4604      	mov	r4, r0
 8003bb0:	d14d      	bne.n	8003c4e <_malloc_r+0xde>
 8003bb2:	6834      	ldr	r4, [r6, #0]
 8003bb4:	4626      	mov	r6, r4
 8003bb6:	2e00      	cmp	r6, #0
 8003bb8:	d140      	bne.n	8003c3c <_malloc_r+0xcc>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	4638      	mov	r0, r7
 8003bc0:	eb04 0803 	add.w	r8, r4, r3
 8003bc4:	f000 f9d2 	bl	8003f6c <_sbrk_r>
 8003bc8:	4580      	cmp	r8, r0
 8003bca:	d13a      	bne.n	8003c42 <_malloc_r+0xd2>
 8003bcc:	6821      	ldr	r1, [r4, #0]
 8003bce:	3503      	adds	r5, #3
 8003bd0:	1a6d      	subs	r5, r5, r1
 8003bd2:	f025 0503 	bic.w	r5, r5, #3
 8003bd6:	3508      	adds	r5, #8
 8003bd8:	2d0c      	cmp	r5, #12
 8003bda:	bf38      	it	cc
 8003bdc:	250c      	movcc	r5, #12
 8003bde:	4638      	mov	r0, r7
 8003be0:	4629      	mov	r1, r5
 8003be2:	f7ff ffa5 	bl	8003b30 <sbrk_aligned>
 8003be6:	3001      	adds	r0, #1
 8003be8:	d02b      	beq.n	8003c42 <_malloc_r+0xd2>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	442b      	add	r3, r5
 8003bee:	6023      	str	r3, [r4, #0]
 8003bf0:	e00e      	b.n	8003c10 <_malloc_r+0xa0>
 8003bf2:	6822      	ldr	r2, [r4, #0]
 8003bf4:	1b52      	subs	r2, r2, r5
 8003bf6:	d41e      	bmi.n	8003c36 <_malloc_r+0xc6>
 8003bf8:	2a0b      	cmp	r2, #11
 8003bfa:	d916      	bls.n	8003c2a <_malloc_r+0xba>
 8003bfc:	1961      	adds	r1, r4, r5
 8003bfe:	42a3      	cmp	r3, r4
 8003c00:	6025      	str	r5, [r4, #0]
 8003c02:	bf18      	it	ne
 8003c04:	6059      	strne	r1, [r3, #4]
 8003c06:	6863      	ldr	r3, [r4, #4]
 8003c08:	bf08      	it	eq
 8003c0a:	6031      	streq	r1, [r6, #0]
 8003c0c:	5162      	str	r2, [r4, r5]
 8003c0e:	604b      	str	r3, [r1, #4]
 8003c10:	4638      	mov	r0, r7
 8003c12:	f104 060b 	add.w	r6, r4, #11
 8003c16:	f000 fa9d 	bl	8004154 <__malloc_unlock>
 8003c1a:	f026 0607 	bic.w	r6, r6, #7
 8003c1e:	1d23      	adds	r3, r4, #4
 8003c20:	1af2      	subs	r2, r6, r3
 8003c22:	d0b6      	beq.n	8003b92 <_malloc_r+0x22>
 8003c24:	1b9b      	subs	r3, r3, r6
 8003c26:	50a3      	str	r3, [r4, r2]
 8003c28:	e7b3      	b.n	8003b92 <_malloc_r+0x22>
 8003c2a:	6862      	ldr	r2, [r4, #4]
 8003c2c:	42a3      	cmp	r3, r4
 8003c2e:	bf0c      	ite	eq
 8003c30:	6032      	streq	r2, [r6, #0]
 8003c32:	605a      	strne	r2, [r3, #4]
 8003c34:	e7ec      	b.n	8003c10 <_malloc_r+0xa0>
 8003c36:	4623      	mov	r3, r4
 8003c38:	6864      	ldr	r4, [r4, #4]
 8003c3a:	e7b2      	b.n	8003ba2 <_malloc_r+0x32>
 8003c3c:	4634      	mov	r4, r6
 8003c3e:	6876      	ldr	r6, [r6, #4]
 8003c40:	e7b9      	b.n	8003bb6 <_malloc_r+0x46>
 8003c42:	230c      	movs	r3, #12
 8003c44:	4638      	mov	r0, r7
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	f000 fa84 	bl	8004154 <__malloc_unlock>
 8003c4c:	e7a1      	b.n	8003b92 <_malloc_r+0x22>
 8003c4e:	6025      	str	r5, [r4, #0]
 8003c50:	e7de      	b.n	8003c10 <_malloc_r+0xa0>
 8003c52:	bf00      	nop
 8003c54:	20000454 	.word	0x20000454

08003c58 <_realloc_r>:
 8003c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5c:	4680      	mov	r8, r0
 8003c5e:	4614      	mov	r4, r2
 8003c60:	460e      	mov	r6, r1
 8003c62:	b921      	cbnz	r1, 8003c6e <_realloc_r+0x16>
 8003c64:	4611      	mov	r1, r2
 8003c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c6a:	f7ff bf81 	b.w	8003b70 <_malloc_r>
 8003c6e:	b92a      	cbnz	r2, 8003c7c <_realloc_r+0x24>
 8003c70:	f7ff ff16 	bl	8003aa0 <_free_r>
 8003c74:	4625      	mov	r5, r4
 8003c76:	4628      	mov	r0, r5
 8003c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c7c:	f000 fa70 	bl	8004160 <_malloc_usable_size_r>
 8003c80:	4284      	cmp	r4, r0
 8003c82:	4607      	mov	r7, r0
 8003c84:	d802      	bhi.n	8003c8c <_realloc_r+0x34>
 8003c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c8a:	d812      	bhi.n	8003cb2 <_realloc_r+0x5a>
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4640      	mov	r0, r8
 8003c90:	f7ff ff6e 	bl	8003b70 <_malloc_r>
 8003c94:	4605      	mov	r5, r0
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d0ed      	beq.n	8003c76 <_realloc_r+0x1e>
 8003c9a:	42bc      	cmp	r4, r7
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	bf28      	it	cs
 8003ca2:	463a      	movcs	r2, r7
 8003ca4:	f7ff fed4 	bl	8003a50 <memcpy>
 8003ca8:	4631      	mov	r1, r6
 8003caa:	4640      	mov	r0, r8
 8003cac:	f7ff fef8 	bl	8003aa0 <_free_r>
 8003cb0:	e7e1      	b.n	8003c76 <_realloc_r+0x1e>
 8003cb2:	4635      	mov	r5, r6
 8003cb4:	e7df      	b.n	8003c76 <_realloc_r+0x1e>

08003cb6 <__ssputs_r>:
 8003cb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cba:	688e      	ldr	r6, [r1, #8]
 8003cbc:	4682      	mov	sl, r0
 8003cbe:	429e      	cmp	r6, r3
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	4690      	mov	r8, r2
 8003cc4:	461f      	mov	r7, r3
 8003cc6:	d838      	bhi.n	8003d3a <__ssputs_r+0x84>
 8003cc8:	898a      	ldrh	r2, [r1, #12]
 8003cca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cce:	d032      	beq.n	8003d36 <__ssputs_r+0x80>
 8003cd0:	6825      	ldr	r5, [r4, #0]
 8003cd2:	6909      	ldr	r1, [r1, #16]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	eba5 0901 	sub.w	r9, r5, r1
 8003cda:	6965      	ldr	r5, [r4, #20]
 8003cdc:	444b      	add	r3, r9
 8003cde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ce2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ce6:	106d      	asrs	r5, r5, #1
 8003ce8:	429d      	cmp	r5, r3
 8003cea:	bf38      	it	cc
 8003cec:	461d      	movcc	r5, r3
 8003cee:	0553      	lsls	r3, r2, #21
 8003cf0:	d531      	bpl.n	8003d56 <__ssputs_r+0xa0>
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	f7ff ff3c 	bl	8003b70 <_malloc_r>
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	b950      	cbnz	r0, 8003d12 <__ssputs_r+0x5c>
 8003cfc:	230c      	movs	r3, #12
 8003cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d02:	f8ca 3000 	str.w	r3, [sl]
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d0c:	81a3      	strh	r3, [r4, #12]
 8003d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d12:	464a      	mov	r2, r9
 8003d14:	6921      	ldr	r1, [r4, #16]
 8003d16:	f7ff fe9b 	bl	8003a50 <memcpy>
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d24:	81a3      	strh	r3, [r4, #12]
 8003d26:	6126      	str	r6, [r4, #16]
 8003d28:	444e      	add	r6, r9
 8003d2a:	6026      	str	r6, [r4, #0]
 8003d2c:	463e      	mov	r6, r7
 8003d2e:	6165      	str	r5, [r4, #20]
 8003d30:	eba5 0509 	sub.w	r5, r5, r9
 8003d34:	60a5      	str	r5, [r4, #8]
 8003d36:	42be      	cmp	r6, r7
 8003d38:	d900      	bls.n	8003d3c <__ssputs_r+0x86>
 8003d3a:	463e      	mov	r6, r7
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	4641      	mov	r1, r8
 8003d40:	6820      	ldr	r0, [r4, #0]
 8003d42:	f7ff fe93 	bl	8003a6c <memmove>
 8003d46:	68a3      	ldr	r3, [r4, #8]
 8003d48:	2000      	movs	r0, #0
 8003d4a:	1b9b      	subs	r3, r3, r6
 8003d4c:	60a3      	str	r3, [r4, #8]
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	4433      	add	r3, r6
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	e7db      	b.n	8003d0e <__ssputs_r+0x58>
 8003d56:	462a      	mov	r2, r5
 8003d58:	f7ff ff7e 	bl	8003c58 <_realloc_r>
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d1e1      	bne.n	8003d26 <__ssputs_r+0x70>
 8003d62:	4650      	mov	r0, sl
 8003d64:	6921      	ldr	r1, [r4, #16]
 8003d66:	f7ff fe9b 	bl	8003aa0 <_free_r>
 8003d6a:	e7c7      	b.n	8003cfc <__ssputs_r+0x46>

08003d6c <_svfiprintf_r>:
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	4698      	mov	r8, r3
 8003d72:	898b      	ldrh	r3, [r1, #12]
 8003d74:	4607      	mov	r7, r0
 8003d76:	061b      	lsls	r3, r3, #24
 8003d78:	460d      	mov	r5, r1
 8003d7a:	4614      	mov	r4, r2
 8003d7c:	b09d      	sub	sp, #116	; 0x74
 8003d7e:	d50e      	bpl.n	8003d9e <_svfiprintf_r+0x32>
 8003d80:	690b      	ldr	r3, [r1, #16]
 8003d82:	b963      	cbnz	r3, 8003d9e <_svfiprintf_r+0x32>
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	f7ff fef3 	bl	8003b70 <_malloc_r>
 8003d8a:	6028      	str	r0, [r5, #0]
 8003d8c:	6128      	str	r0, [r5, #16]
 8003d8e:	b920      	cbnz	r0, 8003d9a <_svfiprintf_r+0x2e>
 8003d90:	230c      	movs	r3, #12
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d98:	e0d1      	b.n	8003f3e <_svfiprintf_r+0x1d2>
 8003d9a:	2340      	movs	r3, #64	; 0x40
 8003d9c:	616b      	str	r3, [r5, #20]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9309      	str	r3, [sp, #36]	; 0x24
 8003da2:	2320      	movs	r3, #32
 8003da4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003da8:	2330      	movs	r3, #48	; 0x30
 8003daa:	f04f 0901 	mov.w	r9, #1
 8003dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8003db2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f58 <_svfiprintf_r+0x1ec>
 8003db6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dba:	4623      	mov	r3, r4
 8003dbc:	469a      	mov	sl, r3
 8003dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dc2:	b10a      	cbz	r2, 8003dc8 <_svfiprintf_r+0x5c>
 8003dc4:	2a25      	cmp	r2, #37	; 0x25
 8003dc6:	d1f9      	bne.n	8003dbc <_svfiprintf_r+0x50>
 8003dc8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dcc:	d00b      	beq.n	8003de6 <_svfiprintf_r+0x7a>
 8003dce:	465b      	mov	r3, fp
 8003dd0:	4622      	mov	r2, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	f7ff ff6e 	bl	8003cb6 <__ssputs_r>
 8003dda:	3001      	adds	r0, #1
 8003ddc:	f000 80aa 	beq.w	8003f34 <_svfiprintf_r+0x1c8>
 8003de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003de2:	445a      	add	r2, fp
 8003de4:	9209      	str	r2, [sp, #36]	; 0x24
 8003de6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80a2 	beq.w	8003f34 <_svfiprintf_r+0x1c8>
 8003df0:	2300      	movs	r3, #0
 8003df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003df6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dfa:	f10a 0a01 	add.w	sl, sl, #1
 8003dfe:	9304      	str	r3, [sp, #16]
 8003e00:	9307      	str	r3, [sp, #28]
 8003e02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e06:	931a      	str	r3, [sp, #104]	; 0x68
 8003e08:	4654      	mov	r4, sl
 8003e0a:	2205      	movs	r2, #5
 8003e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e10:	4851      	ldr	r0, [pc, #324]	; (8003f58 <_svfiprintf_r+0x1ec>)
 8003e12:	f7ff fe0f 	bl	8003a34 <memchr>
 8003e16:	9a04      	ldr	r2, [sp, #16]
 8003e18:	b9d8      	cbnz	r0, 8003e52 <_svfiprintf_r+0xe6>
 8003e1a:	06d0      	lsls	r0, r2, #27
 8003e1c:	bf44      	itt	mi
 8003e1e:	2320      	movmi	r3, #32
 8003e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e24:	0711      	lsls	r1, r2, #28
 8003e26:	bf44      	itt	mi
 8003e28:	232b      	movmi	r3, #43	; 0x2b
 8003e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e32:	2b2a      	cmp	r3, #42	; 0x2a
 8003e34:	d015      	beq.n	8003e62 <_svfiprintf_r+0xf6>
 8003e36:	4654      	mov	r4, sl
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f04f 0c0a 	mov.w	ip, #10
 8003e3e:	9a07      	ldr	r2, [sp, #28]
 8003e40:	4621      	mov	r1, r4
 8003e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e46:	3b30      	subs	r3, #48	; 0x30
 8003e48:	2b09      	cmp	r3, #9
 8003e4a:	d94e      	bls.n	8003eea <_svfiprintf_r+0x17e>
 8003e4c:	b1b0      	cbz	r0, 8003e7c <_svfiprintf_r+0x110>
 8003e4e:	9207      	str	r2, [sp, #28]
 8003e50:	e014      	b.n	8003e7c <_svfiprintf_r+0x110>
 8003e52:	eba0 0308 	sub.w	r3, r0, r8
 8003e56:	fa09 f303 	lsl.w	r3, r9, r3
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	46a2      	mov	sl, r4
 8003e5e:	9304      	str	r3, [sp, #16]
 8003e60:	e7d2      	b.n	8003e08 <_svfiprintf_r+0x9c>
 8003e62:	9b03      	ldr	r3, [sp, #12]
 8003e64:	1d19      	adds	r1, r3, #4
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	9103      	str	r1, [sp, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bfbb      	ittet	lt
 8003e6e:	425b      	neglt	r3, r3
 8003e70:	f042 0202 	orrlt.w	r2, r2, #2
 8003e74:	9307      	strge	r3, [sp, #28]
 8003e76:	9307      	strlt	r3, [sp, #28]
 8003e78:	bfb8      	it	lt
 8003e7a:	9204      	strlt	r2, [sp, #16]
 8003e7c:	7823      	ldrb	r3, [r4, #0]
 8003e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e80:	d10c      	bne.n	8003e9c <_svfiprintf_r+0x130>
 8003e82:	7863      	ldrb	r3, [r4, #1]
 8003e84:	2b2a      	cmp	r3, #42	; 0x2a
 8003e86:	d135      	bne.n	8003ef4 <_svfiprintf_r+0x188>
 8003e88:	9b03      	ldr	r3, [sp, #12]
 8003e8a:	3402      	adds	r4, #2
 8003e8c:	1d1a      	adds	r2, r3, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	9203      	str	r2, [sp, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bfb8      	it	lt
 8003e96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e9a:	9305      	str	r3, [sp, #20]
 8003e9c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003f5c <_svfiprintf_r+0x1f0>
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	4650      	mov	r0, sl
 8003ea4:	7821      	ldrb	r1, [r4, #0]
 8003ea6:	f7ff fdc5 	bl	8003a34 <memchr>
 8003eaa:	b140      	cbz	r0, 8003ebe <_svfiprintf_r+0x152>
 8003eac:	2340      	movs	r3, #64	; 0x40
 8003eae:	eba0 000a 	sub.w	r0, r0, sl
 8003eb2:	fa03 f000 	lsl.w	r0, r3, r0
 8003eb6:	9b04      	ldr	r3, [sp, #16]
 8003eb8:	3401      	adds	r4, #1
 8003eba:	4303      	orrs	r3, r0
 8003ebc:	9304      	str	r3, [sp, #16]
 8003ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec2:	2206      	movs	r2, #6
 8003ec4:	4826      	ldr	r0, [pc, #152]	; (8003f60 <_svfiprintf_r+0x1f4>)
 8003ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eca:	f7ff fdb3 	bl	8003a34 <memchr>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d038      	beq.n	8003f44 <_svfiprintf_r+0x1d8>
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <_svfiprintf_r+0x1f8>)
 8003ed4:	bb1b      	cbnz	r3, 8003f1e <_svfiprintf_r+0x1b2>
 8003ed6:	9b03      	ldr	r3, [sp, #12]
 8003ed8:	3307      	adds	r3, #7
 8003eda:	f023 0307 	bic.w	r3, r3, #7
 8003ede:	3308      	adds	r3, #8
 8003ee0:	9303      	str	r3, [sp, #12]
 8003ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee4:	4433      	add	r3, r6
 8003ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee8:	e767      	b.n	8003dba <_svfiprintf_r+0x4e>
 8003eea:	460c      	mov	r4, r1
 8003eec:	2001      	movs	r0, #1
 8003eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ef2:	e7a5      	b.n	8003e40 <_svfiprintf_r+0xd4>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f04f 0c0a 	mov.w	ip, #10
 8003efa:	4619      	mov	r1, r3
 8003efc:	3401      	adds	r4, #1
 8003efe:	9305      	str	r3, [sp, #20]
 8003f00:	4620      	mov	r0, r4
 8003f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f06:	3a30      	subs	r2, #48	; 0x30
 8003f08:	2a09      	cmp	r2, #9
 8003f0a:	d903      	bls.n	8003f14 <_svfiprintf_r+0x1a8>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0c5      	beq.n	8003e9c <_svfiprintf_r+0x130>
 8003f10:	9105      	str	r1, [sp, #20]
 8003f12:	e7c3      	b.n	8003e9c <_svfiprintf_r+0x130>
 8003f14:	4604      	mov	r4, r0
 8003f16:	2301      	movs	r3, #1
 8003f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f1c:	e7f0      	b.n	8003f00 <_svfiprintf_r+0x194>
 8003f1e:	ab03      	add	r3, sp, #12
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	462a      	mov	r2, r5
 8003f24:	4638      	mov	r0, r7
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <_svfiprintf_r+0x1fc>)
 8003f28:	a904      	add	r1, sp, #16
 8003f2a:	f3af 8000 	nop.w
 8003f2e:	1c42      	adds	r2, r0, #1
 8003f30:	4606      	mov	r6, r0
 8003f32:	d1d6      	bne.n	8003ee2 <_svfiprintf_r+0x176>
 8003f34:	89ab      	ldrh	r3, [r5, #12]
 8003f36:	065b      	lsls	r3, r3, #25
 8003f38:	f53f af2c 	bmi.w	8003d94 <_svfiprintf_r+0x28>
 8003f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f3e:	b01d      	add	sp, #116	; 0x74
 8003f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f44:	ab03      	add	r3, sp, #12
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	462a      	mov	r2, r5
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <_svfiprintf_r+0x1fc>)
 8003f4e:	a904      	add	r1, sp, #16
 8003f50:	f7ff f81c 	bl	8002f8c <_printf_i>
 8003f54:	e7eb      	b.n	8003f2e <_svfiprintf_r+0x1c2>
 8003f56:	bf00      	nop
 8003f58:	080042cc 	.word	0x080042cc
 8003f5c:	080042d2 	.word	0x080042d2
 8003f60:	080042d6 	.word	0x080042d6
 8003f64:	00000000 	.word	0x00000000
 8003f68:	08003cb7 	.word	0x08003cb7

08003f6c <_sbrk_r>:
 8003f6c:	b538      	push	{r3, r4, r5, lr}
 8003f6e:	2300      	movs	r3, #0
 8003f70:	4d05      	ldr	r5, [pc, #20]	; (8003f88 <_sbrk_r+0x1c>)
 8003f72:	4604      	mov	r4, r0
 8003f74:	4608      	mov	r0, r1
 8003f76:	602b      	str	r3, [r5, #0]
 8003f78:	f7fc fdfe 	bl	8000b78 <_sbrk>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	d102      	bne.n	8003f86 <_sbrk_r+0x1a>
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	b103      	cbz	r3, 8003f86 <_sbrk_r+0x1a>
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
 8003f88:	2000045c 	.word	0x2000045c

08003f8c <_raise_r>:
 8003f8c:	291f      	cmp	r1, #31
 8003f8e:	b538      	push	{r3, r4, r5, lr}
 8003f90:	4604      	mov	r4, r0
 8003f92:	460d      	mov	r5, r1
 8003f94:	d904      	bls.n	8003fa0 <_raise_r+0x14>
 8003f96:	2316      	movs	r3, #22
 8003f98:	6003      	str	r3, [r0, #0]
 8003f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003fa2:	b112      	cbz	r2, 8003faa <_raise_r+0x1e>
 8003fa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003fa8:	b94b      	cbnz	r3, 8003fbe <_raise_r+0x32>
 8003faa:	4620      	mov	r0, r4
 8003fac:	f000 f830 	bl	8004010 <_getpid_r>
 8003fb0:	462a      	mov	r2, r5
 8003fb2:	4601      	mov	r1, r0
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fba:	f000 b817 	b.w	8003fec <_kill_r>
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d00a      	beq.n	8003fd8 <_raise_r+0x4c>
 8003fc2:	1c59      	adds	r1, r3, #1
 8003fc4:	d103      	bne.n	8003fce <_raise_r+0x42>
 8003fc6:	2316      	movs	r3, #22
 8003fc8:	6003      	str	r3, [r0, #0]
 8003fca:	2001      	movs	r0, #1
 8003fcc:	e7e7      	b.n	8003f9e <_raise_r+0x12>
 8003fce:	2400      	movs	r4, #0
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003fd6:	4798      	blx	r3
 8003fd8:	2000      	movs	r0, #0
 8003fda:	e7e0      	b.n	8003f9e <_raise_r+0x12>

08003fdc <raise>:
 8003fdc:	4b02      	ldr	r3, [pc, #8]	; (8003fe8 <raise+0xc>)
 8003fde:	4601      	mov	r1, r0
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	f7ff bfd3 	b.w	8003f8c <_raise_r>
 8003fe6:	bf00      	nop
 8003fe8:	2000000c 	.word	0x2000000c

08003fec <_kill_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	2300      	movs	r3, #0
 8003ff0:	4d06      	ldr	r5, [pc, #24]	; (800400c <_kill_r+0x20>)
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	602b      	str	r3, [r5, #0]
 8003ffa:	f7fc fd3a 	bl	8000a72 <_kill>
 8003ffe:	1c43      	adds	r3, r0, #1
 8004000:	d102      	bne.n	8004008 <_kill_r+0x1c>
 8004002:	682b      	ldr	r3, [r5, #0]
 8004004:	b103      	cbz	r3, 8004008 <_kill_r+0x1c>
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	bd38      	pop	{r3, r4, r5, pc}
 800400a:	bf00      	nop
 800400c:	2000045c 	.word	0x2000045c

08004010 <_getpid_r>:
 8004010:	f7fc bd28 	b.w	8000a64 <_getpid>

08004014 <__sread>:
 8004014:	b510      	push	{r4, lr}
 8004016:	460c      	mov	r4, r1
 8004018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800401c:	f000 f8a8 	bl	8004170 <_read_r>
 8004020:	2800      	cmp	r0, #0
 8004022:	bfab      	itete	ge
 8004024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004026:	89a3      	ldrhlt	r3, [r4, #12]
 8004028:	181b      	addge	r3, r3, r0
 800402a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800402e:	bfac      	ite	ge
 8004030:	6563      	strge	r3, [r4, #84]	; 0x54
 8004032:	81a3      	strhlt	r3, [r4, #12]
 8004034:	bd10      	pop	{r4, pc}

08004036 <__swrite>:
 8004036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800403a:	461f      	mov	r7, r3
 800403c:	898b      	ldrh	r3, [r1, #12]
 800403e:	4605      	mov	r5, r0
 8004040:	05db      	lsls	r3, r3, #23
 8004042:	460c      	mov	r4, r1
 8004044:	4616      	mov	r6, r2
 8004046:	d505      	bpl.n	8004054 <__swrite+0x1e>
 8004048:	2302      	movs	r3, #2
 800404a:	2200      	movs	r2, #0
 800404c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004050:	f000 f868 	bl	8004124 <_lseek_r>
 8004054:	89a3      	ldrh	r3, [r4, #12]
 8004056:	4632      	mov	r2, r6
 8004058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800405c:	81a3      	strh	r3, [r4, #12]
 800405e:	4628      	mov	r0, r5
 8004060:	463b      	mov	r3, r7
 8004062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800406a:	f000 b817 	b.w	800409c <_write_r>

0800406e <__sseek>:
 800406e:	b510      	push	{r4, lr}
 8004070:	460c      	mov	r4, r1
 8004072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004076:	f000 f855 	bl	8004124 <_lseek_r>
 800407a:	1c43      	adds	r3, r0, #1
 800407c:	89a3      	ldrh	r3, [r4, #12]
 800407e:	bf15      	itete	ne
 8004080:	6560      	strne	r0, [r4, #84]	; 0x54
 8004082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800408a:	81a3      	strheq	r3, [r4, #12]
 800408c:	bf18      	it	ne
 800408e:	81a3      	strhne	r3, [r4, #12]
 8004090:	bd10      	pop	{r4, pc}

08004092 <__sclose>:
 8004092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004096:	f000 b813 	b.w	80040c0 <_close_r>
	...

0800409c <_write_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4604      	mov	r4, r0
 80040a0:	4608      	mov	r0, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	2200      	movs	r2, #0
 80040a6:	4d05      	ldr	r5, [pc, #20]	; (80040bc <_write_r+0x20>)
 80040a8:	602a      	str	r2, [r5, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	f7fc fd18 	bl	8000ae0 <_write>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d102      	bne.n	80040ba <_write_r+0x1e>
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	b103      	cbz	r3, 80040ba <_write_r+0x1e>
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
 80040bc:	2000045c 	.word	0x2000045c

080040c0 <_close_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	2300      	movs	r3, #0
 80040c4:	4d05      	ldr	r5, [pc, #20]	; (80040dc <_close_r+0x1c>)
 80040c6:	4604      	mov	r4, r0
 80040c8:	4608      	mov	r0, r1
 80040ca:	602b      	str	r3, [r5, #0]
 80040cc:	f7fc fd24 	bl	8000b18 <_close>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_close_r+0x1a>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_close_r+0x1a>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	2000045c 	.word	0x2000045c

080040e0 <_fstat_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	2300      	movs	r3, #0
 80040e4:	4d06      	ldr	r5, [pc, #24]	; (8004100 <_fstat_r+0x20>)
 80040e6:	4604      	mov	r4, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	602b      	str	r3, [r5, #0]
 80040ee:	f7fc fd1e 	bl	8000b2e <_fstat>
 80040f2:	1c43      	adds	r3, r0, #1
 80040f4:	d102      	bne.n	80040fc <_fstat_r+0x1c>
 80040f6:	682b      	ldr	r3, [r5, #0]
 80040f8:	b103      	cbz	r3, 80040fc <_fstat_r+0x1c>
 80040fa:	6023      	str	r3, [r4, #0]
 80040fc:	bd38      	pop	{r3, r4, r5, pc}
 80040fe:	bf00      	nop
 8004100:	2000045c 	.word	0x2000045c

08004104 <_isatty_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	2300      	movs	r3, #0
 8004108:	4d05      	ldr	r5, [pc, #20]	; (8004120 <_isatty_r+0x1c>)
 800410a:	4604      	mov	r4, r0
 800410c:	4608      	mov	r0, r1
 800410e:	602b      	str	r3, [r5, #0]
 8004110:	f7fc fd1c 	bl	8000b4c <_isatty>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_isatty_r+0x1a>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_isatty_r+0x1a>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	2000045c 	.word	0x2000045c

08004124 <_lseek_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4604      	mov	r4, r0
 8004128:	4608      	mov	r0, r1
 800412a:	4611      	mov	r1, r2
 800412c:	2200      	movs	r2, #0
 800412e:	4d05      	ldr	r5, [pc, #20]	; (8004144 <_lseek_r+0x20>)
 8004130:	602a      	str	r2, [r5, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7fc fd14 	bl	8000b60 <_lseek>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_lseek_r+0x1e>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_lseek_r+0x1e>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	2000045c 	.word	0x2000045c

08004148 <__malloc_lock>:
 8004148:	4801      	ldr	r0, [pc, #4]	; (8004150 <__malloc_lock+0x8>)
 800414a:	f7ff bc03 	b.w	8003954 <__retarget_lock_acquire_recursive>
 800414e:	bf00      	nop
 8004150:	20000450 	.word	0x20000450

08004154 <__malloc_unlock>:
 8004154:	4801      	ldr	r0, [pc, #4]	; (800415c <__malloc_unlock+0x8>)
 8004156:	f7ff bbfe 	b.w	8003956 <__retarget_lock_release_recursive>
 800415a:	bf00      	nop
 800415c:	20000450 	.word	0x20000450

08004160 <_malloc_usable_size_r>:
 8004160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004164:	1f18      	subs	r0, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	bfbc      	itt	lt
 800416a:	580b      	ldrlt	r3, [r1, r0]
 800416c:	18c0      	addlt	r0, r0, r3
 800416e:	4770      	bx	lr

08004170 <_read_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4604      	mov	r4, r0
 8004174:	4608      	mov	r0, r1
 8004176:	4611      	mov	r1, r2
 8004178:	2200      	movs	r2, #0
 800417a:	4d05      	ldr	r5, [pc, #20]	; (8004190 <_read_r+0x20>)
 800417c:	602a      	str	r2, [r5, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	f7fc fc91 	bl	8000aa6 <_read>
 8004184:	1c43      	adds	r3, r0, #1
 8004186:	d102      	bne.n	800418e <_read_r+0x1e>
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	b103      	cbz	r3, 800418e <_read_r+0x1e>
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	bd38      	pop	{r3, r4, r5, pc}
 8004190:	2000045c 	.word	0x2000045c

08004194 <_init>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr

080041a0 <_fini>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr
