
RSA_transceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005148  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08005318  08005318  00015318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005654  08005654  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800565c  0800565c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20000070  080056d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200003f4  080056d4  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a58f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c92  00000000  00000000  0002a62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002c2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a0  00000000  00000000  0002cb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220a5  00000000  00000000  0002d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ace5  00000000  00000000  0004f365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9c9c  00000000  00000000  0005a04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123ce6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d84  00000000  00000000  00123d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005300 	.word	0x08005300

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005300 	.word	0x08005300

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <rsa_gcd>:
#include <assert.h>

#include "rsa.h"

/* gcd - Greatest common divisor */
static int32_t rsa_gcd(int32_t a, int32_t b) {
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	int32_t aux_var = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]

	/* if b is greater than swap their values */
	if (b > a) {
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	dd05      	ble.n	80005e6 <rsa_gcd+0x22>
		aux_var = a;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60fb      	str	r3, [r7, #12]
		a = b;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	607b      	str	r3, [r7, #4]
		b = aux_var;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	603b      	str	r3, [r7, #0]
	}

	while(1) {
		aux_var = a % b;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	fb93 f2f2 	sdiv	r2, r3, r2
 80005ee:	6839      	ldr	r1, [r7, #0]
 80005f0:	fb01 f202 	mul.w	r2, r1, r2
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
		if (!aux_var) {
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <rsa_gcd+0x3e>
			return b;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	e004      	b.n	800060c <rsa_gcd+0x48>
		}
		a = b;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	607b      	str	r3, [r7, #4]
		b = aux_var;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	603b      	str	r3, [r7, #0]
		aux_var = a % b;
 800060a:	e7ec      	b.n	80005e6 <rsa_gcd+0x22>
	}
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <modpow>:

static uint32_t modpow(uint32_t base, uint32_t power, uint32_t mod)
{
 8000618:	b480      	push	{r7}
 800061a:	b087      	sub	sp, #28
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
    uint32_t result = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < power; i++)
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	e00e      	b.n	800064c <modpow+0x34>
    {
            result = (result * base) % mod;
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	fb02 f303 	mul.w	r3, r2, r3
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	fbb3 f2f2 	udiv	r2, r3, r2
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < power; i++)
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	3301      	adds	r3, #1
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	429a      	cmp	r2, r3
 8000652:	d3ec      	bcc.n	800062e <modpow+0x16>
    }
    return result;
 8000654:	697b      	ldr	r3, [r7, #20]
}
 8000656:	4618      	mov	r0, r3
 8000658:	371c      	adds	r7, #28
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <rsa_init>:
 
void rsa_init(uint32_t p, uint32_t q, rsa_structure* rsa_ctx) {
 8000664:	b5b0      	push	{r4, r5, r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af04      	add	r7, sp, #16
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
	// todo here we can check if p and q are prime numbers	
	uint32_t aux_var = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
	rsa_ctx->p_prime = p;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	601a      	str	r2, [r3, #0]
	rsa_ctx->q_prime = q;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	68ba      	ldr	r2, [r7, #8]
 800067e:	605a      	str	r2, [r3, #4]

	rsa_ctx->public_key.n = rsa_ctx->p_prime * rsa_ctx->q_prime;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	6852      	ldr	r2, [r2, #4]
 8000688:	fb03 f202 	mul.w	r2, r3, r2
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	611a      	str	r2, [r3, #16]
	rsa_ctx->totient = (rsa_ctx->p_prime - 1) * (rsa_ctx->q_prime - 1);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3b01      	subs	r3, #1
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	6852      	ldr	r2, [r2, #4]
 800069a:	3a01      	subs	r2, #1
 800069c:	fb03 f202 	mul.w	r2, r3, r2
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	609a      	str	r2, [r3, #8]

	/* public key is any number belonging to Z*fi(n) that means public key and fi(n) are coprime (gcd == 1), find public key */
    // todo it would probably be safer if public key would be choose randomly
	rsa_ctx->public_key.e = 2;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2202      	movs	r2, #2
 80006a8:	615a      	str	r2, [r3, #20]
	while (1) {
		aux_var = rsa_gcd(rsa_ctx->public_key.e, rsa_ctx->totient);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4610      	mov	r0, r2
 80006b8:	f7ff ff84 	bl	80005c4 <rsa_gcd>
 80006bc:	4603      	mov	r3, r0
 80006be:	617b      	str	r3, [r7, #20]
		if (aux_var == 1) {
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d005      	beq.n	80006d2 <rsa_init+0x6e>
			break;
		}
		rsa_ctx->public_key.e++;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	615a      	str	r2, [r3, #20]
		aux_var = rsa_gcd(rsa_ctx->public_key.e, rsa_ctx->totient);
 80006d0:	e7eb      	b.n	80006aa <rsa_init+0x46>
			break;
 80006d2:	bf00      	nop
	}

	/* d = e^-1(mod totient), find private key */
	for (rsa_ctx->d = 0; rsa_ctx->d < rsa_ctx->totient; rsa_ctx->d++) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	e015      	b.n	8000708 <rsa_init+0xa4>
		aux_var = rsa_ctx->d * rsa_ctx->public_key.e % rsa_ctx->totient;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	6952      	ldr	r2, [r2, #20]
 80006e4:	fb02 f303 	mul.w	r3, r2, r3
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	6892      	ldr	r2, [r2, #8]
 80006ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80006f0:	fb01 f202 	mul.w	r2, r1, r2
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	617b      	str	r3, [r7, #20]
		if (aux_var == 1) {
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d00b      	beq.n	8000716 <rsa_init+0xb2>
	for (rsa_ctx->d = 0; rsa_ctx->d < rsa_ctx->totient; rsa_ctx->d++) {
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68da      	ldr	r2, [r3, #12]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	429a      	cmp	r2, r3
 8000712:	d3e3      	bcc.n	80006dc <rsa_init+0x78>
 8000714:	e000      	b.n	8000718 <rsa_init+0xb4>
			break;
 8000716:	bf00      	nop
		}
	}
	
	printf("RSA parameters:\np_prime: %ld\nq_prime: %ld\nn: %ld\ntotient: %ld\ne: %ld\nd: %ld\n", rsa_ctx->p_prime, rsa_ctx->q_prime,
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	685c      	ldr	r4, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	691d      	ldr	r5, [r3, #16]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	6952      	ldr	r2, [r2, #20]
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	68c9      	ldr	r1, [r1, #12]
 8000730:	9102      	str	r1, [sp, #8]
 8000732:	9201      	str	r2, [sp, #4]
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	462b      	mov	r3, r5
 8000738:	4622      	mov	r2, r4
 800073a:	4601      	mov	r1, r0
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <rsa_init+0xe8>)
 800073e:	f003 fe01 	bl	8004344 <iprintf>
		rsa_ctx->public_key.n, rsa_ctx->totient, rsa_ctx->public_key.e, rsa_ctx->d);
}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bdb0      	pop	{r4, r5, r7, pc}
 800074a:	bf00      	nop
 800074c:	08005318 	.word	0x08005318

08000750 <rsa_encrypt>:

uint32_t rsa_encrypt(uint32_t msg, rsa_public_key* public_key) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
    assert(msg < public_key->n);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	429a      	cmp	r2, r3
 8000762:	d305      	bcc.n	8000770 <rsa_encrypt+0x20>
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <rsa_encrypt+0x3c>)
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <rsa_encrypt+0x40>)
 8000768:	2148      	movs	r1, #72	; 0x48
 800076a:	480a      	ldr	r0, [pc, #40]	; (8000794 <rsa_encrypt+0x44>)
 800076c:	f003 fa96 	bl	8003c9c <__assert_func>
	return modpow(msg, public_key->e, public_key->n);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	6859      	ldr	r1, [r3, #4]
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff ff4c 	bl	8000618 <modpow>
 8000780:	4603      	mov	r3, r0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	08005368 	.word	0x08005368
 8000790:	080053e0 	.word	0x080053e0
 8000794:	0800537c 	.word	0x0800537c

08000798 <rsa_get_public_key>:

uint32_t rsa_decrypt(uint32_t encrypted_msg, rsa_structure* rsa_ctx) {
	return modpow(encrypted_msg, rsa_ctx->d, rsa_ctx->public_key.n);
}

rsa_public_key *rsa_get_public_key(rsa_structure* rsa_ctx) {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    return &rsa_ctx->public_key;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3310      	adds	r3, #16
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f000 fc3c 	bl	8001034 <HAL_Init>

  /* USER CODE BEGIN Init */
  rsa_init(59, 67, &rsa_ctx);
 80007bc:	4a37      	ldr	r2, [pc, #220]	; (800089c <main+0xec>)
 80007be:	2143      	movs	r1, #67	; 0x43
 80007c0:	203b      	movs	r0, #59	; 0x3b
 80007c2:	f7ff ff4f 	bl	8000664 <rsa_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f875 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 f92b 	bl	8000a24 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ce:	f000 f90f 	bl	80009f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 f8e3 	bl	800099c <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007d6:	f000 f8cd 	bl	8000974 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_buffer, sizeof(receive_buffer) / sizeof(receive_buffer[0]));
 80007da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007de:	4930      	ldr	r1, [pc, #192]	; (80008a0 <main+0xf0>)
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <main+0xf4>)
 80007e2:	f002 f973 	bl	8002acc <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(!public_key_obtained) {
 80007e6:	e008      	b.n	80007fa <main+0x4a>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)GIVE_PUBLIC_KEY_CMD, sizeof(GIVE_PUBLIC_KEY_CMD));
 80007e8:	2210      	movs	r2, #16
 80007ea:	492f      	ldr	r1, [pc, #188]	; (80008a8 <main+0xf8>)
 80007ec:	482d      	ldr	r0, [pc, #180]	; (80008a4 <main+0xf4>)
 80007ee:	f002 f928 	bl	8002a42 <HAL_UART_Transmit_IT>
	  HAL_Delay(1000);
 80007f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f6:	f000 fc8f 	bl	8001118 <HAL_Delay>
  while(!public_key_obtained) {
 80007fa:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <main+0xfc>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f083 0301 	eor.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1ee      	bne.n	80007e8 <main+0x38>
  }
  char *message_tx = "Standardy i systemy komunikacyjne";
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <main+0x100>)
 800080c:	60fb      	str	r3, [r7, #12]
  uint32_t message_encrypted[strlen(message_tx) + 1];
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f7ff fcfe 	bl	8000210 <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	1c59      	adds	r1, r3, #1
 8000818:	460b      	mov	r3, r1
 800081a:	3b01      	subs	r3, #1
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	2300      	movs	r3, #0
 8000820:	4688      	mov	r8, r1
 8000822:	4699      	mov	r9, r3
 8000824:	f04f 0200 	mov.w	r2, #0
 8000828:	f04f 0300 	mov.w	r3, #0
 800082c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000830:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000834:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000838:	2300      	movs	r3, #0
 800083a:	460c      	mov	r4, r1
 800083c:	461d      	mov	r5, r3
 800083e:	f04f 0200 	mov.w	r2, #0
 8000842:	f04f 0300 	mov.w	r3, #0
 8000846:	016b      	lsls	r3, r5, #5
 8000848:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800084c:	0162      	lsls	r2, r4, #5
 800084e:	008b      	lsls	r3, r1, #2
 8000850:	3307      	adds	r3, #7
 8000852:	08db      	lsrs	r3, r3, #3
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	ebad 0d03 	sub.w	sp, sp, r3
 800085a:	466b      	mov	r3, sp
 800085c:	3303      	adds	r3, #3
 800085e:	089b      	lsrs	r3, r3, #2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000868:	f000 fc56 	bl	8001118 <HAL_Delay>
	  if (public_key_obtained) {
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <main+0xfc>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0f6      	beq.n	8000864 <main+0xb4>
			encrypt_message(message_tx, message_encrypted);
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f000 f9c3 	bl	8000c04 <encrypt_message>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)&message_encrypted, (strlen(message_tx) + 1) * sizeof(uint32_t));
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff fcc6 	bl	8000210 <strlen>
 8000884:	4603      	mov	r3, r0
 8000886:	3301      	adds	r3, #1
 8000888:	b29b      	uxth	r3, r3
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	b29b      	uxth	r3, r3
 800088e:	461a      	mov	r2, r3
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <main+0xf4>)
 8000894:	f002 f8d5 	bl	8002a42 <HAL_UART_Transmit_IT>
	  HAL_Delay(1000);
 8000898:	e7e4      	b.n	8000864 <main+0xb4>
 800089a:	bf00      	nop
 800089c:	20000130 	.word	0x20000130
 80008a0:	20000150 	.word	0x20000150
 80008a4:	2000008c 	.word	0x2000008c
 80008a8:	08005390 	.word	0x08005390
 80008ac:	20000358 	.word	0x20000358
 80008b0:	080053a0 	.word	0x080053a0

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2234      	movs	r2, #52	; 0x34
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 fa48 	bl	8003d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <SystemClock_Config+0xb8>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a22      	ldr	r2, [pc, #136]	; (800096c <SystemClock_Config+0xb8>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b20      	ldr	r3, [pc, #128]	; (800096c <SystemClock_Config+0xb8>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008f4:	2300      	movs	r3, #0
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <SystemClock_Config+0xbc>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <SystemClock_Config+0xbc>)
 8000902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <SystemClock_Config+0xbc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000914:	2302      	movs	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2310      	movs	r3, #16
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000920:	2300      	movs	r3, #0
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fd9f 	bl	800246c <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000934:	f000 f996 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	230f      	movs	r3, #15
 800093a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fac6 	bl	8001ee4 <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800095e:	f000 f981 	bl	8000c64 <Error_Handler>
  }
}
 8000962:	bf00      	nop
 8000964:	3750      	adds	r7, #80	; 0x50
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000

08000974 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2026      	movs	r0, #38	; 0x26
 800097e:	f000 fcca 	bl	8001316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000982:	2026      	movs	r0, #38	; 0x26
 8000984:	f000 fce3 	bl	800134e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2010      	movs	r0, #16
 800098e:	f000 fcc2 	bl	8001316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000992:	2010      	movs	r0, #16
 8000994:	f000 fcdb 	bl	800134e <HAL_NVIC_EnableIRQ>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_USART2_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009d4:	f001 ffe8 	bl	80029a8 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 f941 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000008c 	.word	0x2000008c
 80009ec:	40004400 	.word	0x40004400

080009f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_DMA_Init+0x30>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <MX_DMA_Init+0x30>)
 8000a00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_DMA_Init+0x30>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a1f      	ldr	r2, [pc, #124]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_CORRUPTED_GPIO_Port, DATA_CORRUPTED_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <MX_GPIO_Init+0xa0>)
 8000a96:	f001 fa0b 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_CORRUPTED_Pin */
  GPIO_InitStruct.Pin = DATA_CORRUPTED_Pin;
 8000a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DATA_CORRUPTED_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_GPIO_Init+0xa0>)
 8000ab4:	f001 f868 	bl	8001b88 <HAL_GPIO_Init>

}
 8000ab8:	bf00      	nop
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
	static char tmp_buffer[128];
    // Check if UART2 trigger the Callback
    if(huart->Instance == USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a3b      	ldr	r2, [pc, #236]	; (8000bc8 <HAL_UARTEx_RxEventCallback+0x100>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d170      	bne.n	8000bc0 <HAL_UARTEx_RxEventCallback+0xf8>
    {
    	receive_buffer[Size] = '\0';
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	4a3a      	ldr	r2, [pc, #232]	; (8000bcc <HAL_UARTEx_RxEventCallback+0x104>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	54d1      	strb	r1, [r2, r3]

    	if (new_encrypted_message) {
 8000ae6:	4b3a      	ldr	r3, [pc, #232]	; (8000bd0 <HAL_UARTEx_RxEventCallback+0x108>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00b      	beq.n	8000b08 <HAL_UARTEx_RxEventCallback+0x40>
    		new_encrypted_message = false;
 8000af0:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <HAL_UARTEx_RxEventCallback+0x108>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
    		last_encrypted_message_length = 0;
 8000af6:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
    		HAL_GPIO_WritePin(DATA_CORRUPTED_GPIO_Port, DATA_CORRUPTED_Pin, true);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b02:	4835      	ldr	r0, [pc, #212]	; (8000bd8 <HAL_UARTEx_RxEventCallback+0x110>)
 8000b04:	f001 f9d4 	bl	8001eb0 <HAL_GPIO_WritePin>
    	}

    	if (!strncmp((char*)receive_buffer, GIVE_PUBLIC_KEY_CMD, sizeof(GIVE_PUBLIC_KEY_CMD) - 1)) {
 8000b08:	220f      	movs	r2, #15
 8000b0a:	4934      	ldr	r1, [pc, #208]	; (8000bdc <HAL_UARTEx_RxEventCallback+0x114>)
 8000b0c:	482f      	ldr	r0, [pc, #188]	; (8000bcc <HAL_UARTEx_RxEventCallback+0x104>)
 8000b0e:	f003 fc65 	bl	80043dc <strncmp>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d123      	bne.n	8000b60 <HAL_UARTEx_RxEventCallback+0x98>
    		rsa_public_key *public_key = rsa_get_public_key(&rsa_ctx);
 8000b18:	4831      	ldr	r0, [pc, #196]	; (8000be0 <HAL_UARTEx_RxEventCallback+0x118>)
 8000b1a:	f7ff fe3d 	bl	8000798 <rsa_get_public_key>
 8000b1e:	6138      	str	r0, [r7, #16]
    		int len = snprintf(tmp_buffer, sizeof(tmp_buffer), "%s%lu,%lu", PUBLIC_KEY_MESSAGE_HEADER, public_key->e, public_key->n);
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	6812      	ldr	r2, [r2, #0]
 8000b28:	9201      	str	r2, [sp, #4]
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000b2e:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <HAL_UARTEx_RxEventCallback+0x120>)
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	482e      	ldr	r0, [pc, #184]	; (8000bec <HAL_UARTEx_RxEventCallback+0x124>)
 8000b34:	f003 fc1e 	bl	8004374 <sniprintf>
 8000b38:	60f8      	str	r0, [r7, #12]
    		if (len) {
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d008      	beq.n	8000b52 <HAL_UARTEx_RxEventCallback+0x8a>
    			HAL_UART_Transmit_IT(&huart2, (uint8_t*)tmp_buffer, len + 1);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	3301      	adds	r3, #1
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4928      	ldr	r1, [pc, #160]	; (8000bec <HAL_UARTEx_RxEventCallback+0x124>)
 8000b4c:	4828      	ldr	r0, [pc, #160]	; (8000bf0 <HAL_UARTEx_RxEventCallback+0x128>)
 8000b4e:	f001 ff78 	bl	8002a42 <HAL_UART_Transmit_IT>
    		}
    		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_buffer, sizeof(receive_buffer) / sizeof(receive_buffer[0]));
 8000b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b56:	491d      	ldr	r1, [pc, #116]	; (8000bcc <HAL_UARTEx_RxEventCallback+0x104>)
 8000b58:	4825      	ldr	r0, [pc, #148]	; (8000bf0 <HAL_UARTEx_RxEventCallback+0x128>)
 8000b5a:	f001 ffb7 	bl	8002acc <HAL_UARTEx_ReceiveToIdle_DMA>
    	} else {
    		new_encrypted_message = true;
    		last_encrypted_message_length = Size;
    	}
    }
}
 8000b5e:	e02f      	b.n	8000bc0 <HAL_UARTEx_RxEventCallback+0xf8>
    	} else if (!strncmp((char*)receive_buffer, PUBLIC_KEY_MESSAGE_HEADER, sizeof(PUBLIC_KEY_MESSAGE_HEADER) - 1)) {
 8000b60:	220b      	movs	r2, #11
 8000b62:	4920      	ldr	r1, [pc, #128]	; (8000be4 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000b64:	4819      	ldr	r0, [pc, #100]	; (8000bcc <HAL_UARTEx_RxEventCallback+0x104>)
 8000b66:	f003 fc39 	bl	80043dc <strncmp>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d121      	bne.n	8000bb4 <HAL_UARTEx_RxEventCallback+0xec>
    		rsa_second_board_public_key.e = atoi((char*)&receive_buffer[sizeof(PUBLIC_KEY_MESSAGE_HEADER) - 1]);
 8000b70:	4820      	ldr	r0, [pc, #128]	; (8000bf4 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000b72:	f003 f8b1 	bl	8003cd8 <atoi>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_UARTEx_RxEventCallback+0x130>)
 8000b7c:	605a      	str	r2, [r3, #4]
    		char *ptr = strtok((char*)receive_buffer, ",");
 8000b7e:	491f      	ldr	r1, [pc, #124]	; (8000bfc <HAL_UARTEx_RxEventCallback+0x134>)
 8000b80:	4812      	ldr	r0, [pc, #72]	; (8000bcc <HAL_UARTEx_RxEventCallback+0x104>)
 8000b82:	f003 fc3f 	bl	8004404 <strtok>
 8000b86:	6178      	str	r0, [r7, #20]
    		ptr = strtok(NULL, ",");
 8000b88:	491c      	ldr	r1, [pc, #112]	; (8000bfc <HAL_UARTEx_RxEventCallback+0x134>)
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f003 fc3a 	bl	8004404 <strtok>
 8000b90:	6178      	str	r0, [r7, #20]
			rsa_second_board_public_key.n = atoi(ptr);
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f003 f8a0 	bl	8003cd8 <atoi>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_UARTEx_RxEventCallback+0x130>)
 8000b9e:	601a      	str	r2, [r3, #0]
			public_key_obtained = true;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_UARTEx_RxEventCallback+0x138>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receive_buffer, sizeof(receive_buffer) / sizeof(receive_buffer[0]));
 8000ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <HAL_UARTEx_RxEventCallback+0x104>)
 8000bac:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <HAL_UARTEx_RxEventCallback+0x128>)
 8000bae:	f001 ff8d 	bl	8002acc <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000bb2:	e005      	b.n	8000bc0 <HAL_UARTEx_RxEventCallback+0xf8>
    		new_encrypted_message = true;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_UARTEx_RxEventCallback+0x108>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
    		last_encrypted_message_length = Size;
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40004400 	.word	0x40004400
 8000bcc:	20000150 	.word	0x20000150
 8000bd0:	20000350 	.word	0x20000350
 8000bd4:	20000354 	.word	0x20000354
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	08005390 	.word	0x08005390
 8000be0:	20000130 	.word	0x20000130
 8000be4:	080053c4 	.word	0x080053c4
 8000be8:	080053d0 	.word	0x080053d0
 8000bec:	2000035c 	.word	0x2000035c
 8000bf0:	2000008c 	.word	0x2000008c
 8000bf4:	2000015b 	.word	0x2000015b
 8000bf8:	20000148 	.word	0x20000148
 8000bfc:	080053dc 	.word	0x080053dc
 8000c00:	20000358 	.word	0x20000358

08000c04 <encrypt_message>:
	for (uint32_t i = 0; i < last_encrypted_message_length; i += 4) {
		buff[i / 4] = (char)rsa_decrypt(*(uint32_t*)&receive_buffer[i], &rsa_ctx);
	}
}

static void encrypt_message(char *message, uint32_t *encrypted_message) {
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
	for (; i < strlen(message); i++) {
 8000c12:	e010      	b.n	8000c36 <encrypt_message+0x32>
		encrypted_message[i] = rsa_encrypt((uint32_t)message[i], &rsa_second_board_public_key);
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	18d4      	adds	r4, r2, r3
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <encrypt_message+0x5c>)
 8000c28:	f7ff fd92 	bl	8000750 <rsa_encrypt>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	6023      	str	r3, [r4, #0]
	for (; i < strlen(message); i++) {
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3301      	adds	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff faea 	bl	8000210 <strlen>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d3e7      	bcc.n	8000c14 <encrypt_message+0x10>
	}
	encrypted_message[i] = rsa_encrypt((uint32_t)'\0', &rsa_second_board_public_key);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	18d4      	adds	r4, r2, r3
 8000c4c:	4904      	ldr	r1, [pc, #16]	; (8000c60 <encrypt_message+0x5c>)
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fd7e 	bl	8000750 <rsa_encrypt>
 8000c54:	4603      	mov	r3, r0
 8000c56:	6023      	str	r3, [r4, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	20000148 	.word	0x20000148

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a30      	ldr	r2, [pc, #192]	; (8000da0 <HAL_UART_MspInit+0xe0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d159      	bne.n	8000d96 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <HAL_UART_MspInit+0xe4>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <HAL_UART_MspInit+0xe4>)
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <HAL_UART_MspInit+0xe4>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <HAL_UART_MspInit+0xe4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a27      	ldr	r2, [pc, #156]	; (8000da4 <HAL_UART_MspInit+0xe4>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <HAL_UART_MspInit+0xe4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d1a:	2360      	movs	r3, #96	; 0x60
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	481c      	ldr	r0, [pc, #112]	; (8000da8 <HAL_UART_MspInit+0xe8>)
 8000d36:	f000 ff27 	bl	8001b88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <HAL_UART_MspInit+0xf0>)
 8000d3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d7a:	480c      	ldr	r0, [pc, #48]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d7c:	f000 fb02 	bl	8001384 <HAL_DMA_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000d86:	f7ff ff6d 	bl	8000c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d8e:	639a      	str	r2, [r3, #56]	; 0x38
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_UART_MspInit+0xec>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020c00 	.word	0x40020c00
 8000dac:	200000d0 	.word	0x200000d0
 8000db0:	40026088 	.word	0x40026088

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <NMI_Handler+0x4>

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 f96a 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <DMA1_Stream5_IRQHandler+0x10>)
 8000e0e:	f000 fc51 	bl	80016b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000d0 	.word	0x200000d0

08000e1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <USART2_IRQHandler+0x10>)
 8000e22:	f001 feb9 	bl	8002b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000008c 	.word	0x2000008c

08000e30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
	return 1;
 8000e34:	2301      	movs	r3, #1
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_kill>:

int _kill(int pid, int sig)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e4a:	f002 ff49 	bl	8003ce0 <__errno>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2216      	movs	r2, #22
 8000e52:	601a      	str	r2, [r3, #0]
	return -1;
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <_exit>:

void _exit (int status)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ffe7 	bl	8000e40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e72:	e7fe      	b.n	8000e72 <_exit+0x12>

08000e74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e00a      	b.n	8000e9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e86:	f3af 8000 	nop.w
 8000e8a:	4601      	mov	r1, r0
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	b2ca      	uxtb	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dbf0      	blt.n	8000e86 <_read+0x12>
	}

return len;
 8000ea4:	687b      	ldr	r3, [r7, #4]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	e009      	b.n	8000ed4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	60ba      	str	r2, [r7, #8]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf1      	blt.n	8000ec0 <_write+0x12>
	}
	return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_close>:

int _close(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
	return -1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_isatty>:

int _isatty(int file)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	return 1;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f80:	f002 feae 	bl	8003ce0 <__errno>
 8000f84:	4603      	mov	r3, r0
 8000f86:	220c      	movs	r2, #12
 8000f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f8e:	e009      	b.n	8000fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <_sbrk+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20020000 	.word	0x20020000
 8000fb0:	00004000 	.word	0x00004000
 8000fb4:	200003dc 	.word	0x200003dc
 8000fb8:	200003f8 	.word	0x200003f8

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001018 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ffc:	4c0b      	ldr	r4, [pc, #44]	; (800102c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800100a:	f7ff ffd7 	bl	8000fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100e:	f002 fe7f 	bl	8003d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fbcd 	bl	80007b0 <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001024:	08005664 	.word	0x08005664
  ldr r2, =_sbss
 8001028:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800102c:	200003f4 	.word	0x200003f4

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <HAL_Init+0x40>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <HAL_Init+0x40>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800104e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_Init+0x40>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f94f 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f808 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fe02 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f967 	bl	800136a <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b4:	f000 f92f 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	200003e0 	.word	0x200003e0

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	200003e0 	.word	0x200003e0

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffde 	bl	8001100 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4907      	ldr	r1, [pc, #28]	; (80011fc <__NVIC_EnableIRQ+0x38>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff29 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff3e 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff31 	bl	80011c4 <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa2 	bl	80012bc <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff feb6 	bl	8001100 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e099      	b.n	80014d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2202      	movs	r2, #2
 80013a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c0:	e00f      	b.n	80013e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c2:	f7ff fe9d 	bl	8001100 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d908      	bls.n	80013e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2220      	movs	r2, #32
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2203      	movs	r2, #3
 80013da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e078      	b.n	80014d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e8      	bne.n	80013c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <HAL_DMA_Init+0x158>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800140e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4313      	orrs	r3, r2
 8001432:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	2b04      	cmp	r3, #4
 800143a:	d107      	bne.n	800144c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4313      	orrs	r3, r2
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4313      	orrs	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f023 0307 	bic.w	r3, r3, #7
 8001462:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	4313      	orrs	r3, r2
 800146c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	2b04      	cmp	r3, #4
 8001474:	d117      	bne.n	80014a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	4313      	orrs	r3, r2
 800147e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00e      	beq.n	80014a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fb01 	bl	8001a90 <DMA_CheckFifoParam>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2240      	movs	r2, #64	; 0x40
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014a2:	2301      	movs	r3, #1
 80014a4:	e016      	b.n	80014d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 fab8 	bl	8001a24 <DMA_CalcBaseAndBitshift>
 80014b4:	4603      	mov	r3, r0
 80014b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014bc:	223f      	movs	r2, #63	; 0x3f
 80014be:	409a      	lsls	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	f010803f 	.word	0xf010803f

080014e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_DMA_Start_IT+0x26>
 8001502:	2302      	movs	r3, #2
 8001504:	e040      	b.n	8001588 <HAL_DMA_Start_IT+0xa8>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d12f      	bne.n	800157a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2202      	movs	r2, #2
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 fa4a 	bl	80019c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001538:	223f      	movs	r2, #63	; 0x3f
 800153a:	409a      	lsls	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0216 	orr.w	r2, r2, #22
 800154e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d007      	beq.n	8001568 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0208 	orr.w	r2, r2, #8
 8001566:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e005      	b.n	8001586 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001582:	2302      	movs	r3, #2
 8001584:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001586:	7dfb      	ldrb	r3, [r7, #23]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800159e:	f7ff fdaf 	bl	8001100 <HAL_GetTick>
 80015a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d008      	beq.n	80015c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2280      	movs	r2, #128	; 0x80
 80015b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e052      	b.n	8001668 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0216 	bic.w	r2, r2, #22
 80015d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <HAL_DMA_Abort+0x62>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0208 	bic.w	r2, r2, #8
 8001600:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0201 	bic.w	r2, r2, #1
 8001610:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001612:	e013      	b.n	800163c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001614:	f7ff fd74 	bl	8001100 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b05      	cmp	r3, #5
 8001620:	d90c      	bls.n	800163c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2220      	movs	r2, #32
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2203      	movs	r2, #3
 800162c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e015      	b.n	8001668 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1e4      	bne.n	8001614 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	223f      	movs	r2, #63	; 0x3f
 8001650:	409a      	lsls	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d004      	beq.n	800168e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00c      	b.n	80016a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2205      	movs	r2, #5
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016c0:	4b8e      	ldr	r3, [pc, #568]	; (80018fc <HAL_DMA_IRQHandler+0x248>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a8e      	ldr	r2, [pc, #568]	; (8001900 <HAL_DMA_IRQHandler+0x24c>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0a9b      	lsrs	r3, r3, #10
 80016cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	2208      	movs	r2, #8
 80016e0:	409a      	lsls	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d01a      	beq.n	8001720 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d013      	beq.n	8001720 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0204 	bic.w	r2, r2, #4
 8001706:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170c:	2208      	movs	r2, #8
 800170e:	409a      	lsls	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	2201      	movs	r2, #1
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d012      	beq.n	8001756 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	2201      	movs	r2, #1
 8001744:	409a      	lsls	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174e:	f043 0202 	orr.w	r2, r3, #2
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175a:	2204      	movs	r2, #4
 800175c:	409a      	lsls	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d012      	beq.n	800178c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00b      	beq.n	800178c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001778:	2204      	movs	r2, #4
 800177a:	409a      	lsls	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001784:	f043 0204 	orr.w	r2, r3, #4
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001790:	2210      	movs	r2, #16
 8001792:	409a      	lsls	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d043      	beq.n	8001824 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d03c      	beq.n	8001824 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ae:	2210      	movs	r2, #16
 80017b0:	409a      	lsls	r2, r3
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d018      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d108      	bne.n	80017e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d024      	beq.n	8001824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	4798      	blx	r3
 80017e2:	e01f      	b.n	8001824 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01b      	beq.n	8001824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
 80017f4:	e016      	b.n	8001824 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d107      	bne.n	8001814 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0208 	bic.w	r2, r2, #8
 8001812:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	2220      	movs	r2, #32
 800182a:	409a      	lsls	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 808f 	beq.w	8001954 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 8087 	beq.w	8001954 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184a:	2220      	movs	r2, #32
 800184c:	409a      	lsls	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b05      	cmp	r3, #5
 800185c:	d136      	bne.n	80018cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0216 	bic.w	r2, r2, #22
 800186c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800187c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	2b00      	cmp	r3, #0
 8001884:	d103      	bne.n	800188e <HAL_DMA_IRQHandler+0x1da>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0208 	bic.w	r2, r2, #8
 800189c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	223f      	movs	r2, #63	; 0x3f
 80018a4:	409a      	lsls	r2, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d07e      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
        }
        return;
 80018ca:	e079      	b.n	80019c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01d      	beq.n	8001916 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10d      	bne.n	8001904 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d031      	beq.n	8001954 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4798      	blx	r3
 80018f8:	e02c      	b.n	8001954 <HAL_DMA_IRQHandler+0x2a0>
 80018fa:	bf00      	nop
 80018fc:	20000000 	.word	0x20000000
 8001900:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001908:	2b00      	cmp	r3, #0
 800190a:	d023      	beq.n	8001954 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
 8001914:	e01e      	b.n	8001954 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10f      	bne.n	8001944 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0210 	bic.w	r2, r2, #16
 8001932:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	2b00      	cmp	r3, #0
 800195a:	d032      	beq.n	80019c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d022      	beq.n	80019ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2205      	movs	r2, #5
 800196c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	3301      	adds	r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	429a      	cmp	r2, r3
 800198a:	d307      	bcc.n	800199c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f2      	bne.n	8001980 <HAL_DMA_IRQHandler+0x2cc>
 800199a:	e000      	b.n	800199e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800199c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
 80019be:	e000      	b.n	80019c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80019c0:	bf00      	nop
    }
  }
}
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b40      	cmp	r3, #64	; 0x40
 80019f4:	d108      	bne.n	8001a08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a06:	e007      	b.n	8001a18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	60da      	str	r2, [r3, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3b10      	subs	r3, #16
 8001a34:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <DMA_CalcBaseAndBitshift+0x64>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a3e:	4a13      	ldr	r2, [pc, #76]	; (8001a8c <DMA_CalcBaseAndBitshift+0x68>)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d909      	bls.n	8001a66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a5a:	f023 0303 	bic.w	r3, r3, #3
 8001a5e:	1d1a      	adds	r2, r3, #4
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	659a      	str	r2, [r3, #88]	; 0x58
 8001a64:	e007      	b.n	8001a76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a6e:	f023 0303 	bic.w	r3, r3, #3
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	aaaaaaab 	.word	0xaaaaaaab
 8001a8c:	08005404 	.word	0x08005404

08001a90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d11f      	bne.n	8001aea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d856      	bhi.n	8001b5e <DMA_CheckFifoParam+0xce>
 8001ab0:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <DMA_CheckFifoParam+0x28>)
 8001ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab6:	bf00      	nop
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001adb 	.word	0x08001adb
 8001ac0:	08001ac9 	.word	0x08001ac9
 8001ac4:	08001b5f 	.word	0x08001b5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d046      	beq.n	8001b62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad8:	e043      	b.n	8001b62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ae2:	d140      	bne.n	8001b66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ae8:	e03d      	b.n	8001b66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001af2:	d121      	bne.n	8001b38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d837      	bhi.n	8001b6a <DMA_CheckFifoParam+0xda>
 8001afa:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <DMA_CheckFifoParam+0x70>)
 8001afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b00:	08001b11 	.word	0x08001b11
 8001b04:	08001b17 	.word	0x08001b17
 8001b08:	08001b11 	.word	0x08001b11
 8001b0c:	08001b29 	.word	0x08001b29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
      break;
 8001b14:	e030      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d025      	beq.n	8001b6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b26:	e022      	b.n	8001b6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b30:	d11f      	bne.n	8001b72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b36:	e01c      	b.n	8001b72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d903      	bls.n	8001b46 <DMA_CheckFifoParam+0xb6>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d003      	beq.n	8001b4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b44:	e018      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
      break;
 8001b4a:	e015      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00e      	beq.n	8001b76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b5c:	e00b      	b.n	8001b76 <DMA_CheckFifoParam+0xe6>
      break;
 8001b5e:	bf00      	nop
 8001b60:	e00a      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      break;
 8001b62:	bf00      	nop
 8001b64:	e008      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      break;
 8001b66:	bf00      	nop
 8001b68:	e006      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      break;
 8001b6a:	bf00      	nop
 8001b6c:	e004      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      break;
 8001b6e:	bf00      	nop
 8001b70:	e002      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b72:	bf00      	nop
 8001b74:	e000      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      break;
 8001b76:	bf00      	nop
    }
  } 
  
  return status; 
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop

08001b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	e165      	b.n	8001e70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	f040 8154 	bne.w	8001e6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d005      	beq.n	8001bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d130      	bne.n	8001c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	2203      	movs	r2, #3
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c10:	2201      	movs	r2, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 0201 	and.w	r2, r3, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d017      	beq.n	8001c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d123      	bne.n	8001ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	08da      	lsrs	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3208      	adds	r2, #8
 8001cc6:	69b9      	ldr	r1, [r7, #24]
 8001cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80ae 	beq.w	8001e6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a5c      	ldr	r2, [pc, #368]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2a:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <HAL_GPIO_Init+0x304>)
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4f      	ldr	r2, [pc, #316]	; (8001e90 <HAL_GPIO_Init+0x308>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d025      	beq.n	8001da2 <HAL_GPIO_Init+0x21a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4e      	ldr	r2, [pc, #312]	; (8001e94 <HAL_GPIO_Init+0x30c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01f      	beq.n	8001d9e <HAL_GPIO_Init+0x216>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_GPIO_Init+0x310>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <HAL_GPIO_Init+0x212>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4c      	ldr	r2, [pc, #304]	; (8001e9c <HAL_GPIO_Init+0x314>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_GPIO_Init+0x20e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <HAL_GPIO_Init+0x318>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00d      	beq.n	8001d92 <HAL_GPIO_Init+0x20a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <HAL_GPIO_Init+0x31c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <HAL_GPIO_Init+0x206>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a49      	ldr	r2, [pc, #292]	; (8001ea8 <HAL_GPIO_Init+0x320>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_GPIO_Init+0x202>
 8001d86:	2306      	movs	r3, #6
 8001d88:	e00c      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d8a:	2307      	movs	r3, #7
 8001d8c:	e00a      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d8e:	2305      	movs	r3, #5
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d92:	2304      	movs	r3, #4
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001da2:	2300      	movs	r3, #0
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db4:	4935      	ldr	r1, [pc, #212]	; (8001e8c <HAL_GPIO_Init+0x304>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dec:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e10:	4a26      	ldr	r2, [pc, #152]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e64:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	f67f ae96 	bls.w	8001ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020c00 	.word	0x40020c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40021400 	.word	0x40021400
 8001ea8:	40021800 	.word	0x40021800
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0cc      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b68      	ldr	r3, [pc, #416]	; (800209c <HAL_RCC_ClockConfig+0x1b8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d90c      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b65      	ldr	r3, [pc, #404]	; (800209c <HAL_RCC_ClockConfig+0x1b8>)
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b63      	ldr	r3, [pc, #396]	; (800209c <HAL_RCC_ClockConfig+0x1b8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0b8      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a58      	ldr	r2, [pc, #352]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	494d      	ldr	r1, [pc, #308]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d044      	beq.n	8002004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d119      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e07f      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d003      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e06f      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e067      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc2:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4934      	ldr	r1, [pc, #208]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd4:	f7ff f894 	bl	8001100 <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fdc:	f7ff f890 	bl	8001100 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e04f      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 020c 	and.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	429a      	cmp	r2, r3
 8002002:	d1eb      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <HAL_RCC_ClockConfig+0x1b8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d20c      	bcs.n	800202c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e032      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4916      	ldr	r1, [pc, #88]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	490e      	ldr	r1, [pc, #56]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800206a:	f000 f855 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 800206e:	4602      	mov	r2, r0
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	490a      	ldr	r1, [pc, #40]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	5ccb      	ldrb	r3, [r1, r3]
 800207e:	fa22 f303 	lsr.w	r3, r2, r3
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x1c8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fff4 	bl	8001078 <HAL_InitTick>

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023c00 	.word	0x40023c00
 80020a0:	40023800 	.word	0x40023800
 80020a4:	080053ec 	.word	0x080053ec
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000000 	.word	0x20000000

080020c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020cc:	f7ff fff0 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	0a9b      	lsrs	r3, r3, #10
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4903      	ldr	r1, [pc, #12]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40023800 	.word	0x40023800
 80020ec:	080053fc 	.word	0x080053fc

080020f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020f4:	f7ff ffdc 	bl	80020b0 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0b5b      	lsrs	r3, r3, #13
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4903      	ldr	r1, [pc, #12]	; (8002114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	080053fc 	.word	0x080053fc

08002118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800211c:	b0a6      	sub	sp, #152	; 0x98
 800211e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800213e:	4bc8      	ldr	r3, [pc, #800]	; (8002460 <HAL_RCC_GetSysClockFreq+0x348>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b0c      	cmp	r3, #12
 8002148:	f200 817e 	bhi.w	8002448 <HAL_RCC_GetSysClockFreq+0x330>
 800214c:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <HAL_RCC_GetSysClockFreq+0x3c>)
 800214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002152:	bf00      	nop
 8002154:	08002189 	.word	0x08002189
 8002158:	08002449 	.word	0x08002449
 800215c:	08002449 	.word	0x08002449
 8002160:	08002449 	.word	0x08002449
 8002164:	08002191 	.word	0x08002191
 8002168:	08002449 	.word	0x08002449
 800216c:	08002449 	.word	0x08002449
 8002170:	08002449 	.word	0x08002449
 8002174:	08002199 	.word	0x08002199
 8002178:	08002449 	.word	0x08002449
 800217c:	08002449 	.word	0x08002449
 8002180:	08002449 	.word	0x08002449
 8002184:	08002303 	.word	0x08002303
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002188:	4bb6      	ldr	r3, [pc, #728]	; (8002464 <HAL_RCC_GetSysClockFreq+0x34c>)
 800218a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800218e:	e15f      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002190:	4bb5      	ldr	r3, [pc, #724]	; (8002468 <HAL_RCC_GetSysClockFreq+0x350>)
 8002192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002196:	e15b      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002198:	4bb1      	ldr	r3, [pc, #708]	; (8002460 <HAL_RCC_GetSysClockFreq+0x348>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a4:	4bae      	ldr	r3, [pc, #696]	; (8002460 <HAL_RCC_GetSysClockFreq+0x348>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d031      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b0:	4bab      	ldr	r3, [pc, #684]	; (8002460 <HAL_RCC_GetSysClockFreq+0x348>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	099b      	lsrs	r3, r3, #6
 80021b6:	2200      	movs	r2, #0
 80021b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80021ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c2:	663b      	str	r3, [r7, #96]	; 0x60
 80021c4:	2300      	movs	r3, #0
 80021c6:	667b      	str	r3, [r7, #100]	; 0x64
 80021c8:	4ba7      	ldr	r3, [pc, #668]	; (8002468 <HAL_RCC_GetSysClockFreq+0x350>)
 80021ca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80021ce:	462a      	mov	r2, r5
 80021d0:	fb03 f202 	mul.w	r2, r3, r2
 80021d4:	2300      	movs	r3, #0
 80021d6:	4621      	mov	r1, r4
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	4aa2      	ldr	r2, [pc, #648]	; (8002468 <HAL_RCC_GetSysClockFreq+0x350>)
 80021e0:	4621      	mov	r1, r4
 80021e2:	fba1 1202 	umull	r1, r2, r1, r2
 80021e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021e8:	460a      	mov	r2, r1
 80021ea:	67ba      	str	r2, [r7, #120]	; 0x78
 80021ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80021ee:	4413      	add	r3, r2
 80021f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021f6:	2200      	movs	r2, #0
 80021f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80021fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80021fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002200:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002204:	f7fe f85c 	bl	80002c0 <__aeabi_uldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4613      	mov	r3, r2
 800220e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002212:	e064      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002214:	4b92      	ldr	r3, [pc, #584]	; (8002460 <HAL_RCC_GetSysClockFreq+0x348>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	2200      	movs	r2, #0
 800221c:	653b      	str	r3, [r7, #80]	; 0x50
 800221e:	657a      	str	r2, [r7, #84]	; 0x54
 8002220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002226:	64bb      	str	r3, [r7, #72]	; 0x48
 8002228:	2300      	movs	r3, #0
 800222a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800222c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002230:	4622      	mov	r2, r4
 8002232:	462b      	mov	r3, r5
 8002234:	f04f 0000 	mov.w	r0, #0
 8002238:	f04f 0100 	mov.w	r1, #0
 800223c:	0159      	lsls	r1, r3, #5
 800223e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002242:	0150      	lsls	r0, r2, #5
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4621      	mov	r1, r4
 800224a:	1a51      	subs	r1, r2, r1
 800224c:	6139      	str	r1, [r7, #16]
 800224e:	4629      	mov	r1, r5
 8002250:	eb63 0301 	sbc.w	r3, r3, r1
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002262:	4659      	mov	r1, fp
 8002264:	018b      	lsls	r3, r1, #6
 8002266:	4651      	mov	r1, sl
 8002268:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800226c:	4651      	mov	r1, sl
 800226e:	018a      	lsls	r2, r1, #6
 8002270:	4651      	mov	r1, sl
 8002272:	ebb2 0801 	subs.w	r8, r2, r1
 8002276:	4659      	mov	r1, fp
 8002278:	eb63 0901 	sbc.w	r9, r3, r1
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002288:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800228c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002290:	4690      	mov	r8, r2
 8002292:	4699      	mov	r9, r3
 8002294:	4623      	mov	r3, r4
 8002296:	eb18 0303 	adds.w	r3, r8, r3
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	462b      	mov	r3, r5
 800229e:	eb49 0303 	adc.w	r3, r9, r3
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022b0:	4629      	mov	r1, r5
 80022b2:	028b      	lsls	r3, r1, #10
 80022b4:	4621      	mov	r1, r4
 80022b6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022ba:	4621      	mov	r1, r4
 80022bc:	028a      	lsls	r2, r1, #10
 80022be:	4610      	mov	r0, r2
 80022c0:	4619      	mov	r1, r3
 80022c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022c6:	2200      	movs	r2, #0
 80022c8:	643b      	str	r3, [r7, #64]	; 0x40
 80022ca:	647a      	str	r2, [r7, #68]	; 0x44
 80022cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022d0:	f7fd fff6 	bl	80002c0 <__aeabi_uldivmod>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4613      	mov	r3, r2
 80022da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022de:	4b60      	ldr	r3, [pc, #384]	; (8002460 <HAL_RCC_GetSysClockFreq+0x348>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	0c1b      	lsrs	r3, r3, #16
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	3301      	adds	r3, #1
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80022f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002300:	e0a6      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002302:	4b57      	ldr	r3, [pc, #348]	; (8002460 <HAL_RCC_GetSysClockFreq+0x348>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800230a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230e:	4b54      	ldr	r3, [pc, #336]	; (8002460 <HAL_RCC_GetSysClockFreq+0x348>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d02a      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231a:	4b51      	ldr	r3, [pc, #324]	; (8002460 <HAL_RCC_GetSysClockFreq+0x348>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	2200      	movs	r2, #0
 8002322:	63bb      	str	r3, [r7, #56]	; 0x38
 8002324:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800232c:	2100      	movs	r1, #0
 800232e:	4b4e      	ldr	r3, [pc, #312]	; (8002468 <HAL_RCC_GetSysClockFreq+0x350>)
 8002330:	fb03 f201 	mul.w	r2, r3, r1
 8002334:	2300      	movs	r3, #0
 8002336:	fb00 f303 	mul.w	r3, r0, r3
 800233a:	4413      	add	r3, r2
 800233c:	4a4a      	ldr	r2, [pc, #296]	; (8002468 <HAL_RCC_GetSysClockFreq+0x350>)
 800233e:	fba0 1202 	umull	r1, r2, r0, r2
 8002342:	677a      	str	r2, [r7, #116]	; 0x74
 8002344:	460a      	mov	r2, r1
 8002346:	673a      	str	r2, [r7, #112]	; 0x70
 8002348:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800234a:	4413      	add	r3, r2
 800234c:	677b      	str	r3, [r7, #116]	; 0x74
 800234e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002352:	2200      	movs	r2, #0
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
 8002356:	637a      	str	r2, [r7, #52]	; 0x34
 8002358:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800235c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002360:	f7fd ffae 	bl	80002c0 <__aeabi_uldivmod>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4613      	mov	r3, r2
 800236a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800236e:	e05b      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_RCC_GetSysClockFreq+0x348>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	099b      	lsrs	r3, r3, #6
 8002376:	2200      	movs	r2, #0
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
 800237a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002382:	623b      	str	r3, [r7, #32]
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
 8002388:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800238c:	4642      	mov	r2, r8
 800238e:	464b      	mov	r3, r9
 8002390:	f04f 0000 	mov.w	r0, #0
 8002394:	f04f 0100 	mov.w	r1, #0
 8002398:	0159      	lsls	r1, r3, #5
 800239a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800239e:	0150      	lsls	r0, r2, #5
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4641      	mov	r1, r8
 80023a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80023aa:	4649      	mov	r1, r9
 80023ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023c4:	ebb2 040a 	subs.w	r4, r2, sl
 80023c8:	eb63 050b 	sbc.w	r5, r3, fp
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	00eb      	lsls	r3, r5, #3
 80023d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023da:	00e2      	lsls	r2, r4, #3
 80023dc:	4614      	mov	r4, r2
 80023de:	461d      	mov	r5, r3
 80023e0:	4643      	mov	r3, r8
 80023e2:	18e3      	adds	r3, r4, r3
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	464b      	mov	r3, r9
 80023e8:	eb45 0303 	adc.w	r3, r5, r3
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023fa:	4629      	mov	r1, r5
 80023fc:	028b      	lsls	r3, r1, #10
 80023fe:	4621      	mov	r1, r4
 8002400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002404:	4621      	mov	r1, r4
 8002406:	028a      	lsls	r2, r1, #10
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002410:	2200      	movs	r2, #0
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	61fa      	str	r2, [r7, #28]
 8002416:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800241a:	f7fd ff51 	bl	80002c0 <__aeabi_uldivmod>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4613      	mov	r3, r2
 8002424:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002428:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <HAL_RCC_GetSysClockFreq+0x348>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	0f1b      	lsrs	r3, r3, #28
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002436:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800243a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800243e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002446:	e003      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_RCC_GetSysClockFreq+0x34c>)
 800244a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800244e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002454:	4618      	mov	r0, r3
 8002456:	3798      	adds	r7, #152	; 0x98
 8002458:	46bd      	mov	sp, r7
 800245a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	00f42400 	.word	0x00f42400
 8002468:	017d7840 	.word	0x017d7840

0800246c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e28d      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8083 	beq.w	8002592 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800248c:	4b94      	ldr	r3, [pc, #592]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b04      	cmp	r3, #4
 8002496:	d019      	beq.n	80024cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002498:	4b91      	ldr	r3, [pc, #580]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024a4:	4b8e      	ldr	r3, [pc, #568]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b0:	d00c      	beq.n	80024cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b2:	4b8b      	ldr	r3, [pc, #556]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d112      	bne.n	80024e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024be:	4b88      	ldr	r3, [pc, #544]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ca:	d10b      	bne.n	80024e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	4b84      	ldr	r3, [pc, #528]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d05b      	beq.n	8002590 <HAL_RCC_OscConfig+0x124>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d157      	bne.n	8002590 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e25a      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ec:	d106      	bne.n	80024fc <HAL_RCC_OscConfig+0x90>
 80024ee:	4b7c      	ldr	r3, [pc, #496]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a7b      	ldr	r2, [pc, #492]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e01d      	b.n	8002538 <HAL_RCC_OscConfig+0xcc>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0xb4>
 8002506:	4b76      	ldr	r3, [pc, #472]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a75      	ldr	r2, [pc, #468]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800250c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a72      	ldr	r2, [pc, #456]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e00b      	b.n	8002538 <HAL_RCC_OscConfig+0xcc>
 8002520:	4b6f      	ldr	r3, [pc, #444]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a6e      	ldr	r2, [pc, #440]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6b      	ldr	r2, [pc, #428]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d013      	beq.n	8002568 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fdde 	bl	8001100 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002548:	f7fe fdda 	bl	8001100 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e21f      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b61      	ldr	r3, [pc, #388]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0xdc>
 8002566:	e014      	b.n	8002592 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe fdca 	bl	8001100 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002570:	f7fe fdc6 	bl	8001100 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e20b      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	4b57      	ldr	r3, [pc, #348]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x104>
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d06f      	beq.n	800267e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800259e:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d017      	beq.n	80025da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025aa:	4b4d      	ldr	r3, [pc, #308]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d105      	bne.n	80025c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025b6:	4b4a      	ldr	r3, [pc, #296]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d11c      	bne.n	8002608 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ce:	4b44      	ldr	r3, [pc, #272]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_RCC_OscConfig+0x186>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1d3      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4937      	ldr	r1, [pc, #220]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	e03a      	b.n	800267e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002610:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <HAL_RCC_OscConfig+0x278>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fd73 	bl	8001100 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261e:	f7fe fd6f 	bl	8001100 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1b4      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4925      	ldr	r1, [pc, #148]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HAL_RCC_OscConfig+0x278>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fd52 	bl	8001100 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002660:	f7fe fd4e 	bl	8001100 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e193      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d036      	beq.n	80026f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d016      	beq.n	80026c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_RCC_OscConfig+0x27c>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe fd32 	bl	8001100 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a0:	f7fe fd2e 	bl	8001100 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e173      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80026b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x234>
 80026be:	e01b      	b.n	80026f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_RCC_OscConfig+0x27c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7fe fd1b 	bl	8001100 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	e00e      	b.n	80026ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ce:	f7fe fd17 	bl	8001100 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d907      	bls.n	80026ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e15c      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
 80026e0:	40023800 	.word	0x40023800
 80026e4:	42470000 	.word	0x42470000
 80026e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	4b8a      	ldr	r3, [pc, #552]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 80026ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1ea      	bne.n	80026ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8097 	beq.w	8002834 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270a:	4b83      	ldr	r3, [pc, #524]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	4b7f      	ldr	r3, [pc, #508]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a7e      	ldr	r2, [pc, #504]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
 8002726:	4b7c      	ldr	r3, [pc, #496]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	4b79      	ldr	r3, [pc, #484]	; (800291c <HAL_RCC_OscConfig+0x4b0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d118      	bne.n	8002774 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x4b0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a75      	ldr	r2, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x4b0>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274e:	f7fe fcd7 	bl	8001100 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002756:	f7fe fcd3 	bl	8001100 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e118      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b6c      	ldr	r3, [pc, #432]	; (800291c <HAL_RCC_OscConfig+0x4b0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x31e>
 800277c:	4b66      	ldr	r3, [pc, #408]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a65      	ldr	r2, [pc, #404]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	e01c      	b.n	80027c4 <HAL_RCC_OscConfig+0x358>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b05      	cmp	r3, #5
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x340>
 8002792:	4b61      	ldr	r3, [pc, #388]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a60      	ldr	r2, [pc, #384]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	4b5e      	ldr	r3, [pc, #376]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a5d      	ldr	r2, [pc, #372]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0x358>
 80027ac:	4b5a      	ldr	r3, [pc, #360]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a59      	ldr	r2, [pc, #356]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
 80027b8:	4b57      	ldr	r3, [pc, #348]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	4a56      	ldr	r2, [pc, #344]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 80027be:	f023 0304 	bic.w	r3, r3, #4
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d015      	beq.n	80027f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7fe fc98 	bl	8001100 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7fe fc94 	bl	8001100 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0d7      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ea:	4b4b      	ldr	r3, [pc, #300]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0ee      	beq.n	80027d4 <HAL_RCC_OscConfig+0x368>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe fc82 	bl	8001100 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7fe fc7e 	bl	8001100 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e0c1      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002816:	4b40      	ldr	r3, [pc, #256]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ee      	bne.n	8002800 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002828:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	4a3a      	ldr	r2, [pc, #232]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 800282e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002832:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80ad 	beq.w	8002998 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800283e:	4b36      	ldr	r3, [pc, #216]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b08      	cmp	r3, #8
 8002848:	d060      	beq.n	800290c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d145      	bne.n	80028de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b33      	ldr	r3, [pc, #204]	; (8002920 <HAL_RCC_OscConfig+0x4b4>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fc52 	bl	8001100 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fc4e 	bl	8001100 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e093      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	4b29      	ldr	r3, [pc, #164]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	019b      	lsls	r3, r3, #6
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	3b01      	subs	r3, #1
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	071b      	lsls	r3, r3, #28
 80028aa:	491b      	ldr	r1, [pc, #108]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCC_OscConfig+0x4b4>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fc23 	bl	8001100 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028be:	f7fe fc1f 	bl	8001100 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e064      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x452>
 80028dc:	e05c      	b.n	8002998 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_RCC_OscConfig+0x4b4>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe fc0c 	bl	8001100 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe fc08 	bl	8001100 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e04d      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_RCC_OscConfig+0x4ac>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x480>
 800290a:	e045      	b.n	8002998 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e040      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
 8002918:	40023800 	.word	0x40023800
 800291c:	40007000 	.word	0x40007000
 8002920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002924:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <HAL_RCC_OscConfig+0x538>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d030      	beq.n	8002994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d129      	bne.n	8002994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d122      	bne.n	8002994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800295a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800295c:	4293      	cmp	r3, r2
 800295e:	d119      	bne.n	8002994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	3b01      	subs	r3, #1
 800296e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d10f      	bne.n	8002994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d107      	bne.n	8002994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800

080029a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e03f      	b.n	8002a3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe f976 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2224      	movs	r2, #36	; 0x24
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fee1 	bl	80037b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d130      	bne.n	8002abe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_UART_Transmit_IT+0x26>
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e029      	b.n	8002ac0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_UART_Transmit_IT+0x38>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e022      	b.n	8002ac0 <HAL_UART_Transmit_IT+0x7e>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2221      	movs	r2, #33	; 0x21
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ab8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e000      	b.n	8002ac0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
  }
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08c      	sub	sp, #48	; 0x30
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d152      	bne.n	8002b8c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e04b      	b.n	8002b8e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e044      	b.n	8002b8e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	461a      	mov	r2, r3
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fbeb 	bl	80032f4 <UART_Start_Receive_DMA>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002b24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d12c      	bne.n	8002b86 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d125      	bne.n	8002b80 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	330c      	adds	r3, #12
 8002b50:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	e853 3f00 	ldrex	r3, [r3]
 8002b58:	617b      	str	r3, [r7, #20]
   return(result);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f043 0310 	orr.w	r3, r3, #16
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	330c      	adds	r3, #12
 8002b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b6a:	627a      	str	r2, [r7, #36]	; 0x24
 8002b6c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	6a39      	ldr	r1, [r7, #32]
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e5      	bne.n	8002b4a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002b7e:	e002      	b.n	8002b86 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b8a:	e000      	b.n	8002b8e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3730      	adds	r7, #48	; 0x30
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b0ba      	sub	sp, #232	; 0xe8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_UART_IRQHandler+0x66>
 8002bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fd21 	bl	800363e <UART_Receive_IT>
      return;
 8002bfc:	e256      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80de 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x22c>
 8002c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80d1 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_UART_IRQHandler+0xae>
 8002c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f043 0201 	orr.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_UART_IRQHandler+0xd2>
 8002c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f043 0202 	orr.w	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_UART_IRQHandler+0xf6>
 8002c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f043 0204 	orr.w	r2, r3, #4
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d011      	beq.n	8002cbe <HAL_UART_IRQHandler+0x126>
 8002c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0208 	orr.w	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 81ed 	beq.w	80030a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x14e>
 8002cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fcac 	bl	800363e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <HAL_UART_IRQHandler+0x17a>
 8002d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d04f      	beq.n	8002db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fbb4 	bl	8003480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b40      	cmp	r3, #64	; 0x40
 8002d24:	d141      	bne.n	8002daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3314      	adds	r3, #20
 8002d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3314      	adds	r3, #20
 8002d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1d9      	bne.n	8002d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d013      	beq.n	8002da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	4a7d      	ldr	r2, [pc, #500]	; (8002f74 <HAL_UART_IRQHandler+0x3dc>)
 8002d80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fc72 	bl	8001670 <HAL_DMA_Abort_IT>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da0:	e00e      	b.n	8002dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f9a4 	bl	80030f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da8:	e00a      	b.n	8002dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f9a0 	bl	80030f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	e006      	b.n	8002dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f99c 	bl	80030f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002dbe:	e170      	b.n	80030a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	bf00      	nop
    return;
 8002dc2:	e16e      	b.n	80030a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	f040 814a 	bne.w	8003062 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8143 	beq.w	8003062 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 813c 	beq.w	8003062 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	f040 80b4 	bne.w	8002f78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8140 	beq.w	80030a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	f080 8139 	bcs.w	80030a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e46:	f000 8088 	beq.w	8002f5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1d9      	bne.n	8002e4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3314      	adds	r3, #20
 8002eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ec6:	e841 2300 	strex	r3, r2, [r1]
 8002eca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e1      	bne.n	8002e96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3314      	adds	r3, #20
 8002ed8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ef6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ef8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002efc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002efe:	e841 2300 	strex	r3, r2, [r1]
 8002f02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e3      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f2a:	f023 0310 	bic.w	r3, r3, #16
 8002f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e3      	bne.n	8002f18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fb1b 	bl	8001590 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fdac 	bl	8000ac8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f70:	e099      	b.n	80030a6 <HAL_UART_IRQHandler+0x50e>
 8002f72:	bf00      	nop
 8002f74:	08003547 	.word	0x08003547
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 808b 	beq.w	80030aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8086 	beq.w	80030aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002fc2:	647a      	str	r2, [r7, #68]	; 0x44
 8002fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e3      	bne.n	8002f9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3314      	adds	r3, #20
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	e853 3f00 	ldrex	r3, [r3]
 8002fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3314      	adds	r3, #20
 8002ff6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ffa:	633a      	str	r2, [r7, #48]	; 0x30
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e3      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	60fb      	str	r3, [r7, #12]
   return(result);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0310 	bic.w	r3, r3, #16
 8003032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	330c      	adds	r3, #12
 800303c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003040:	61fa      	str	r2, [r7, #28]
 8003042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	69b9      	ldr	r1, [r7, #24]
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	e841 2300 	strex	r3, r2, [r1]
 800304c:	617b      	str	r3, [r7, #20]
   return(result);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e3      	bne.n	800301c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003058:	4619      	mov	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd fd34 	bl	8000ac8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003060:	e023      	b.n	80030aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_UART_IRQHandler+0x4ea>
 800306e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fa77 	bl	800356e <UART_Transmit_IT>
    return;
 8003080:	e014      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00e      	beq.n	80030ac <HAL_UART_IRQHandler+0x514>
 800308e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fab7 	bl	800360e <UART_EndTransmit_IT>
    return;
 80030a0:	e004      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
    return;
 80030a2:	bf00      	nop
 80030a4:	e002      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
      return;
 80030a6:	bf00      	nop
 80030a8:	e000      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
      return;
 80030aa:	bf00      	nop
  }
}
 80030ac:	37e8      	adds	r7, #232	; 0xe8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop

080030b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b09c      	sub	sp, #112	; 0x70
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d172      	bne.n	8003206 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003122:	2200      	movs	r2, #0
 8003124:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800313c:	66bb      	str	r3, [r7, #104]	; 0x68
 800313e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003146:	65ba      	str	r2, [r7, #88]	; 0x58
 8003148:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800314c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800314e:	e841 2300 	strex	r3, r2, [r1]
 8003152:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1e5      	bne.n	8003126 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3314      	adds	r3, #20
 8003160:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800316a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	667b      	str	r3, [r7, #100]	; 0x64
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3314      	adds	r3, #20
 8003178:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800317a:	647a      	str	r2, [r7, #68]	; 0x44
 800317c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e5      	bne.n	800315a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800318e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3314      	adds	r3, #20
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	623b      	str	r3, [r7, #32]
   return(result);
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a4:	663b      	str	r3, [r7, #96]	; 0x60
 80031a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3314      	adds	r3, #20
 80031ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031ae:	633a      	str	r2, [r7, #48]	; 0x30
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e5      	bne.n	800318e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d119      	bne.n	8003206 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	330c      	adds	r3, #12
 80031d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	e853 3f00 	ldrex	r3, [r3]
 80031e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f023 0310 	bic.w	r3, r3, #16
 80031e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	330c      	adds	r3, #12
 80031f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031f2:	61fa      	str	r2, [r7, #28]
 80031f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	69b9      	ldr	r1, [r7, #24]
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	617b      	str	r3, [r7, #20]
   return(result);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e5      	bne.n	80031d2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	2b01      	cmp	r3, #1
 800320c:	d106      	bne.n	800321c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800320e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003210:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003212:	4619      	mov	r1, r3
 8003214:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003216:	f7fd fc57 	bl	8000ac8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800321a:	e002      	b.n	8003222 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800321c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800321e:	f7ff ff53 	bl	80030c8 <HAL_UART_RxCpltCallback>
}
 8003222:	bf00      	nop
 8003224:	3770      	adds	r7, #112	; 0x70
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	2b01      	cmp	r3, #1
 800323e:	d108      	bne.n	8003252 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	b29b      	uxth	r3, r3
 8003248:	4619      	mov	r1, r3
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7fd fc3c 	bl	8000ac8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003250:	e002      	b.n	8003258 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff ff42 	bl	80030dc <HAL_UART_RxHalfCpltCallback>
}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b21      	cmp	r3, #33	; 0x21
 8003292:	d108      	bne.n	80032a6 <UART_DMAError+0x46>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2200      	movs	r2, #0
 800329e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80032a0:	68b8      	ldr	r0, [r7, #8]
 80032a2:	f000 f8c5 	bl	8003430 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b40      	cmp	r3, #64	; 0x40
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b22      	cmp	r3, #34	; 0x22
 80032c6:	d108      	bne.n	80032da <UART_DMAError+0x7a>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80032d4:	68b8      	ldr	r0, [r7, #8]
 80032d6:	f000 f8d3 	bl	8003480 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f043 0210 	orr.w	r2, r3, #16
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032e6:	68b8      	ldr	r0, [r7, #8]
 80032e8:	f7ff ff02 	bl	80030f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b098      	sub	sp, #96	; 0x60
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	4613      	mov	r3, r2
 8003300:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	88fa      	ldrh	r2, [r7, #6]
 800330c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2222      	movs	r2, #34	; 0x22
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	4a40      	ldr	r2, [pc, #256]	; (8003424 <UART_Start_Receive_DMA+0x130>)
 8003322:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	4a3f      	ldr	r2, [pc, #252]	; (8003428 <UART_Start_Receive_DMA+0x134>)
 800332a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	4a3e      	ldr	r2, [pc, #248]	; (800342c <UART_Start_Receive_DMA+0x138>)
 8003332:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	2200      	movs	r2, #0
 800333a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800333c:	f107 0308 	add.w	r3, r7, #8
 8003340:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	f7fe f8c4 	bl	80014e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d019      	beq.n	80033b2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800338e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003394:	65bb      	str	r3, [r7, #88]	; 0x58
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800339e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80033a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80033a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80033ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e5      	bne.n	800337e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3314      	adds	r3, #20
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	e853 3f00 	ldrex	r3, [r3]
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	657b      	str	r3, [r7, #84]	; 0x54
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3314      	adds	r3, #20
 80033d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033d2:	63ba      	str	r2, [r7, #56]	; 0x38
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e5      	bne.n	80033b2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3314      	adds	r3, #20
 80033ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	617b      	str	r3, [r7, #20]
   return(result);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033fc:	653b      	str	r3, [r7, #80]	; 0x50
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3314      	adds	r3, #20
 8003404:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003406:	627a      	str	r2, [r7, #36]	; 0x24
 8003408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	6a39      	ldr	r1, [r7, #32]
 800340c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	61fb      	str	r3, [r7, #28]
   return(result);
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e5      	bne.n	80033e6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3760      	adds	r7, #96	; 0x60
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	08003105 	.word	0x08003105
 8003428:	0800322b 	.word	0x0800322b
 800342c:	08003261 	.word	0x08003261

08003430 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	60bb      	str	r3, [r7, #8]
   return(result);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	61ba      	str	r2, [r7, #24]
 800345a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345c:	6979      	ldr	r1, [r7, #20]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	e841 2300 	strex	r3, r2, [r1]
 8003464:	613b      	str	r3, [r7, #16]
   return(result);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e5      	bne.n	8003438 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003474:	bf00      	nop
 8003476:	3724      	adds	r7, #36	; 0x24
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003480:	b480      	push	{r7}
 8003482:	b095      	sub	sp, #84	; 0x54
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	330c      	adds	r3, #12
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800349e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034a8:	643a      	str	r2, [r7, #64]	; 0x40
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e5      	bne.n	8003488 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3314      	adds	r3, #20
 80034c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	e853 3f00 	ldrex	r3, [r3]
 80034ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3314      	adds	r3, #20
 80034da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e4:	e841 2300 	strex	r3, r2, [r1]
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e5      	bne.n	80034bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d119      	bne.n	800352c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	60bb      	str	r3, [r7, #8]
   return(result);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f023 0310 	bic.w	r3, r3, #16
 800350e:	647b      	str	r3, [r7, #68]	; 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	330c      	adds	r3, #12
 8003516:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003518:	61ba      	str	r2, [r7, #24]
 800351a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351c:	6979      	ldr	r1, [r7, #20]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	e841 2300 	strex	r3, r2, [r1]
 8003524:	613b      	str	r3, [r7, #16]
   return(result);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e5      	bne.n	80034f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
}
 800353a:	bf00      	nop
 800353c:	3754      	adds	r7, #84	; 0x54
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff fdc5 	bl	80030f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b21      	cmp	r3, #33	; 0x21
 8003580:	d13e      	bne.n	8003600 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358a:	d114      	bne.n	80035b6 <UART_Transmit_IT+0x48>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d110      	bne.n	80035b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	1c9a      	adds	r2, r3, #2
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	621a      	str	r2, [r3, #32]
 80035b4:	e008      	b.n	80035c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	1c59      	adds	r1, r3, #1
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6211      	str	r1, [r2, #32]
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4619      	mov	r1, r3
 80035d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10f      	bne.n	80035fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003624:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff fd40 	bl	80030b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b08c      	sub	sp, #48	; 0x30
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b22      	cmp	r3, #34	; 0x22
 8003650:	f040 80ab 	bne.w	80037aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365c:	d117      	bne.n	800368e <UART_Receive_IT+0x50>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d113      	bne.n	800368e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003666:	2300      	movs	r3, #0
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367c:	b29a      	uxth	r2, r3
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	1c9a      	adds	r2, r3, #2
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
 800368c:	e026      	b.n	80036dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003694:	2300      	movs	r3, #0
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a0:	d007      	beq.n	80036b2 <UART_Receive_IT+0x74>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <UART_Receive_IT+0x82>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e008      	b.n	80036d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4619      	mov	r1, r3
 80036ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d15a      	bne.n	80037a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0220 	bic.w	r2, r2, #32
 80036fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800370e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	2b01      	cmp	r3, #1
 800372e:	d135      	bne.n	800379c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	330c      	adds	r3, #12
 800373c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	613b      	str	r3, [r7, #16]
   return(result);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f023 0310 	bic.w	r3, r3, #16
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	330c      	adds	r3, #12
 8003754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003756:	623a      	str	r2, [r7, #32]
 8003758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	69f9      	ldr	r1, [r7, #28]
 800375c:	6a3a      	ldr	r2, [r7, #32]
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	61bb      	str	r3, [r7, #24]
   return(result);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e5      	bne.n	8003736 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b10      	cmp	r3, #16
 8003776:	d10a      	bne.n	800378e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003792:	4619      	mov	r1, r3
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7fd f997 	bl	8000ac8 <HAL_UARTEx_RxEventCallback>
 800379a:	e002      	b.n	80037a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fc93 	bl	80030c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e002      	b.n	80037ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e000      	b.n	80037ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80037aa:	2302      	movs	r3, #2
  }
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3730      	adds	r7, #48	; 0x30
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b8:	b0c0      	sub	sp, #256	; 0x100
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	68d9      	ldr	r1, [r3, #12]
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	ea40 0301 	orr.w	r3, r0, r1
 80037dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800380c:	f021 010c 	bic.w	r1, r1, #12
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800381a:	430b      	orrs	r3, r1
 800381c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800381e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800382a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382e:	6999      	ldr	r1, [r3, #24]
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	ea40 0301 	orr.w	r3, r0, r1
 800383a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b8f      	ldr	r3, [pc, #572]	; (8003a80 <UART_SetConfig+0x2cc>)
 8003844:	429a      	cmp	r2, r3
 8003846:	d005      	beq.n	8003854 <UART_SetConfig+0xa0>
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b8d      	ldr	r3, [pc, #564]	; (8003a84 <UART_SetConfig+0x2d0>)
 8003850:	429a      	cmp	r2, r3
 8003852:	d104      	bne.n	800385e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003854:	f7fe fc4c 	bl	80020f0 <HAL_RCC_GetPCLK2Freq>
 8003858:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800385c:	e003      	b.n	8003866 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800385e:	f7fe fc33 	bl	80020c8 <HAL_RCC_GetPCLK1Freq>
 8003862:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003870:	f040 810c 	bne.w	8003a8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003878:	2200      	movs	r2, #0
 800387a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800387e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003882:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003886:	4622      	mov	r2, r4
 8003888:	462b      	mov	r3, r5
 800388a:	1891      	adds	r1, r2, r2
 800388c:	65b9      	str	r1, [r7, #88]	; 0x58
 800388e:	415b      	adcs	r3, r3
 8003890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003892:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003896:	4621      	mov	r1, r4
 8003898:	eb12 0801 	adds.w	r8, r2, r1
 800389c:	4629      	mov	r1, r5
 800389e:	eb43 0901 	adc.w	r9, r3, r1
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038b6:	4690      	mov	r8, r2
 80038b8:	4699      	mov	r9, r3
 80038ba:	4623      	mov	r3, r4
 80038bc:	eb18 0303 	adds.w	r3, r8, r3
 80038c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038c4:	462b      	mov	r3, r5
 80038c6:	eb49 0303 	adc.w	r3, r9, r3
 80038ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038e2:	460b      	mov	r3, r1
 80038e4:	18db      	adds	r3, r3, r3
 80038e6:	653b      	str	r3, [r7, #80]	; 0x50
 80038e8:	4613      	mov	r3, r2
 80038ea:	eb42 0303 	adc.w	r3, r2, r3
 80038ee:	657b      	str	r3, [r7, #84]	; 0x54
 80038f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038f8:	f7fc fce2 	bl	80002c0 <__aeabi_uldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4b61      	ldr	r3, [pc, #388]	; (8003a88 <UART_SetConfig+0x2d4>)
 8003902:	fba3 2302 	umull	r2, r3, r3, r2
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	011c      	lsls	r4, r3, #4
 800390a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800390e:	2200      	movs	r2, #0
 8003910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003914:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003918:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800391c:	4642      	mov	r2, r8
 800391e:	464b      	mov	r3, r9
 8003920:	1891      	adds	r1, r2, r2
 8003922:	64b9      	str	r1, [r7, #72]	; 0x48
 8003924:	415b      	adcs	r3, r3
 8003926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003928:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800392c:	4641      	mov	r1, r8
 800392e:	eb12 0a01 	adds.w	sl, r2, r1
 8003932:	4649      	mov	r1, r9
 8003934:	eb43 0b01 	adc.w	fp, r3, r1
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003944:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800394c:	4692      	mov	sl, r2
 800394e:	469b      	mov	fp, r3
 8003950:	4643      	mov	r3, r8
 8003952:	eb1a 0303 	adds.w	r3, sl, r3
 8003956:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800395a:	464b      	mov	r3, r9
 800395c:	eb4b 0303 	adc.w	r3, fp, r3
 8003960:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003970:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003974:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003978:	460b      	mov	r3, r1
 800397a:	18db      	adds	r3, r3, r3
 800397c:	643b      	str	r3, [r7, #64]	; 0x40
 800397e:	4613      	mov	r3, r2
 8003980:	eb42 0303 	adc.w	r3, r2, r3
 8003984:	647b      	str	r3, [r7, #68]	; 0x44
 8003986:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800398a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800398e:	f7fc fc97 	bl	80002c0 <__aeabi_uldivmod>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4611      	mov	r1, r2
 8003998:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <UART_SetConfig+0x2d4>)
 800399a:	fba3 2301 	umull	r2, r3, r3, r1
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	2264      	movs	r2, #100	; 0x64
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	1acb      	subs	r3, r1, r3
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039ae:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <UART_SetConfig+0x2d4>)
 80039b0:	fba3 2302 	umull	r2, r3, r3, r2
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039bc:	441c      	add	r4, r3
 80039be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039d0:	4642      	mov	r2, r8
 80039d2:	464b      	mov	r3, r9
 80039d4:	1891      	adds	r1, r2, r2
 80039d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80039d8:	415b      	adcs	r3, r3
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039e0:	4641      	mov	r1, r8
 80039e2:	1851      	adds	r1, r2, r1
 80039e4:	6339      	str	r1, [r7, #48]	; 0x30
 80039e6:	4649      	mov	r1, r9
 80039e8:	414b      	adcs	r3, r1
 80039ea:	637b      	str	r3, [r7, #52]	; 0x34
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039f8:	4659      	mov	r1, fp
 80039fa:	00cb      	lsls	r3, r1, #3
 80039fc:	4651      	mov	r1, sl
 80039fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a02:	4651      	mov	r1, sl
 8003a04:	00ca      	lsls	r2, r1, #3
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a14:	464b      	mov	r3, r9
 8003a16:	460a      	mov	r2, r1
 8003a18:	eb42 0303 	adc.w	r3, r2, r3
 8003a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a34:	460b      	mov	r3, r1
 8003a36:	18db      	adds	r3, r3, r3
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	eb42 0303 	adc.w	r3, r2, r3
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a4a:	f7fc fc39 	bl	80002c0 <__aeabi_uldivmod>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <UART_SetConfig+0x2d4>)
 8003a54:	fba3 1302 	umull	r1, r3, r3, r2
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	2164      	movs	r1, #100	; 0x64
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	3332      	adds	r3, #50	; 0x32
 8003a66:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <UART_SetConfig+0x2d4>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	f003 0207 	and.w	r2, r3, #7
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4422      	add	r2, r4
 8003a7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a7c:	e105      	b.n	8003c8a <UART_SetConfig+0x4d6>
 8003a7e:	bf00      	nop
 8003a80:	40011000 	.word	0x40011000
 8003a84:	40011400 	.word	0x40011400
 8003a88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a9e:	4642      	mov	r2, r8
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	1891      	adds	r1, r2, r2
 8003aa4:	6239      	str	r1, [r7, #32]
 8003aa6:	415b      	adcs	r3, r3
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aae:	4641      	mov	r1, r8
 8003ab0:	1854      	adds	r4, r2, r1
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	eb43 0501 	adc.w	r5, r3, r1
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	00eb      	lsls	r3, r5, #3
 8003ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ac6:	00e2      	lsls	r2, r4, #3
 8003ac8:	4614      	mov	r4, r2
 8003aca:	461d      	mov	r5, r3
 8003acc:	4643      	mov	r3, r8
 8003ace:	18e3      	adds	r3, r4, r3
 8003ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ad4:	464b      	mov	r3, r9
 8003ad6:	eb45 0303 	adc.w	r3, r5, r3
 8003ada:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003aea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003afa:	4629      	mov	r1, r5
 8003afc:	008b      	lsls	r3, r1, #2
 8003afe:	4621      	mov	r1, r4
 8003b00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b04:	4621      	mov	r1, r4
 8003b06:	008a      	lsls	r2, r1, #2
 8003b08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b0c:	f7fc fbd8 	bl	80002c0 <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4b60      	ldr	r3, [pc, #384]	; (8003c98 <UART_SetConfig+0x4e4>)
 8003b16:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	011c      	lsls	r4, r3, #4
 8003b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b30:	4642      	mov	r2, r8
 8003b32:	464b      	mov	r3, r9
 8003b34:	1891      	adds	r1, r2, r2
 8003b36:	61b9      	str	r1, [r7, #24]
 8003b38:	415b      	adcs	r3, r3
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b40:	4641      	mov	r1, r8
 8003b42:	1851      	adds	r1, r2, r1
 8003b44:	6139      	str	r1, [r7, #16]
 8003b46:	4649      	mov	r1, r9
 8003b48:	414b      	adcs	r3, r1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b58:	4659      	mov	r1, fp
 8003b5a:	00cb      	lsls	r3, r1, #3
 8003b5c:	4651      	mov	r1, sl
 8003b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b62:	4651      	mov	r1, sl
 8003b64:	00ca      	lsls	r2, r1, #3
 8003b66:	4610      	mov	r0, r2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	189b      	adds	r3, r3, r2
 8003b70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b74:	464b      	mov	r3, r9
 8003b76:	460a      	mov	r2, r1
 8003b78:	eb42 0303 	adc.w	r3, r2, r3
 8003b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b98:	4649      	mov	r1, r9
 8003b9a:	008b      	lsls	r3, r1, #2
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	008a      	lsls	r2, r1, #2
 8003ba6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003baa:	f7fc fb89 	bl	80002c0 <__aeabi_uldivmod>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <UART_SetConfig+0x4e4>)
 8003bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	2164      	movs	r1, #100	; 0x64
 8003bbc:	fb01 f303 	mul.w	r3, r1, r3
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	3332      	adds	r3, #50	; 0x32
 8003bc6:	4a34      	ldr	r2, [pc, #208]	; (8003c98 <UART_SetConfig+0x4e4>)
 8003bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd2:	441c      	add	r4, r3
 8003bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd8:	2200      	movs	r2, #0
 8003bda:	673b      	str	r3, [r7, #112]	; 0x70
 8003bdc:	677a      	str	r2, [r7, #116]	; 0x74
 8003bde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003be2:	4642      	mov	r2, r8
 8003be4:	464b      	mov	r3, r9
 8003be6:	1891      	adds	r1, r2, r2
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	415b      	adcs	r3, r3
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	1851      	adds	r1, r2, r1
 8003bf6:	6039      	str	r1, [r7, #0]
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	414b      	adcs	r3, r1
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c0a:	4659      	mov	r1, fp
 8003c0c:	00cb      	lsls	r3, r1, #3
 8003c0e:	4651      	mov	r1, sl
 8003c10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c14:	4651      	mov	r1, sl
 8003c16:	00ca      	lsls	r2, r1, #3
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4642      	mov	r2, r8
 8003c20:	189b      	adds	r3, r3, r2
 8003c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c24:	464b      	mov	r3, r9
 8003c26:	460a      	mov	r2, r1
 8003c28:	eb42 0303 	adc.w	r3, r2, r3
 8003c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	663b      	str	r3, [r7, #96]	; 0x60
 8003c38:	667a      	str	r2, [r7, #100]	; 0x64
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c46:	4649      	mov	r1, r9
 8003c48:	008b      	lsls	r3, r1, #2
 8003c4a:	4641      	mov	r1, r8
 8003c4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c50:	4641      	mov	r1, r8
 8003c52:	008a      	lsls	r2, r1, #2
 8003c54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c58:	f7fc fb32 	bl	80002c0 <__aeabi_uldivmod>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <UART_SetConfig+0x4e4>)
 8003c62:	fba3 1302 	umull	r1, r3, r3, r2
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	2164      	movs	r1, #100	; 0x64
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	3332      	adds	r3, #50	; 0x32
 8003c74:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <UART_SetConfig+0x4e4>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	f003 020f 	and.w	r2, r3, #15
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4422      	add	r2, r4
 8003c88:	609a      	str	r2, [r3, #8]
}
 8003c8a:	bf00      	nop
 8003c8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c90:	46bd      	mov	sp, r7
 8003c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c96:	bf00      	nop
 8003c98:	51eb851f 	.word	0x51eb851f

08003c9c <__assert_func>:
 8003c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c9e:	4614      	mov	r4, r2
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <__assert_func+0x2c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4605      	mov	r5, r0
 8003ca8:	68d8      	ldr	r0, [r3, #12]
 8003caa:	b14c      	cbz	r4, 8003cc0 <__assert_func+0x24>
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <__assert_func+0x30>)
 8003cae:	9100      	str	r1, [sp, #0]
 8003cb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003cb4:	4906      	ldr	r1, [pc, #24]	; (8003cd0 <__assert_func+0x34>)
 8003cb6:	462b      	mov	r3, r5
 8003cb8:	f000 f818 	bl	8003cec <fiprintf>
 8003cbc:	f000 fd4a 	bl	8004754 <abort>
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <__assert_func+0x38>)
 8003cc2:	461c      	mov	r4, r3
 8003cc4:	e7f3      	b.n	8003cae <__assert_func+0x12>
 8003cc6:	bf00      	nop
 8003cc8:	2000000c 	.word	0x2000000c
 8003ccc:	0800540c 	.word	0x0800540c
 8003cd0:	08005419 	.word	0x08005419
 8003cd4:	08005447 	.word	0x08005447

08003cd8 <atoi>:
 8003cd8:	220a      	movs	r2, #10
 8003cda:	2100      	movs	r1, #0
 8003cdc:	f000 bc70 	b.w	80045c0 <strtol>

08003ce0 <__errno>:
 8003ce0:	4b01      	ldr	r3, [pc, #4]	; (8003ce8 <__errno+0x8>)
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	2000000c 	.word	0x2000000c

08003cec <fiprintf>:
 8003cec:	b40e      	push	{r1, r2, r3}
 8003cee:	b503      	push	{r0, r1, lr}
 8003cf0:	4601      	mov	r1, r0
 8003cf2:	ab03      	add	r3, sp, #12
 8003cf4:	4805      	ldr	r0, [pc, #20]	; (8003d0c <fiprintf+0x20>)
 8003cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cfa:	6800      	ldr	r0, [r0, #0]
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	f000 f85d 	bl	8003dbc <_vfiprintf_r>
 8003d02:	b002      	add	sp, #8
 8003d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d08:	b003      	add	sp, #12
 8003d0a:	4770      	bx	lr
 8003d0c:	2000000c 	.word	0x2000000c

08003d10 <__libc_init_array>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4d0d      	ldr	r5, [pc, #52]	; (8003d48 <__libc_init_array+0x38>)
 8003d14:	4c0d      	ldr	r4, [pc, #52]	; (8003d4c <__libc_init_array+0x3c>)
 8003d16:	1b64      	subs	r4, r4, r5
 8003d18:	10a4      	asrs	r4, r4, #2
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	42a6      	cmp	r6, r4
 8003d1e:	d109      	bne.n	8003d34 <__libc_init_array+0x24>
 8003d20:	4d0b      	ldr	r5, [pc, #44]	; (8003d50 <__libc_init_array+0x40>)
 8003d22:	4c0c      	ldr	r4, [pc, #48]	; (8003d54 <__libc_init_array+0x44>)
 8003d24:	f001 faec 	bl	8005300 <_init>
 8003d28:	1b64      	subs	r4, r4, r5
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	42a6      	cmp	r6, r4
 8003d30:	d105      	bne.n	8003d3e <__libc_init_array+0x2e>
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d38:	4798      	blx	r3
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	e7ee      	b.n	8003d1c <__libc_init_array+0xc>
 8003d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d42:	4798      	blx	r3
 8003d44:	3601      	adds	r6, #1
 8003d46:	e7f2      	b.n	8003d2e <__libc_init_array+0x1e>
 8003d48:	0800565c 	.word	0x0800565c
 8003d4c:	0800565c 	.word	0x0800565c
 8003d50:	0800565c 	.word	0x0800565c
 8003d54:	08005660 	.word	0x08005660

08003d58 <memset>:
 8003d58:	4402      	add	r2, r0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d100      	bne.n	8003d62 <memset+0xa>
 8003d60:	4770      	bx	lr
 8003d62:	f803 1b01 	strb.w	r1, [r3], #1
 8003d66:	e7f9      	b.n	8003d5c <memset+0x4>

08003d68 <__sfputc_r>:
 8003d68:	6893      	ldr	r3, [r2, #8]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	b410      	push	{r4}
 8003d70:	6093      	str	r3, [r2, #8]
 8003d72:	da08      	bge.n	8003d86 <__sfputc_r+0x1e>
 8003d74:	6994      	ldr	r4, [r2, #24]
 8003d76:	42a3      	cmp	r3, r4
 8003d78:	db01      	blt.n	8003d7e <__sfputc_r+0x16>
 8003d7a:	290a      	cmp	r1, #10
 8003d7c:	d103      	bne.n	8003d86 <__sfputc_r+0x1e>
 8003d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d82:	f000 bc27 	b.w	80045d4 <__swbuf_r>
 8003d86:	6813      	ldr	r3, [r2, #0]
 8003d88:	1c58      	adds	r0, r3, #1
 8003d8a:	6010      	str	r0, [r2, #0]
 8003d8c:	7019      	strb	r1, [r3, #0]
 8003d8e:	4608      	mov	r0, r1
 8003d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <__sfputs_r>:
 8003d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d98:	4606      	mov	r6, r0
 8003d9a:	460f      	mov	r7, r1
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	18d5      	adds	r5, r2, r3
 8003da0:	42ac      	cmp	r4, r5
 8003da2:	d101      	bne.n	8003da8 <__sfputs_r+0x12>
 8003da4:	2000      	movs	r0, #0
 8003da6:	e007      	b.n	8003db8 <__sfputs_r+0x22>
 8003da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dac:	463a      	mov	r2, r7
 8003dae:	4630      	mov	r0, r6
 8003db0:	f7ff ffda 	bl	8003d68 <__sfputc_r>
 8003db4:	1c43      	adds	r3, r0, #1
 8003db6:	d1f3      	bne.n	8003da0 <__sfputs_r+0xa>
 8003db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003dbc <_vfiprintf_r>:
 8003dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc0:	460d      	mov	r5, r1
 8003dc2:	b09d      	sub	sp, #116	; 0x74
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	4698      	mov	r8, r3
 8003dc8:	4606      	mov	r6, r0
 8003dca:	b118      	cbz	r0, 8003dd4 <_vfiprintf_r+0x18>
 8003dcc:	6983      	ldr	r3, [r0, #24]
 8003dce:	b90b      	cbnz	r3, 8003dd4 <_vfiprintf_r+0x18>
 8003dd0:	f000 fde2 	bl	8004998 <__sinit>
 8003dd4:	4b89      	ldr	r3, [pc, #548]	; (8003ffc <_vfiprintf_r+0x240>)
 8003dd6:	429d      	cmp	r5, r3
 8003dd8:	d11b      	bne.n	8003e12 <_vfiprintf_r+0x56>
 8003dda:	6875      	ldr	r5, [r6, #4]
 8003ddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dde:	07d9      	lsls	r1, r3, #31
 8003de0:	d405      	bmi.n	8003dee <_vfiprintf_r+0x32>
 8003de2:	89ab      	ldrh	r3, [r5, #12]
 8003de4:	059a      	lsls	r2, r3, #22
 8003de6:	d402      	bmi.n	8003dee <_vfiprintf_r+0x32>
 8003de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dea:	f000 fe73 	bl	8004ad4 <__retarget_lock_acquire_recursive>
 8003dee:	89ab      	ldrh	r3, [r5, #12]
 8003df0:	071b      	lsls	r3, r3, #28
 8003df2:	d501      	bpl.n	8003df8 <_vfiprintf_r+0x3c>
 8003df4:	692b      	ldr	r3, [r5, #16]
 8003df6:	b9eb      	cbnz	r3, 8003e34 <_vfiprintf_r+0x78>
 8003df8:	4629      	mov	r1, r5
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	f000 fc3c 	bl	8004678 <__swsetup_r>
 8003e00:	b1c0      	cbz	r0, 8003e34 <_vfiprintf_r+0x78>
 8003e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e04:	07dc      	lsls	r4, r3, #31
 8003e06:	d50e      	bpl.n	8003e26 <_vfiprintf_r+0x6a>
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e0c:	b01d      	add	sp, #116	; 0x74
 8003e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e12:	4b7b      	ldr	r3, [pc, #492]	; (8004000 <_vfiprintf_r+0x244>)
 8003e14:	429d      	cmp	r5, r3
 8003e16:	d101      	bne.n	8003e1c <_vfiprintf_r+0x60>
 8003e18:	68b5      	ldr	r5, [r6, #8]
 8003e1a:	e7df      	b.n	8003ddc <_vfiprintf_r+0x20>
 8003e1c:	4b79      	ldr	r3, [pc, #484]	; (8004004 <_vfiprintf_r+0x248>)
 8003e1e:	429d      	cmp	r5, r3
 8003e20:	bf08      	it	eq
 8003e22:	68f5      	ldreq	r5, [r6, #12]
 8003e24:	e7da      	b.n	8003ddc <_vfiprintf_r+0x20>
 8003e26:	89ab      	ldrh	r3, [r5, #12]
 8003e28:	0598      	lsls	r0, r3, #22
 8003e2a:	d4ed      	bmi.n	8003e08 <_vfiprintf_r+0x4c>
 8003e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e2e:	f000 fe52 	bl	8004ad6 <__retarget_lock_release_recursive>
 8003e32:	e7e9      	b.n	8003e08 <_vfiprintf_r+0x4c>
 8003e34:	2300      	movs	r3, #0
 8003e36:	9309      	str	r3, [sp, #36]	; 0x24
 8003e38:	2320      	movs	r3, #32
 8003e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e42:	2330      	movs	r3, #48	; 0x30
 8003e44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004008 <_vfiprintf_r+0x24c>
 8003e48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e4c:	f04f 0901 	mov.w	r9, #1
 8003e50:	4623      	mov	r3, r4
 8003e52:	469a      	mov	sl, r3
 8003e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e58:	b10a      	cbz	r2, 8003e5e <_vfiprintf_r+0xa2>
 8003e5a:	2a25      	cmp	r2, #37	; 0x25
 8003e5c:	d1f9      	bne.n	8003e52 <_vfiprintf_r+0x96>
 8003e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8003e62:	d00b      	beq.n	8003e7c <_vfiprintf_r+0xc0>
 8003e64:	465b      	mov	r3, fp
 8003e66:	4622      	mov	r2, r4
 8003e68:	4629      	mov	r1, r5
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	f7ff ff93 	bl	8003d96 <__sfputs_r>
 8003e70:	3001      	adds	r0, #1
 8003e72:	f000 80aa 	beq.w	8003fca <_vfiprintf_r+0x20e>
 8003e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e78:	445a      	add	r2, fp
 8003e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8003e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80a2 	beq.w	8003fca <_vfiprintf_r+0x20e>
 8003e86:	2300      	movs	r3, #0
 8003e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e90:	f10a 0a01 	add.w	sl, sl, #1
 8003e94:	9304      	str	r3, [sp, #16]
 8003e96:	9307      	str	r3, [sp, #28]
 8003e98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e9c:	931a      	str	r3, [sp, #104]	; 0x68
 8003e9e:	4654      	mov	r4, sl
 8003ea0:	2205      	movs	r2, #5
 8003ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea6:	4858      	ldr	r0, [pc, #352]	; (8004008 <_vfiprintf_r+0x24c>)
 8003ea8:	f7fc f9ba 	bl	8000220 <memchr>
 8003eac:	9a04      	ldr	r2, [sp, #16]
 8003eae:	b9d8      	cbnz	r0, 8003ee8 <_vfiprintf_r+0x12c>
 8003eb0:	06d1      	lsls	r1, r2, #27
 8003eb2:	bf44      	itt	mi
 8003eb4:	2320      	movmi	r3, #32
 8003eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eba:	0713      	lsls	r3, r2, #28
 8003ebc:	bf44      	itt	mi
 8003ebe:	232b      	movmi	r3, #43	; 0x2b
 8003ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8003eca:	d015      	beq.n	8003ef8 <_vfiprintf_r+0x13c>
 8003ecc:	9a07      	ldr	r2, [sp, #28]
 8003ece:	4654      	mov	r4, sl
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f04f 0c0a 	mov.w	ip, #10
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003edc:	3b30      	subs	r3, #48	; 0x30
 8003ede:	2b09      	cmp	r3, #9
 8003ee0:	d94e      	bls.n	8003f80 <_vfiprintf_r+0x1c4>
 8003ee2:	b1b0      	cbz	r0, 8003f12 <_vfiprintf_r+0x156>
 8003ee4:	9207      	str	r2, [sp, #28]
 8003ee6:	e014      	b.n	8003f12 <_vfiprintf_r+0x156>
 8003ee8:	eba0 0308 	sub.w	r3, r0, r8
 8003eec:	fa09 f303 	lsl.w	r3, r9, r3
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	9304      	str	r3, [sp, #16]
 8003ef4:	46a2      	mov	sl, r4
 8003ef6:	e7d2      	b.n	8003e9e <_vfiprintf_r+0xe2>
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	1d19      	adds	r1, r3, #4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	9103      	str	r1, [sp, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bfbb      	ittet	lt
 8003f04:	425b      	neglt	r3, r3
 8003f06:	f042 0202 	orrlt.w	r2, r2, #2
 8003f0a:	9307      	strge	r3, [sp, #28]
 8003f0c:	9307      	strlt	r3, [sp, #28]
 8003f0e:	bfb8      	it	lt
 8003f10:	9204      	strlt	r2, [sp, #16]
 8003f12:	7823      	ldrb	r3, [r4, #0]
 8003f14:	2b2e      	cmp	r3, #46	; 0x2e
 8003f16:	d10c      	bne.n	8003f32 <_vfiprintf_r+0x176>
 8003f18:	7863      	ldrb	r3, [r4, #1]
 8003f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f1c:	d135      	bne.n	8003f8a <_vfiprintf_r+0x1ce>
 8003f1e:	9b03      	ldr	r3, [sp, #12]
 8003f20:	1d1a      	adds	r2, r3, #4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	9203      	str	r2, [sp, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bfb8      	it	lt
 8003f2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003f2e:	3402      	adds	r4, #2
 8003f30:	9305      	str	r3, [sp, #20]
 8003f32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004018 <_vfiprintf_r+0x25c>
 8003f36:	7821      	ldrb	r1, [r4, #0]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	4650      	mov	r0, sl
 8003f3c:	f7fc f970 	bl	8000220 <memchr>
 8003f40:	b140      	cbz	r0, 8003f54 <_vfiprintf_r+0x198>
 8003f42:	2340      	movs	r3, #64	; 0x40
 8003f44:	eba0 000a 	sub.w	r0, r0, sl
 8003f48:	fa03 f000 	lsl.w	r0, r3, r0
 8003f4c:	9b04      	ldr	r3, [sp, #16]
 8003f4e:	4303      	orrs	r3, r0
 8003f50:	3401      	adds	r4, #1
 8003f52:	9304      	str	r3, [sp, #16]
 8003f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f58:	482c      	ldr	r0, [pc, #176]	; (800400c <_vfiprintf_r+0x250>)
 8003f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f5e:	2206      	movs	r2, #6
 8003f60:	f7fc f95e 	bl	8000220 <memchr>
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d03f      	beq.n	8003fe8 <_vfiprintf_r+0x22c>
 8003f68:	4b29      	ldr	r3, [pc, #164]	; (8004010 <_vfiprintf_r+0x254>)
 8003f6a:	bb1b      	cbnz	r3, 8003fb4 <_vfiprintf_r+0x1f8>
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	3307      	adds	r3, #7
 8003f70:	f023 0307 	bic.w	r3, r3, #7
 8003f74:	3308      	adds	r3, #8
 8003f76:	9303      	str	r3, [sp, #12]
 8003f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f7a:	443b      	add	r3, r7
 8003f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7e:	e767      	b.n	8003e50 <_vfiprintf_r+0x94>
 8003f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f84:	460c      	mov	r4, r1
 8003f86:	2001      	movs	r0, #1
 8003f88:	e7a5      	b.n	8003ed6 <_vfiprintf_r+0x11a>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	3401      	adds	r4, #1
 8003f8e:	9305      	str	r3, [sp, #20]
 8003f90:	4619      	mov	r1, r3
 8003f92:	f04f 0c0a 	mov.w	ip, #10
 8003f96:	4620      	mov	r0, r4
 8003f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f9c:	3a30      	subs	r2, #48	; 0x30
 8003f9e:	2a09      	cmp	r2, #9
 8003fa0:	d903      	bls.n	8003faa <_vfiprintf_r+0x1ee>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0c5      	beq.n	8003f32 <_vfiprintf_r+0x176>
 8003fa6:	9105      	str	r1, [sp, #20]
 8003fa8:	e7c3      	b.n	8003f32 <_vfiprintf_r+0x176>
 8003faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fae:	4604      	mov	r4, r0
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e7f0      	b.n	8003f96 <_vfiprintf_r+0x1da>
 8003fb4:	ab03      	add	r3, sp, #12
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	462a      	mov	r2, r5
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <_vfiprintf_r+0x258>)
 8003fbc:	a904      	add	r1, sp, #16
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	f3af 8000 	nop.w
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	1c78      	adds	r0, r7, #1
 8003fc8:	d1d6      	bne.n	8003f78 <_vfiprintf_r+0x1bc>
 8003fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fcc:	07d9      	lsls	r1, r3, #31
 8003fce:	d405      	bmi.n	8003fdc <_vfiprintf_r+0x220>
 8003fd0:	89ab      	ldrh	r3, [r5, #12]
 8003fd2:	059a      	lsls	r2, r3, #22
 8003fd4:	d402      	bmi.n	8003fdc <_vfiprintf_r+0x220>
 8003fd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fd8:	f000 fd7d 	bl	8004ad6 <__retarget_lock_release_recursive>
 8003fdc:	89ab      	ldrh	r3, [r5, #12]
 8003fde:	065b      	lsls	r3, r3, #25
 8003fe0:	f53f af12 	bmi.w	8003e08 <_vfiprintf_r+0x4c>
 8003fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fe6:	e711      	b.n	8003e0c <_vfiprintf_r+0x50>
 8003fe8:	ab03      	add	r3, sp, #12
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	462a      	mov	r2, r5
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <_vfiprintf_r+0x258>)
 8003ff0:	a904      	add	r1, sp, #16
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f000 f880 	bl	80040f8 <_printf_i>
 8003ff8:	e7e4      	b.n	8003fc4 <_vfiprintf_r+0x208>
 8003ffa:	bf00      	nop
 8003ffc:	08005614 	.word	0x08005614
 8004000:	08005634 	.word	0x08005634
 8004004:	080055f4 	.word	0x080055f4
 8004008:	0800544c 	.word	0x0800544c
 800400c:	08005456 	.word	0x08005456
 8004010:	00000000 	.word	0x00000000
 8004014:	08003d97 	.word	0x08003d97
 8004018:	08005452 	.word	0x08005452

0800401c <_printf_common>:
 800401c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004020:	4616      	mov	r6, r2
 8004022:	4699      	mov	r9, r3
 8004024:	688a      	ldr	r2, [r1, #8]
 8004026:	690b      	ldr	r3, [r1, #16]
 8004028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800402c:	4293      	cmp	r3, r2
 800402e:	bfb8      	it	lt
 8004030:	4613      	movlt	r3, r2
 8004032:	6033      	str	r3, [r6, #0]
 8004034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004038:	4607      	mov	r7, r0
 800403a:	460c      	mov	r4, r1
 800403c:	b10a      	cbz	r2, 8004042 <_printf_common+0x26>
 800403e:	3301      	adds	r3, #1
 8004040:	6033      	str	r3, [r6, #0]
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	0699      	lsls	r1, r3, #26
 8004046:	bf42      	ittt	mi
 8004048:	6833      	ldrmi	r3, [r6, #0]
 800404a:	3302      	addmi	r3, #2
 800404c:	6033      	strmi	r3, [r6, #0]
 800404e:	6825      	ldr	r5, [r4, #0]
 8004050:	f015 0506 	ands.w	r5, r5, #6
 8004054:	d106      	bne.n	8004064 <_printf_common+0x48>
 8004056:	f104 0a19 	add.w	sl, r4, #25
 800405a:	68e3      	ldr	r3, [r4, #12]
 800405c:	6832      	ldr	r2, [r6, #0]
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	42ab      	cmp	r3, r5
 8004062:	dc26      	bgt.n	80040b2 <_printf_common+0x96>
 8004064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004068:	1e13      	subs	r3, r2, #0
 800406a:	6822      	ldr	r2, [r4, #0]
 800406c:	bf18      	it	ne
 800406e:	2301      	movne	r3, #1
 8004070:	0692      	lsls	r2, r2, #26
 8004072:	d42b      	bmi.n	80040cc <_printf_common+0xb0>
 8004074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004078:	4649      	mov	r1, r9
 800407a:	4638      	mov	r0, r7
 800407c:	47c0      	blx	r8
 800407e:	3001      	adds	r0, #1
 8004080:	d01e      	beq.n	80040c0 <_printf_common+0xa4>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	68e5      	ldr	r5, [r4, #12]
 8004086:	6832      	ldr	r2, [r6, #0]
 8004088:	f003 0306 	and.w	r3, r3, #6
 800408c:	2b04      	cmp	r3, #4
 800408e:	bf08      	it	eq
 8004090:	1aad      	subeq	r5, r5, r2
 8004092:	68a3      	ldr	r3, [r4, #8]
 8004094:	6922      	ldr	r2, [r4, #16]
 8004096:	bf0c      	ite	eq
 8004098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800409c:	2500      	movne	r5, #0
 800409e:	4293      	cmp	r3, r2
 80040a0:	bfc4      	itt	gt
 80040a2:	1a9b      	subgt	r3, r3, r2
 80040a4:	18ed      	addgt	r5, r5, r3
 80040a6:	2600      	movs	r6, #0
 80040a8:	341a      	adds	r4, #26
 80040aa:	42b5      	cmp	r5, r6
 80040ac:	d11a      	bne.n	80040e4 <_printf_common+0xc8>
 80040ae:	2000      	movs	r0, #0
 80040b0:	e008      	b.n	80040c4 <_printf_common+0xa8>
 80040b2:	2301      	movs	r3, #1
 80040b4:	4652      	mov	r2, sl
 80040b6:	4649      	mov	r1, r9
 80040b8:	4638      	mov	r0, r7
 80040ba:	47c0      	blx	r8
 80040bc:	3001      	adds	r0, #1
 80040be:	d103      	bne.n	80040c8 <_printf_common+0xac>
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c8:	3501      	adds	r5, #1
 80040ca:	e7c6      	b.n	800405a <_printf_common+0x3e>
 80040cc:	18e1      	adds	r1, r4, r3
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	2030      	movs	r0, #48	; 0x30
 80040d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040d6:	4422      	add	r2, r4
 80040d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040e0:	3302      	adds	r3, #2
 80040e2:	e7c7      	b.n	8004074 <_printf_common+0x58>
 80040e4:	2301      	movs	r3, #1
 80040e6:	4622      	mov	r2, r4
 80040e8:	4649      	mov	r1, r9
 80040ea:	4638      	mov	r0, r7
 80040ec:	47c0      	blx	r8
 80040ee:	3001      	adds	r0, #1
 80040f0:	d0e6      	beq.n	80040c0 <_printf_common+0xa4>
 80040f2:	3601      	adds	r6, #1
 80040f4:	e7d9      	b.n	80040aa <_printf_common+0x8e>
	...

080040f8 <_printf_i>:
 80040f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	7e0f      	ldrb	r7, [r1, #24]
 80040fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004100:	2f78      	cmp	r7, #120	; 0x78
 8004102:	4691      	mov	r9, r2
 8004104:	4680      	mov	r8, r0
 8004106:	460c      	mov	r4, r1
 8004108:	469a      	mov	sl, r3
 800410a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800410e:	d807      	bhi.n	8004120 <_printf_i+0x28>
 8004110:	2f62      	cmp	r7, #98	; 0x62
 8004112:	d80a      	bhi.n	800412a <_printf_i+0x32>
 8004114:	2f00      	cmp	r7, #0
 8004116:	f000 80d8 	beq.w	80042ca <_printf_i+0x1d2>
 800411a:	2f58      	cmp	r7, #88	; 0x58
 800411c:	f000 80a3 	beq.w	8004266 <_printf_i+0x16e>
 8004120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004128:	e03a      	b.n	80041a0 <_printf_i+0xa8>
 800412a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800412e:	2b15      	cmp	r3, #21
 8004130:	d8f6      	bhi.n	8004120 <_printf_i+0x28>
 8004132:	a101      	add	r1, pc, #4	; (adr r1, 8004138 <_printf_i+0x40>)
 8004134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004138:	08004191 	.word	0x08004191
 800413c:	080041a5 	.word	0x080041a5
 8004140:	08004121 	.word	0x08004121
 8004144:	08004121 	.word	0x08004121
 8004148:	08004121 	.word	0x08004121
 800414c:	08004121 	.word	0x08004121
 8004150:	080041a5 	.word	0x080041a5
 8004154:	08004121 	.word	0x08004121
 8004158:	08004121 	.word	0x08004121
 800415c:	08004121 	.word	0x08004121
 8004160:	08004121 	.word	0x08004121
 8004164:	080042b1 	.word	0x080042b1
 8004168:	080041d5 	.word	0x080041d5
 800416c:	08004293 	.word	0x08004293
 8004170:	08004121 	.word	0x08004121
 8004174:	08004121 	.word	0x08004121
 8004178:	080042d3 	.word	0x080042d3
 800417c:	08004121 	.word	0x08004121
 8004180:	080041d5 	.word	0x080041d5
 8004184:	08004121 	.word	0x08004121
 8004188:	08004121 	.word	0x08004121
 800418c:	0800429b 	.word	0x0800429b
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	1d1a      	adds	r2, r3, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	602a      	str	r2, [r5, #0]
 8004198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800419c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0a3      	b.n	80042ec <_printf_i+0x1f4>
 80041a4:	6820      	ldr	r0, [r4, #0]
 80041a6:	6829      	ldr	r1, [r5, #0]
 80041a8:	0606      	lsls	r6, r0, #24
 80041aa:	f101 0304 	add.w	r3, r1, #4
 80041ae:	d50a      	bpl.n	80041c6 <_printf_i+0xce>
 80041b0:	680e      	ldr	r6, [r1, #0]
 80041b2:	602b      	str	r3, [r5, #0]
 80041b4:	2e00      	cmp	r6, #0
 80041b6:	da03      	bge.n	80041c0 <_printf_i+0xc8>
 80041b8:	232d      	movs	r3, #45	; 0x2d
 80041ba:	4276      	negs	r6, r6
 80041bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c0:	485e      	ldr	r0, [pc, #376]	; (800433c <_printf_i+0x244>)
 80041c2:	230a      	movs	r3, #10
 80041c4:	e019      	b.n	80041fa <_printf_i+0x102>
 80041c6:	680e      	ldr	r6, [r1, #0]
 80041c8:	602b      	str	r3, [r5, #0]
 80041ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041ce:	bf18      	it	ne
 80041d0:	b236      	sxthne	r6, r6
 80041d2:	e7ef      	b.n	80041b4 <_printf_i+0xbc>
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	6820      	ldr	r0, [r4, #0]
 80041d8:	1d19      	adds	r1, r3, #4
 80041da:	6029      	str	r1, [r5, #0]
 80041dc:	0601      	lsls	r1, r0, #24
 80041de:	d501      	bpl.n	80041e4 <_printf_i+0xec>
 80041e0:	681e      	ldr	r6, [r3, #0]
 80041e2:	e002      	b.n	80041ea <_printf_i+0xf2>
 80041e4:	0646      	lsls	r6, r0, #25
 80041e6:	d5fb      	bpl.n	80041e0 <_printf_i+0xe8>
 80041e8:	881e      	ldrh	r6, [r3, #0]
 80041ea:	4854      	ldr	r0, [pc, #336]	; (800433c <_printf_i+0x244>)
 80041ec:	2f6f      	cmp	r7, #111	; 0x6f
 80041ee:	bf0c      	ite	eq
 80041f0:	2308      	moveq	r3, #8
 80041f2:	230a      	movne	r3, #10
 80041f4:	2100      	movs	r1, #0
 80041f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041fa:	6865      	ldr	r5, [r4, #4]
 80041fc:	60a5      	str	r5, [r4, #8]
 80041fe:	2d00      	cmp	r5, #0
 8004200:	bfa2      	ittt	ge
 8004202:	6821      	ldrge	r1, [r4, #0]
 8004204:	f021 0104 	bicge.w	r1, r1, #4
 8004208:	6021      	strge	r1, [r4, #0]
 800420a:	b90e      	cbnz	r6, 8004210 <_printf_i+0x118>
 800420c:	2d00      	cmp	r5, #0
 800420e:	d04d      	beq.n	80042ac <_printf_i+0x1b4>
 8004210:	4615      	mov	r5, r2
 8004212:	fbb6 f1f3 	udiv	r1, r6, r3
 8004216:	fb03 6711 	mls	r7, r3, r1, r6
 800421a:	5dc7      	ldrb	r7, [r0, r7]
 800421c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004220:	4637      	mov	r7, r6
 8004222:	42bb      	cmp	r3, r7
 8004224:	460e      	mov	r6, r1
 8004226:	d9f4      	bls.n	8004212 <_printf_i+0x11a>
 8004228:	2b08      	cmp	r3, #8
 800422a:	d10b      	bne.n	8004244 <_printf_i+0x14c>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	07de      	lsls	r6, r3, #31
 8004230:	d508      	bpl.n	8004244 <_printf_i+0x14c>
 8004232:	6923      	ldr	r3, [r4, #16]
 8004234:	6861      	ldr	r1, [r4, #4]
 8004236:	4299      	cmp	r1, r3
 8004238:	bfde      	ittt	le
 800423a:	2330      	movle	r3, #48	; 0x30
 800423c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004240:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004244:	1b52      	subs	r2, r2, r5
 8004246:	6122      	str	r2, [r4, #16]
 8004248:	f8cd a000 	str.w	sl, [sp]
 800424c:	464b      	mov	r3, r9
 800424e:	aa03      	add	r2, sp, #12
 8004250:	4621      	mov	r1, r4
 8004252:	4640      	mov	r0, r8
 8004254:	f7ff fee2 	bl	800401c <_printf_common>
 8004258:	3001      	adds	r0, #1
 800425a:	d14c      	bne.n	80042f6 <_printf_i+0x1fe>
 800425c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004260:	b004      	add	sp, #16
 8004262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004266:	4835      	ldr	r0, [pc, #212]	; (800433c <_printf_i+0x244>)
 8004268:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800426c:	6829      	ldr	r1, [r5, #0]
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	f851 6b04 	ldr.w	r6, [r1], #4
 8004274:	6029      	str	r1, [r5, #0]
 8004276:	061d      	lsls	r5, r3, #24
 8004278:	d514      	bpl.n	80042a4 <_printf_i+0x1ac>
 800427a:	07df      	lsls	r7, r3, #31
 800427c:	bf44      	itt	mi
 800427e:	f043 0320 	orrmi.w	r3, r3, #32
 8004282:	6023      	strmi	r3, [r4, #0]
 8004284:	b91e      	cbnz	r6, 800428e <_printf_i+0x196>
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	f023 0320 	bic.w	r3, r3, #32
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	2310      	movs	r3, #16
 8004290:	e7b0      	b.n	80041f4 <_printf_i+0xfc>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	f043 0320 	orr.w	r3, r3, #32
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	2378      	movs	r3, #120	; 0x78
 800429c:	4828      	ldr	r0, [pc, #160]	; (8004340 <_printf_i+0x248>)
 800429e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042a2:	e7e3      	b.n	800426c <_printf_i+0x174>
 80042a4:	0659      	lsls	r1, r3, #25
 80042a6:	bf48      	it	mi
 80042a8:	b2b6      	uxthmi	r6, r6
 80042aa:	e7e6      	b.n	800427a <_printf_i+0x182>
 80042ac:	4615      	mov	r5, r2
 80042ae:	e7bb      	b.n	8004228 <_printf_i+0x130>
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	6826      	ldr	r6, [r4, #0]
 80042b4:	6961      	ldr	r1, [r4, #20]
 80042b6:	1d18      	adds	r0, r3, #4
 80042b8:	6028      	str	r0, [r5, #0]
 80042ba:	0635      	lsls	r5, r6, #24
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	d501      	bpl.n	80042c4 <_printf_i+0x1cc>
 80042c0:	6019      	str	r1, [r3, #0]
 80042c2:	e002      	b.n	80042ca <_printf_i+0x1d2>
 80042c4:	0670      	lsls	r0, r6, #25
 80042c6:	d5fb      	bpl.n	80042c0 <_printf_i+0x1c8>
 80042c8:	8019      	strh	r1, [r3, #0]
 80042ca:	2300      	movs	r3, #0
 80042cc:	6123      	str	r3, [r4, #16]
 80042ce:	4615      	mov	r5, r2
 80042d0:	e7ba      	b.n	8004248 <_printf_i+0x150>
 80042d2:	682b      	ldr	r3, [r5, #0]
 80042d4:	1d1a      	adds	r2, r3, #4
 80042d6:	602a      	str	r2, [r5, #0]
 80042d8:	681d      	ldr	r5, [r3, #0]
 80042da:	6862      	ldr	r2, [r4, #4]
 80042dc:	2100      	movs	r1, #0
 80042de:	4628      	mov	r0, r5
 80042e0:	f7fb ff9e 	bl	8000220 <memchr>
 80042e4:	b108      	cbz	r0, 80042ea <_printf_i+0x1f2>
 80042e6:	1b40      	subs	r0, r0, r5
 80042e8:	6060      	str	r0, [r4, #4]
 80042ea:	6863      	ldr	r3, [r4, #4]
 80042ec:	6123      	str	r3, [r4, #16]
 80042ee:	2300      	movs	r3, #0
 80042f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f4:	e7a8      	b.n	8004248 <_printf_i+0x150>
 80042f6:	6923      	ldr	r3, [r4, #16]
 80042f8:	462a      	mov	r2, r5
 80042fa:	4649      	mov	r1, r9
 80042fc:	4640      	mov	r0, r8
 80042fe:	47d0      	blx	sl
 8004300:	3001      	adds	r0, #1
 8004302:	d0ab      	beq.n	800425c <_printf_i+0x164>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	079b      	lsls	r3, r3, #30
 8004308:	d413      	bmi.n	8004332 <_printf_i+0x23a>
 800430a:	68e0      	ldr	r0, [r4, #12]
 800430c:	9b03      	ldr	r3, [sp, #12]
 800430e:	4298      	cmp	r0, r3
 8004310:	bfb8      	it	lt
 8004312:	4618      	movlt	r0, r3
 8004314:	e7a4      	b.n	8004260 <_printf_i+0x168>
 8004316:	2301      	movs	r3, #1
 8004318:	4632      	mov	r2, r6
 800431a:	4649      	mov	r1, r9
 800431c:	4640      	mov	r0, r8
 800431e:	47d0      	blx	sl
 8004320:	3001      	adds	r0, #1
 8004322:	d09b      	beq.n	800425c <_printf_i+0x164>
 8004324:	3501      	adds	r5, #1
 8004326:	68e3      	ldr	r3, [r4, #12]
 8004328:	9903      	ldr	r1, [sp, #12]
 800432a:	1a5b      	subs	r3, r3, r1
 800432c:	42ab      	cmp	r3, r5
 800432e:	dcf2      	bgt.n	8004316 <_printf_i+0x21e>
 8004330:	e7eb      	b.n	800430a <_printf_i+0x212>
 8004332:	2500      	movs	r5, #0
 8004334:	f104 0619 	add.w	r6, r4, #25
 8004338:	e7f5      	b.n	8004326 <_printf_i+0x22e>
 800433a:	bf00      	nop
 800433c:	0800545d 	.word	0x0800545d
 8004340:	0800546e 	.word	0x0800546e

08004344 <iprintf>:
 8004344:	b40f      	push	{r0, r1, r2, r3}
 8004346:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <iprintf+0x2c>)
 8004348:	b513      	push	{r0, r1, r4, lr}
 800434a:	681c      	ldr	r4, [r3, #0]
 800434c:	b124      	cbz	r4, 8004358 <iprintf+0x14>
 800434e:	69a3      	ldr	r3, [r4, #24]
 8004350:	b913      	cbnz	r3, 8004358 <iprintf+0x14>
 8004352:	4620      	mov	r0, r4
 8004354:	f000 fb20 	bl	8004998 <__sinit>
 8004358:	ab05      	add	r3, sp, #20
 800435a:	9a04      	ldr	r2, [sp, #16]
 800435c:	68a1      	ldr	r1, [r4, #8]
 800435e:	9301      	str	r3, [sp, #4]
 8004360:	4620      	mov	r0, r4
 8004362:	f7ff fd2b 	bl	8003dbc <_vfiprintf_r>
 8004366:	b002      	add	sp, #8
 8004368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436c:	b004      	add	sp, #16
 800436e:	4770      	bx	lr
 8004370:	2000000c 	.word	0x2000000c

08004374 <sniprintf>:
 8004374:	b40c      	push	{r2, r3}
 8004376:	b530      	push	{r4, r5, lr}
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <sniprintf+0x64>)
 800437a:	1e0c      	subs	r4, r1, #0
 800437c:	681d      	ldr	r5, [r3, #0]
 800437e:	b09d      	sub	sp, #116	; 0x74
 8004380:	da08      	bge.n	8004394 <sniprintf+0x20>
 8004382:	238b      	movs	r3, #139	; 0x8b
 8004384:	602b      	str	r3, [r5, #0]
 8004386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800438a:	b01d      	add	sp, #116	; 0x74
 800438c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004390:	b002      	add	sp, #8
 8004392:	4770      	bx	lr
 8004394:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004398:	f8ad 3014 	strh.w	r3, [sp, #20]
 800439c:	bf14      	ite	ne
 800439e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80043a2:	4623      	moveq	r3, r4
 80043a4:	9304      	str	r3, [sp, #16]
 80043a6:	9307      	str	r3, [sp, #28]
 80043a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043ac:	9002      	str	r0, [sp, #8]
 80043ae:	9006      	str	r0, [sp, #24]
 80043b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80043b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043b6:	ab21      	add	r3, sp, #132	; 0x84
 80043b8:	a902      	add	r1, sp, #8
 80043ba:	4628      	mov	r0, r5
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	f000 fd8b 	bl	8004ed8 <_svfiprintf_r>
 80043c2:	1c43      	adds	r3, r0, #1
 80043c4:	bfbc      	itt	lt
 80043c6:	238b      	movlt	r3, #139	; 0x8b
 80043c8:	602b      	strlt	r3, [r5, #0]
 80043ca:	2c00      	cmp	r4, #0
 80043cc:	d0dd      	beq.n	800438a <sniprintf+0x16>
 80043ce:	9b02      	ldr	r3, [sp, #8]
 80043d0:	2200      	movs	r2, #0
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	e7d9      	b.n	800438a <sniprintf+0x16>
 80043d6:	bf00      	nop
 80043d8:	2000000c 	.word	0x2000000c

080043dc <strncmp>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	b17a      	cbz	r2, 8004400 <strncmp+0x24>
 80043e0:	4603      	mov	r3, r0
 80043e2:	3901      	subs	r1, #1
 80043e4:	1884      	adds	r4, r0, r2
 80043e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80043ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80043ee:	4290      	cmp	r0, r2
 80043f0:	d101      	bne.n	80043f6 <strncmp+0x1a>
 80043f2:	42a3      	cmp	r3, r4
 80043f4:	d101      	bne.n	80043fa <strncmp+0x1e>
 80043f6:	1a80      	subs	r0, r0, r2
 80043f8:	bd10      	pop	{r4, pc}
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d1f3      	bne.n	80043e6 <strncmp+0xa>
 80043fe:	e7fa      	b.n	80043f6 <strncmp+0x1a>
 8004400:	4610      	mov	r0, r2
 8004402:	e7f9      	b.n	80043f8 <strncmp+0x1c>

08004404 <strtok>:
 8004404:	4b16      	ldr	r3, [pc, #88]	; (8004460 <strtok+0x5c>)
 8004406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004408:	681e      	ldr	r6, [r3, #0]
 800440a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800440c:	4605      	mov	r5, r0
 800440e:	b9fc      	cbnz	r4, 8004450 <strtok+0x4c>
 8004410:	2050      	movs	r0, #80	; 0x50
 8004412:	9101      	str	r1, [sp, #4]
 8004414:	f000 fbc6 	bl	8004ba4 <malloc>
 8004418:	9901      	ldr	r1, [sp, #4]
 800441a:	65b0      	str	r0, [r6, #88]	; 0x58
 800441c:	4602      	mov	r2, r0
 800441e:	b920      	cbnz	r0, 800442a <strtok+0x26>
 8004420:	4b10      	ldr	r3, [pc, #64]	; (8004464 <strtok+0x60>)
 8004422:	4811      	ldr	r0, [pc, #68]	; (8004468 <strtok+0x64>)
 8004424:	2157      	movs	r1, #87	; 0x57
 8004426:	f7ff fc39 	bl	8003c9c <__assert_func>
 800442a:	e9c0 4400 	strd	r4, r4, [r0]
 800442e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004432:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004436:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800443a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800443e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004442:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004446:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800444a:	6184      	str	r4, [r0, #24]
 800444c:	7704      	strb	r4, [r0, #28]
 800444e:	6244      	str	r4, [r0, #36]	; 0x24
 8004450:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004452:	2301      	movs	r3, #1
 8004454:	4628      	mov	r0, r5
 8004456:	b002      	add	sp, #8
 8004458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800445c:	f000 b806 	b.w	800446c <__strtok_r>
 8004460:	2000000c 	.word	0x2000000c
 8004464:	0800547f 	.word	0x0800547f
 8004468:	08005496 	.word	0x08005496

0800446c <__strtok_r>:
 800446c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446e:	b908      	cbnz	r0, 8004474 <__strtok_r+0x8>
 8004470:	6810      	ldr	r0, [r2, #0]
 8004472:	b188      	cbz	r0, 8004498 <__strtok_r+0x2c>
 8004474:	4604      	mov	r4, r0
 8004476:	4620      	mov	r0, r4
 8004478:	f814 5b01 	ldrb.w	r5, [r4], #1
 800447c:	460f      	mov	r7, r1
 800447e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004482:	b91e      	cbnz	r6, 800448c <__strtok_r+0x20>
 8004484:	b965      	cbnz	r5, 80044a0 <__strtok_r+0x34>
 8004486:	6015      	str	r5, [r2, #0]
 8004488:	4628      	mov	r0, r5
 800448a:	e005      	b.n	8004498 <__strtok_r+0x2c>
 800448c:	42b5      	cmp	r5, r6
 800448e:	d1f6      	bne.n	800447e <__strtok_r+0x12>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f0      	bne.n	8004476 <__strtok_r+0xa>
 8004494:	6014      	str	r4, [r2, #0]
 8004496:	7003      	strb	r3, [r0, #0]
 8004498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800449a:	461c      	mov	r4, r3
 800449c:	e00c      	b.n	80044b8 <__strtok_r+0x4c>
 800449e:	b915      	cbnz	r5, 80044a6 <__strtok_r+0x3a>
 80044a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80044a4:	460e      	mov	r6, r1
 80044a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80044aa:	42ab      	cmp	r3, r5
 80044ac:	d1f7      	bne.n	800449e <__strtok_r+0x32>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f3      	beq.n	800449a <__strtok_r+0x2e>
 80044b2:	2300      	movs	r3, #0
 80044b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80044b8:	6014      	str	r4, [r2, #0]
 80044ba:	e7ed      	b.n	8004498 <__strtok_r+0x2c>

080044bc <_strtol_l.constprop.0>:
 80044bc:	2b01      	cmp	r3, #1
 80044be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c2:	d001      	beq.n	80044c8 <_strtol_l.constprop.0+0xc>
 80044c4:	2b24      	cmp	r3, #36	; 0x24
 80044c6:	d906      	bls.n	80044d6 <_strtol_l.constprop.0+0x1a>
 80044c8:	f7ff fc0a 	bl	8003ce0 <__errno>
 80044cc:	2316      	movs	r3, #22
 80044ce:	6003      	str	r3, [r0, #0]
 80044d0:	2000      	movs	r0, #0
 80044d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80045bc <_strtol_l.constprop.0+0x100>
 80044da:	460d      	mov	r5, r1
 80044dc:	462e      	mov	r6, r5
 80044de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80044e6:	f017 0708 	ands.w	r7, r7, #8
 80044ea:	d1f7      	bne.n	80044dc <_strtol_l.constprop.0+0x20>
 80044ec:	2c2d      	cmp	r4, #45	; 0x2d
 80044ee:	d132      	bne.n	8004556 <_strtol_l.constprop.0+0x9a>
 80044f0:	782c      	ldrb	r4, [r5, #0]
 80044f2:	2701      	movs	r7, #1
 80044f4:	1cb5      	adds	r5, r6, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d05b      	beq.n	80045b2 <_strtol_l.constprop.0+0xf6>
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d109      	bne.n	8004512 <_strtol_l.constprop.0+0x56>
 80044fe:	2c30      	cmp	r4, #48	; 0x30
 8004500:	d107      	bne.n	8004512 <_strtol_l.constprop.0+0x56>
 8004502:	782c      	ldrb	r4, [r5, #0]
 8004504:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004508:	2c58      	cmp	r4, #88	; 0x58
 800450a:	d14d      	bne.n	80045a8 <_strtol_l.constprop.0+0xec>
 800450c:	786c      	ldrb	r4, [r5, #1]
 800450e:	2310      	movs	r3, #16
 8004510:	3502      	adds	r5, #2
 8004512:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004516:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800451a:	f04f 0c00 	mov.w	ip, #0
 800451e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004522:	4666      	mov	r6, ip
 8004524:	fb03 8a19 	mls	sl, r3, r9, r8
 8004528:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800452c:	f1be 0f09 	cmp.w	lr, #9
 8004530:	d816      	bhi.n	8004560 <_strtol_l.constprop.0+0xa4>
 8004532:	4674      	mov	r4, lr
 8004534:	42a3      	cmp	r3, r4
 8004536:	dd24      	ble.n	8004582 <_strtol_l.constprop.0+0xc6>
 8004538:	f1bc 0f00 	cmp.w	ip, #0
 800453c:	db1e      	blt.n	800457c <_strtol_l.constprop.0+0xc0>
 800453e:	45b1      	cmp	r9, r6
 8004540:	d31c      	bcc.n	800457c <_strtol_l.constprop.0+0xc0>
 8004542:	d101      	bne.n	8004548 <_strtol_l.constprop.0+0x8c>
 8004544:	45a2      	cmp	sl, r4
 8004546:	db19      	blt.n	800457c <_strtol_l.constprop.0+0xc0>
 8004548:	fb06 4603 	mla	r6, r6, r3, r4
 800454c:	f04f 0c01 	mov.w	ip, #1
 8004550:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004554:	e7e8      	b.n	8004528 <_strtol_l.constprop.0+0x6c>
 8004556:	2c2b      	cmp	r4, #43	; 0x2b
 8004558:	bf04      	itt	eq
 800455a:	782c      	ldrbeq	r4, [r5, #0]
 800455c:	1cb5      	addeq	r5, r6, #2
 800455e:	e7ca      	b.n	80044f6 <_strtol_l.constprop.0+0x3a>
 8004560:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004564:	f1be 0f19 	cmp.w	lr, #25
 8004568:	d801      	bhi.n	800456e <_strtol_l.constprop.0+0xb2>
 800456a:	3c37      	subs	r4, #55	; 0x37
 800456c:	e7e2      	b.n	8004534 <_strtol_l.constprop.0+0x78>
 800456e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004572:	f1be 0f19 	cmp.w	lr, #25
 8004576:	d804      	bhi.n	8004582 <_strtol_l.constprop.0+0xc6>
 8004578:	3c57      	subs	r4, #87	; 0x57
 800457a:	e7db      	b.n	8004534 <_strtol_l.constprop.0+0x78>
 800457c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004580:	e7e6      	b.n	8004550 <_strtol_l.constprop.0+0x94>
 8004582:	f1bc 0f00 	cmp.w	ip, #0
 8004586:	da05      	bge.n	8004594 <_strtol_l.constprop.0+0xd8>
 8004588:	2322      	movs	r3, #34	; 0x22
 800458a:	6003      	str	r3, [r0, #0]
 800458c:	4646      	mov	r6, r8
 800458e:	b942      	cbnz	r2, 80045a2 <_strtol_l.constprop.0+0xe6>
 8004590:	4630      	mov	r0, r6
 8004592:	e79e      	b.n	80044d2 <_strtol_l.constprop.0+0x16>
 8004594:	b107      	cbz	r7, 8004598 <_strtol_l.constprop.0+0xdc>
 8004596:	4276      	negs	r6, r6
 8004598:	2a00      	cmp	r2, #0
 800459a:	d0f9      	beq.n	8004590 <_strtol_l.constprop.0+0xd4>
 800459c:	f1bc 0f00 	cmp.w	ip, #0
 80045a0:	d000      	beq.n	80045a4 <_strtol_l.constprop.0+0xe8>
 80045a2:	1e69      	subs	r1, r5, #1
 80045a4:	6011      	str	r1, [r2, #0]
 80045a6:	e7f3      	b.n	8004590 <_strtol_l.constprop.0+0xd4>
 80045a8:	2430      	movs	r4, #48	; 0x30
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1b1      	bne.n	8004512 <_strtol_l.constprop.0+0x56>
 80045ae:	2308      	movs	r3, #8
 80045b0:	e7af      	b.n	8004512 <_strtol_l.constprop.0+0x56>
 80045b2:	2c30      	cmp	r4, #48	; 0x30
 80045b4:	d0a5      	beq.n	8004502 <_strtol_l.constprop.0+0x46>
 80045b6:	230a      	movs	r3, #10
 80045b8:	e7ab      	b.n	8004512 <_strtol_l.constprop.0+0x56>
 80045ba:	bf00      	nop
 80045bc:	080054f4 	.word	0x080054f4

080045c0 <strtol>:
 80045c0:	4613      	mov	r3, r2
 80045c2:	460a      	mov	r2, r1
 80045c4:	4601      	mov	r1, r0
 80045c6:	4802      	ldr	r0, [pc, #8]	; (80045d0 <strtol+0x10>)
 80045c8:	6800      	ldr	r0, [r0, #0]
 80045ca:	f7ff bf77 	b.w	80044bc <_strtol_l.constprop.0>
 80045ce:	bf00      	nop
 80045d0:	2000000c 	.word	0x2000000c

080045d4 <__swbuf_r>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	460e      	mov	r6, r1
 80045d8:	4614      	mov	r4, r2
 80045da:	4605      	mov	r5, r0
 80045dc:	b118      	cbz	r0, 80045e6 <__swbuf_r+0x12>
 80045de:	6983      	ldr	r3, [r0, #24]
 80045e0:	b90b      	cbnz	r3, 80045e6 <__swbuf_r+0x12>
 80045e2:	f000 f9d9 	bl	8004998 <__sinit>
 80045e6:	4b21      	ldr	r3, [pc, #132]	; (800466c <__swbuf_r+0x98>)
 80045e8:	429c      	cmp	r4, r3
 80045ea:	d12b      	bne.n	8004644 <__swbuf_r+0x70>
 80045ec:	686c      	ldr	r4, [r5, #4]
 80045ee:	69a3      	ldr	r3, [r4, #24]
 80045f0:	60a3      	str	r3, [r4, #8]
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	071a      	lsls	r2, r3, #28
 80045f6:	d52f      	bpl.n	8004658 <__swbuf_r+0x84>
 80045f8:	6923      	ldr	r3, [r4, #16]
 80045fa:	b36b      	cbz	r3, 8004658 <__swbuf_r+0x84>
 80045fc:	6923      	ldr	r3, [r4, #16]
 80045fe:	6820      	ldr	r0, [r4, #0]
 8004600:	1ac0      	subs	r0, r0, r3
 8004602:	6963      	ldr	r3, [r4, #20]
 8004604:	b2f6      	uxtb	r6, r6
 8004606:	4283      	cmp	r3, r0
 8004608:	4637      	mov	r7, r6
 800460a:	dc04      	bgt.n	8004616 <__swbuf_r+0x42>
 800460c:	4621      	mov	r1, r4
 800460e:	4628      	mov	r0, r5
 8004610:	f000 f92e 	bl	8004870 <_fflush_r>
 8004614:	bb30      	cbnz	r0, 8004664 <__swbuf_r+0x90>
 8004616:	68a3      	ldr	r3, [r4, #8]
 8004618:	3b01      	subs	r3, #1
 800461a:	60a3      	str	r3, [r4, #8]
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	6022      	str	r2, [r4, #0]
 8004622:	701e      	strb	r6, [r3, #0]
 8004624:	6963      	ldr	r3, [r4, #20]
 8004626:	3001      	adds	r0, #1
 8004628:	4283      	cmp	r3, r0
 800462a:	d004      	beq.n	8004636 <__swbuf_r+0x62>
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	07db      	lsls	r3, r3, #31
 8004630:	d506      	bpl.n	8004640 <__swbuf_r+0x6c>
 8004632:	2e0a      	cmp	r6, #10
 8004634:	d104      	bne.n	8004640 <__swbuf_r+0x6c>
 8004636:	4621      	mov	r1, r4
 8004638:	4628      	mov	r0, r5
 800463a:	f000 f919 	bl	8004870 <_fflush_r>
 800463e:	b988      	cbnz	r0, 8004664 <__swbuf_r+0x90>
 8004640:	4638      	mov	r0, r7
 8004642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <__swbuf_r+0x9c>)
 8004646:	429c      	cmp	r4, r3
 8004648:	d101      	bne.n	800464e <__swbuf_r+0x7a>
 800464a:	68ac      	ldr	r4, [r5, #8]
 800464c:	e7cf      	b.n	80045ee <__swbuf_r+0x1a>
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <__swbuf_r+0xa0>)
 8004650:	429c      	cmp	r4, r3
 8004652:	bf08      	it	eq
 8004654:	68ec      	ldreq	r4, [r5, #12]
 8004656:	e7ca      	b.n	80045ee <__swbuf_r+0x1a>
 8004658:	4621      	mov	r1, r4
 800465a:	4628      	mov	r0, r5
 800465c:	f000 f80c 	bl	8004678 <__swsetup_r>
 8004660:	2800      	cmp	r0, #0
 8004662:	d0cb      	beq.n	80045fc <__swbuf_r+0x28>
 8004664:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004668:	e7ea      	b.n	8004640 <__swbuf_r+0x6c>
 800466a:	bf00      	nop
 800466c:	08005614 	.word	0x08005614
 8004670:	08005634 	.word	0x08005634
 8004674:	080055f4 	.word	0x080055f4

08004678 <__swsetup_r>:
 8004678:	4b32      	ldr	r3, [pc, #200]	; (8004744 <__swsetup_r+0xcc>)
 800467a:	b570      	push	{r4, r5, r6, lr}
 800467c:	681d      	ldr	r5, [r3, #0]
 800467e:	4606      	mov	r6, r0
 8004680:	460c      	mov	r4, r1
 8004682:	b125      	cbz	r5, 800468e <__swsetup_r+0x16>
 8004684:	69ab      	ldr	r3, [r5, #24]
 8004686:	b913      	cbnz	r3, 800468e <__swsetup_r+0x16>
 8004688:	4628      	mov	r0, r5
 800468a:	f000 f985 	bl	8004998 <__sinit>
 800468e:	4b2e      	ldr	r3, [pc, #184]	; (8004748 <__swsetup_r+0xd0>)
 8004690:	429c      	cmp	r4, r3
 8004692:	d10f      	bne.n	80046b4 <__swsetup_r+0x3c>
 8004694:	686c      	ldr	r4, [r5, #4]
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800469c:	0719      	lsls	r1, r3, #28
 800469e:	d42c      	bmi.n	80046fa <__swsetup_r+0x82>
 80046a0:	06dd      	lsls	r5, r3, #27
 80046a2:	d411      	bmi.n	80046c8 <__swsetup_r+0x50>
 80046a4:	2309      	movs	r3, #9
 80046a6:	6033      	str	r3, [r6, #0]
 80046a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046ac:	81a3      	strh	r3, [r4, #12]
 80046ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b2:	e03e      	b.n	8004732 <__swsetup_r+0xba>
 80046b4:	4b25      	ldr	r3, [pc, #148]	; (800474c <__swsetup_r+0xd4>)
 80046b6:	429c      	cmp	r4, r3
 80046b8:	d101      	bne.n	80046be <__swsetup_r+0x46>
 80046ba:	68ac      	ldr	r4, [r5, #8]
 80046bc:	e7eb      	b.n	8004696 <__swsetup_r+0x1e>
 80046be:	4b24      	ldr	r3, [pc, #144]	; (8004750 <__swsetup_r+0xd8>)
 80046c0:	429c      	cmp	r4, r3
 80046c2:	bf08      	it	eq
 80046c4:	68ec      	ldreq	r4, [r5, #12]
 80046c6:	e7e6      	b.n	8004696 <__swsetup_r+0x1e>
 80046c8:	0758      	lsls	r0, r3, #29
 80046ca:	d512      	bpl.n	80046f2 <__swsetup_r+0x7a>
 80046cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ce:	b141      	cbz	r1, 80046e2 <__swsetup_r+0x6a>
 80046d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046d4:	4299      	cmp	r1, r3
 80046d6:	d002      	beq.n	80046de <__swsetup_r+0x66>
 80046d8:	4630      	mov	r0, r6
 80046da:	f000 fa93 	bl	8004c04 <_free_r>
 80046de:	2300      	movs	r3, #0
 80046e0:	6363      	str	r3, [r4, #52]	; 0x34
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046e8:	81a3      	strh	r3, [r4, #12]
 80046ea:	2300      	movs	r3, #0
 80046ec:	6063      	str	r3, [r4, #4]
 80046ee:	6923      	ldr	r3, [r4, #16]
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	f043 0308 	orr.w	r3, r3, #8
 80046f8:	81a3      	strh	r3, [r4, #12]
 80046fa:	6923      	ldr	r3, [r4, #16]
 80046fc:	b94b      	cbnz	r3, 8004712 <__swsetup_r+0x9a>
 80046fe:	89a3      	ldrh	r3, [r4, #12]
 8004700:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004708:	d003      	beq.n	8004712 <__swsetup_r+0x9a>
 800470a:	4621      	mov	r1, r4
 800470c:	4630      	mov	r0, r6
 800470e:	f000 fa09 	bl	8004b24 <__smakebuf_r>
 8004712:	89a0      	ldrh	r0, [r4, #12]
 8004714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004718:	f010 0301 	ands.w	r3, r0, #1
 800471c:	d00a      	beq.n	8004734 <__swsetup_r+0xbc>
 800471e:	2300      	movs	r3, #0
 8004720:	60a3      	str	r3, [r4, #8]
 8004722:	6963      	ldr	r3, [r4, #20]
 8004724:	425b      	negs	r3, r3
 8004726:	61a3      	str	r3, [r4, #24]
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	b943      	cbnz	r3, 800473e <__swsetup_r+0xc6>
 800472c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004730:	d1ba      	bne.n	80046a8 <__swsetup_r+0x30>
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	0781      	lsls	r1, r0, #30
 8004736:	bf58      	it	pl
 8004738:	6963      	ldrpl	r3, [r4, #20]
 800473a:	60a3      	str	r3, [r4, #8]
 800473c:	e7f4      	b.n	8004728 <__swsetup_r+0xb0>
 800473e:	2000      	movs	r0, #0
 8004740:	e7f7      	b.n	8004732 <__swsetup_r+0xba>
 8004742:	bf00      	nop
 8004744:	2000000c 	.word	0x2000000c
 8004748:	08005614 	.word	0x08005614
 800474c:	08005634 	.word	0x08005634
 8004750:	080055f4 	.word	0x080055f4

08004754 <abort>:
 8004754:	b508      	push	{r3, lr}
 8004756:	2006      	movs	r0, #6
 8004758:	f000 fcf6 	bl	8005148 <raise>
 800475c:	2001      	movs	r0, #1
 800475e:	f7fc fb7f 	bl	8000e60 <_exit>
	...

08004764 <__sflush_r>:
 8004764:	898a      	ldrh	r2, [r1, #12]
 8004766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800476a:	4605      	mov	r5, r0
 800476c:	0710      	lsls	r0, r2, #28
 800476e:	460c      	mov	r4, r1
 8004770:	d458      	bmi.n	8004824 <__sflush_r+0xc0>
 8004772:	684b      	ldr	r3, [r1, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	dc05      	bgt.n	8004784 <__sflush_r+0x20>
 8004778:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	dc02      	bgt.n	8004784 <__sflush_r+0x20>
 800477e:	2000      	movs	r0, #0
 8004780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004786:	2e00      	cmp	r6, #0
 8004788:	d0f9      	beq.n	800477e <__sflush_r+0x1a>
 800478a:	2300      	movs	r3, #0
 800478c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004790:	682f      	ldr	r7, [r5, #0]
 8004792:	602b      	str	r3, [r5, #0]
 8004794:	d032      	beq.n	80047fc <__sflush_r+0x98>
 8004796:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	075a      	lsls	r2, r3, #29
 800479c:	d505      	bpl.n	80047aa <__sflush_r+0x46>
 800479e:	6863      	ldr	r3, [r4, #4]
 80047a0:	1ac0      	subs	r0, r0, r3
 80047a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047a4:	b10b      	cbz	r3, 80047aa <__sflush_r+0x46>
 80047a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047a8:	1ac0      	subs	r0, r0, r3
 80047aa:	2300      	movs	r3, #0
 80047ac:	4602      	mov	r2, r0
 80047ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047b0:	6a21      	ldr	r1, [r4, #32]
 80047b2:	4628      	mov	r0, r5
 80047b4:	47b0      	blx	r6
 80047b6:	1c43      	adds	r3, r0, #1
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	d106      	bne.n	80047ca <__sflush_r+0x66>
 80047bc:	6829      	ldr	r1, [r5, #0]
 80047be:	291d      	cmp	r1, #29
 80047c0:	d82c      	bhi.n	800481c <__sflush_r+0xb8>
 80047c2:	4a2a      	ldr	r2, [pc, #168]	; (800486c <__sflush_r+0x108>)
 80047c4:	40ca      	lsrs	r2, r1
 80047c6:	07d6      	lsls	r6, r2, #31
 80047c8:	d528      	bpl.n	800481c <__sflush_r+0xb8>
 80047ca:	2200      	movs	r2, #0
 80047cc:	6062      	str	r2, [r4, #4]
 80047ce:	04d9      	lsls	r1, r3, #19
 80047d0:	6922      	ldr	r2, [r4, #16]
 80047d2:	6022      	str	r2, [r4, #0]
 80047d4:	d504      	bpl.n	80047e0 <__sflush_r+0x7c>
 80047d6:	1c42      	adds	r2, r0, #1
 80047d8:	d101      	bne.n	80047de <__sflush_r+0x7a>
 80047da:	682b      	ldr	r3, [r5, #0]
 80047dc:	b903      	cbnz	r3, 80047e0 <__sflush_r+0x7c>
 80047de:	6560      	str	r0, [r4, #84]	; 0x54
 80047e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047e2:	602f      	str	r7, [r5, #0]
 80047e4:	2900      	cmp	r1, #0
 80047e6:	d0ca      	beq.n	800477e <__sflush_r+0x1a>
 80047e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047ec:	4299      	cmp	r1, r3
 80047ee:	d002      	beq.n	80047f6 <__sflush_r+0x92>
 80047f0:	4628      	mov	r0, r5
 80047f2:	f000 fa07 	bl	8004c04 <_free_r>
 80047f6:	2000      	movs	r0, #0
 80047f8:	6360      	str	r0, [r4, #52]	; 0x34
 80047fa:	e7c1      	b.n	8004780 <__sflush_r+0x1c>
 80047fc:	6a21      	ldr	r1, [r4, #32]
 80047fe:	2301      	movs	r3, #1
 8004800:	4628      	mov	r0, r5
 8004802:	47b0      	blx	r6
 8004804:	1c41      	adds	r1, r0, #1
 8004806:	d1c7      	bne.n	8004798 <__sflush_r+0x34>
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0c4      	beq.n	8004798 <__sflush_r+0x34>
 800480e:	2b1d      	cmp	r3, #29
 8004810:	d001      	beq.n	8004816 <__sflush_r+0xb2>
 8004812:	2b16      	cmp	r3, #22
 8004814:	d101      	bne.n	800481a <__sflush_r+0xb6>
 8004816:	602f      	str	r7, [r5, #0]
 8004818:	e7b1      	b.n	800477e <__sflush_r+0x1a>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004820:	81a3      	strh	r3, [r4, #12]
 8004822:	e7ad      	b.n	8004780 <__sflush_r+0x1c>
 8004824:	690f      	ldr	r7, [r1, #16]
 8004826:	2f00      	cmp	r7, #0
 8004828:	d0a9      	beq.n	800477e <__sflush_r+0x1a>
 800482a:	0793      	lsls	r3, r2, #30
 800482c:	680e      	ldr	r6, [r1, #0]
 800482e:	bf08      	it	eq
 8004830:	694b      	ldreq	r3, [r1, #20]
 8004832:	600f      	str	r7, [r1, #0]
 8004834:	bf18      	it	ne
 8004836:	2300      	movne	r3, #0
 8004838:	eba6 0807 	sub.w	r8, r6, r7
 800483c:	608b      	str	r3, [r1, #8]
 800483e:	f1b8 0f00 	cmp.w	r8, #0
 8004842:	dd9c      	ble.n	800477e <__sflush_r+0x1a>
 8004844:	6a21      	ldr	r1, [r4, #32]
 8004846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004848:	4643      	mov	r3, r8
 800484a:	463a      	mov	r2, r7
 800484c:	4628      	mov	r0, r5
 800484e:	47b0      	blx	r6
 8004850:	2800      	cmp	r0, #0
 8004852:	dc06      	bgt.n	8004862 <__sflush_r+0xfe>
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800485a:	81a3      	strh	r3, [r4, #12]
 800485c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004860:	e78e      	b.n	8004780 <__sflush_r+0x1c>
 8004862:	4407      	add	r7, r0
 8004864:	eba8 0800 	sub.w	r8, r8, r0
 8004868:	e7e9      	b.n	800483e <__sflush_r+0xda>
 800486a:	bf00      	nop
 800486c:	20400001 	.word	0x20400001

08004870 <_fflush_r>:
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	690b      	ldr	r3, [r1, #16]
 8004874:	4605      	mov	r5, r0
 8004876:	460c      	mov	r4, r1
 8004878:	b913      	cbnz	r3, 8004880 <_fflush_r+0x10>
 800487a:	2500      	movs	r5, #0
 800487c:	4628      	mov	r0, r5
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	b118      	cbz	r0, 800488a <_fflush_r+0x1a>
 8004882:	6983      	ldr	r3, [r0, #24]
 8004884:	b90b      	cbnz	r3, 800488a <_fflush_r+0x1a>
 8004886:	f000 f887 	bl	8004998 <__sinit>
 800488a:	4b14      	ldr	r3, [pc, #80]	; (80048dc <_fflush_r+0x6c>)
 800488c:	429c      	cmp	r4, r3
 800488e:	d11b      	bne.n	80048c8 <_fflush_r+0x58>
 8004890:	686c      	ldr	r4, [r5, #4]
 8004892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ef      	beq.n	800487a <_fflush_r+0xa>
 800489a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800489c:	07d0      	lsls	r0, r2, #31
 800489e:	d404      	bmi.n	80048aa <_fflush_r+0x3a>
 80048a0:	0599      	lsls	r1, r3, #22
 80048a2:	d402      	bmi.n	80048aa <_fflush_r+0x3a>
 80048a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048a6:	f000 f915 	bl	8004ad4 <__retarget_lock_acquire_recursive>
 80048aa:	4628      	mov	r0, r5
 80048ac:	4621      	mov	r1, r4
 80048ae:	f7ff ff59 	bl	8004764 <__sflush_r>
 80048b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048b4:	07da      	lsls	r2, r3, #31
 80048b6:	4605      	mov	r5, r0
 80048b8:	d4e0      	bmi.n	800487c <_fflush_r+0xc>
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	059b      	lsls	r3, r3, #22
 80048be:	d4dd      	bmi.n	800487c <_fflush_r+0xc>
 80048c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048c2:	f000 f908 	bl	8004ad6 <__retarget_lock_release_recursive>
 80048c6:	e7d9      	b.n	800487c <_fflush_r+0xc>
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <_fflush_r+0x70>)
 80048ca:	429c      	cmp	r4, r3
 80048cc:	d101      	bne.n	80048d2 <_fflush_r+0x62>
 80048ce:	68ac      	ldr	r4, [r5, #8]
 80048d0:	e7df      	b.n	8004892 <_fflush_r+0x22>
 80048d2:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <_fflush_r+0x74>)
 80048d4:	429c      	cmp	r4, r3
 80048d6:	bf08      	it	eq
 80048d8:	68ec      	ldreq	r4, [r5, #12]
 80048da:	e7da      	b.n	8004892 <_fflush_r+0x22>
 80048dc:	08005614 	.word	0x08005614
 80048e0:	08005634 	.word	0x08005634
 80048e4:	080055f4 	.word	0x080055f4

080048e8 <std>:
 80048e8:	2300      	movs	r3, #0
 80048ea:	b510      	push	{r4, lr}
 80048ec:	4604      	mov	r4, r0
 80048ee:	e9c0 3300 	strd	r3, r3, [r0]
 80048f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048f6:	6083      	str	r3, [r0, #8]
 80048f8:	8181      	strh	r1, [r0, #12]
 80048fa:	6643      	str	r3, [r0, #100]	; 0x64
 80048fc:	81c2      	strh	r2, [r0, #14]
 80048fe:	6183      	str	r3, [r0, #24]
 8004900:	4619      	mov	r1, r3
 8004902:	2208      	movs	r2, #8
 8004904:	305c      	adds	r0, #92	; 0x5c
 8004906:	f7ff fa27 	bl	8003d58 <memset>
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <std+0x38>)
 800490c:	6263      	str	r3, [r4, #36]	; 0x24
 800490e:	4b05      	ldr	r3, [pc, #20]	; (8004924 <std+0x3c>)
 8004910:	62a3      	str	r3, [r4, #40]	; 0x28
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <std+0x40>)
 8004914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <std+0x44>)
 8004918:	6224      	str	r4, [r4, #32]
 800491a:	6323      	str	r3, [r4, #48]	; 0x30
 800491c:	bd10      	pop	{r4, pc}
 800491e:	bf00      	nop
 8004920:	08005181 	.word	0x08005181
 8004924:	080051a3 	.word	0x080051a3
 8004928:	080051db 	.word	0x080051db
 800492c:	080051ff 	.word	0x080051ff

08004930 <_cleanup_r>:
 8004930:	4901      	ldr	r1, [pc, #4]	; (8004938 <_cleanup_r+0x8>)
 8004932:	f000 b8af 	b.w	8004a94 <_fwalk_reent>
 8004936:	bf00      	nop
 8004938:	08004871 	.word	0x08004871

0800493c <__sfmoreglue>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	2268      	movs	r2, #104	; 0x68
 8004940:	1e4d      	subs	r5, r1, #1
 8004942:	4355      	muls	r5, r2
 8004944:	460e      	mov	r6, r1
 8004946:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800494a:	f000 f9c7 	bl	8004cdc <_malloc_r>
 800494e:	4604      	mov	r4, r0
 8004950:	b140      	cbz	r0, 8004964 <__sfmoreglue+0x28>
 8004952:	2100      	movs	r1, #0
 8004954:	e9c0 1600 	strd	r1, r6, [r0]
 8004958:	300c      	adds	r0, #12
 800495a:	60a0      	str	r0, [r4, #8]
 800495c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004960:	f7ff f9fa 	bl	8003d58 <memset>
 8004964:	4620      	mov	r0, r4
 8004966:	bd70      	pop	{r4, r5, r6, pc}

08004968 <__sfp_lock_acquire>:
 8004968:	4801      	ldr	r0, [pc, #4]	; (8004970 <__sfp_lock_acquire+0x8>)
 800496a:	f000 b8b3 	b.w	8004ad4 <__retarget_lock_acquire_recursive>
 800496e:	bf00      	nop
 8004970:	200003e5 	.word	0x200003e5

08004974 <__sfp_lock_release>:
 8004974:	4801      	ldr	r0, [pc, #4]	; (800497c <__sfp_lock_release+0x8>)
 8004976:	f000 b8ae 	b.w	8004ad6 <__retarget_lock_release_recursive>
 800497a:	bf00      	nop
 800497c:	200003e5 	.word	0x200003e5

08004980 <__sinit_lock_acquire>:
 8004980:	4801      	ldr	r0, [pc, #4]	; (8004988 <__sinit_lock_acquire+0x8>)
 8004982:	f000 b8a7 	b.w	8004ad4 <__retarget_lock_acquire_recursive>
 8004986:	bf00      	nop
 8004988:	200003e6 	.word	0x200003e6

0800498c <__sinit_lock_release>:
 800498c:	4801      	ldr	r0, [pc, #4]	; (8004994 <__sinit_lock_release+0x8>)
 800498e:	f000 b8a2 	b.w	8004ad6 <__retarget_lock_release_recursive>
 8004992:	bf00      	nop
 8004994:	200003e6 	.word	0x200003e6

08004998 <__sinit>:
 8004998:	b510      	push	{r4, lr}
 800499a:	4604      	mov	r4, r0
 800499c:	f7ff fff0 	bl	8004980 <__sinit_lock_acquire>
 80049a0:	69a3      	ldr	r3, [r4, #24]
 80049a2:	b11b      	cbz	r3, 80049ac <__sinit+0x14>
 80049a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a8:	f7ff bff0 	b.w	800498c <__sinit_lock_release>
 80049ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049b0:	6523      	str	r3, [r4, #80]	; 0x50
 80049b2:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <__sinit+0x68>)
 80049b4:	4a13      	ldr	r2, [pc, #76]	; (8004a04 <__sinit+0x6c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80049ba:	42a3      	cmp	r3, r4
 80049bc:	bf04      	itt	eq
 80049be:	2301      	moveq	r3, #1
 80049c0:	61a3      	streq	r3, [r4, #24]
 80049c2:	4620      	mov	r0, r4
 80049c4:	f000 f820 	bl	8004a08 <__sfp>
 80049c8:	6060      	str	r0, [r4, #4]
 80049ca:	4620      	mov	r0, r4
 80049cc:	f000 f81c 	bl	8004a08 <__sfp>
 80049d0:	60a0      	str	r0, [r4, #8]
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 f818 	bl	8004a08 <__sfp>
 80049d8:	2200      	movs	r2, #0
 80049da:	60e0      	str	r0, [r4, #12]
 80049dc:	2104      	movs	r1, #4
 80049de:	6860      	ldr	r0, [r4, #4]
 80049e0:	f7ff ff82 	bl	80048e8 <std>
 80049e4:	68a0      	ldr	r0, [r4, #8]
 80049e6:	2201      	movs	r2, #1
 80049e8:	2109      	movs	r1, #9
 80049ea:	f7ff ff7d 	bl	80048e8 <std>
 80049ee:	68e0      	ldr	r0, [r4, #12]
 80049f0:	2202      	movs	r2, #2
 80049f2:	2112      	movs	r1, #18
 80049f4:	f7ff ff78 	bl	80048e8 <std>
 80049f8:	2301      	movs	r3, #1
 80049fa:	61a3      	str	r3, [r4, #24]
 80049fc:	e7d2      	b.n	80049a4 <__sinit+0xc>
 80049fe:	bf00      	nop
 8004a00:	08005448 	.word	0x08005448
 8004a04:	08004931 	.word	0x08004931

08004a08 <__sfp>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	4607      	mov	r7, r0
 8004a0c:	f7ff ffac 	bl	8004968 <__sfp_lock_acquire>
 8004a10:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <__sfp+0x84>)
 8004a12:	681e      	ldr	r6, [r3, #0]
 8004a14:	69b3      	ldr	r3, [r6, #24]
 8004a16:	b913      	cbnz	r3, 8004a1e <__sfp+0x16>
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f7ff ffbd 	bl	8004998 <__sinit>
 8004a1e:	3648      	adds	r6, #72	; 0x48
 8004a20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	d503      	bpl.n	8004a30 <__sfp+0x28>
 8004a28:	6833      	ldr	r3, [r6, #0]
 8004a2a:	b30b      	cbz	r3, 8004a70 <__sfp+0x68>
 8004a2c:	6836      	ldr	r6, [r6, #0]
 8004a2e:	e7f7      	b.n	8004a20 <__sfp+0x18>
 8004a30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a34:	b9d5      	cbnz	r5, 8004a6c <__sfp+0x64>
 8004a36:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <__sfp+0x88>)
 8004a38:	60e3      	str	r3, [r4, #12]
 8004a3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a3e:	6665      	str	r5, [r4, #100]	; 0x64
 8004a40:	f000 f847 	bl	8004ad2 <__retarget_lock_init_recursive>
 8004a44:	f7ff ff96 	bl	8004974 <__sfp_lock_release>
 8004a48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a50:	6025      	str	r5, [r4, #0]
 8004a52:	61a5      	str	r5, [r4, #24]
 8004a54:	2208      	movs	r2, #8
 8004a56:	4629      	mov	r1, r5
 8004a58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a5c:	f7ff f97c 	bl	8003d58 <memset>
 8004a60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a68:	4620      	mov	r0, r4
 8004a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a6c:	3468      	adds	r4, #104	; 0x68
 8004a6e:	e7d9      	b.n	8004a24 <__sfp+0x1c>
 8004a70:	2104      	movs	r1, #4
 8004a72:	4638      	mov	r0, r7
 8004a74:	f7ff ff62 	bl	800493c <__sfmoreglue>
 8004a78:	4604      	mov	r4, r0
 8004a7a:	6030      	str	r0, [r6, #0]
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d1d5      	bne.n	8004a2c <__sfp+0x24>
 8004a80:	f7ff ff78 	bl	8004974 <__sfp_lock_release>
 8004a84:	230c      	movs	r3, #12
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	e7ee      	b.n	8004a68 <__sfp+0x60>
 8004a8a:	bf00      	nop
 8004a8c:	08005448 	.word	0x08005448
 8004a90:	ffff0001 	.word	0xffff0001

08004a94 <_fwalk_reent>:
 8004a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a98:	4606      	mov	r6, r0
 8004a9a:	4688      	mov	r8, r1
 8004a9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004aa0:	2700      	movs	r7, #0
 8004aa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004aa6:	f1b9 0901 	subs.w	r9, r9, #1
 8004aaa:	d505      	bpl.n	8004ab8 <_fwalk_reent+0x24>
 8004aac:	6824      	ldr	r4, [r4, #0]
 8004aae:	2c00      	cmp	r4, #0
 8004ab0:	d1f7      	bne.n	8004aa2 <_fwalk_reent+0xe>
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ab8:	89ab      	ldrh	r3, [r5, #12]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d907      	bls.n	8004ace <_fwalk_reent+0x3a>
 8004abe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	d003      	beq.n	8004ace <_fwalk_reent+0x3a>
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4630      	mov	r0, r6
 8004aca:	47c0      	blx	r8
 8004acc:	4307      	orrs	r7, r0
 8004ace:	3568      	adds	r5, #104	; 0x68
 8004ad0:	e7e9      	b.n	8004aa6 <_fwalk_reent+0x12>

08004ad2 <__retarget_lock_init_recursive>:
 8004ad2:	4770      	bx	lr

08004ad4 <__retarget_lock_acquire_recursive>:
 8004ad4:	4770      	bx	lr

08004ad6 <__retarget_lock_release_recursive>:
 8004ad6:	4770      	bx	lr

08004ad8 <__swhatbuf_r>:
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	460e      	mov	r6, r1
 8004adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae0:	2900      	cmp	r1, #0
 8004ae2:	b096      	sub	sp, #88	; 0x58
 8004ae4:	4614      	mov	r4, r2
 8004ae6:	461d      	mov	r5, r3
 8004ae8:	da08      	bge.n	8004afc <__swhatbuf_r+0x24>
 8004aea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	602a      	str	r2, [r5, #0]
 8004af2:	061a      	lsls	r2, r3, #24
 8004af4:	d410      	bmi.n	8004b18 <__swhatbuf_r+0x40>
 8004af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004afa:	e00e      	b.n	8004b1a <__swhatbuf_r+0x42>
 8004afc:	466a      	mov	r2, sp
 8004afe:	f000 fba5 	bl	800524c <_fstat_r>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	dbf1      	blt.n	8004aea <__swhatbuf_r+0x12>
 8004b06:	9a01      	ldr	r2, [sp, #4]
 8004b08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b10:	425a      	negs	r2, r3
 8004b12:	415a      	adcs	r2, r3
 8004b14:	602a      	str	r2, [r5, #0]
 8004b16:	e7ee      	b.n	8004af6 <__swhatbuf_r+0x1e>
 8004b18:	2340      	movs	r3, #64	; 0x40
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	b016      	add	sp, #88	; 0x58
 8004b20:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b24 <__smakebuf_r>:
 8004b24:	898b      	ldrh	r3, [r1, #12]
 8004b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b28:	079d      	lsls	r5, r3, #30
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	d507      	bpl.n	8004b40 <__smakebuf_r+0x1c>
 8004b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	6123      	str	r3, [r4, #16]
 8004b38:	2301      	movs	r3, #1
 8004b3a:	6163      	str	r3, [r4, #20]
 8004b3c:	b002      	add	sp, #8
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}
 8004b40:	ab01      	add	r3, sp, #4
 8004b42:	466a      	mov	r2, sp
 8004b44:	f7ff ffc8 	bl	8004ad8 <__swhatbuf_r>
 8004b48:	9900      	ldr	r1, [sp, #0]
 8004b4a:	4605      	mov	r5, r0
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f000 f8c5 	bl	8004cdc <_malloc_r>
 8004b52:	b948      	cbnz	r0, 8004b68 <__smakebuf_r+0x44>
 8004b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b58:	059a      	lsls	r2, r3, #22
 8004b5a:	d4ef      	bmi.n	8004b3c <__smakebuf_r+0x18>
 8004b5c:	f023 0303 	bic.w	r3, r3, #3
 8004b60:	f043 0302 	orr.w	r3, r3, #2
 8004b64:	81a3      	strh	r3, [r4, #12]
 8004b66:	e7e3      	b.n	8004b30 <__smakebuf_r+0xc>
 8004b68:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <__smakebuf_r+0x7c>)
 8004b6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	6020      	str	r0, [r4, #0]
 8004b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b74:	81a3      	strh	r3, [r4, #12]
 8004b76:	9b00      	ldr	r3, [sp, #0]
 8004b78:	6163      	str	r3, [r4, #20]
 8004b7a:	9b01      	ldr	r3, [sp, #4]
 8004b7c:	6120      	str	r0, [r4, #16]
 8004b7e:	b15b      	cbz	r3, 8004b98 <__smakebuf_r+0x74>
 8004b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b84:	4630      	mov	r0, r6
 8004b86:	f000 fb73 	bl	8005270 <_isatty_r>
 8004b8a:	b128      	cbz	r0, 8004b98 <__smakebuf_r+0x74>
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	f023 0303 	bic.w	r3, r3, #3
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	81a3      	strh	r3, [r4, #12]
 8004b98:	89a0      	ldrh	r0, [r4, #12]
 8004b9a:	4305      	orrs	r5, r0
 8004b9c:	81a5      	strh	r5, [r4, #12]
 8004b9e:	e7cd      	b.n	8004b3c <__smakebuf_r+0x18>
 8004ba0:	08004931 	.word	0x08004931

08004ba4 <malloc>:
 8004ba4:	4b02      	ldr	r3, [pc, #8]	; (8004bb0 <malloc+0xc>)
 8004ba6:	4601      	mov	r1, r0
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	f000 b897 	b.w	8004cdc <_malloc_r>
 8004bae:	bf00      	nop
 8004bb0:	2000000c 	.word	0x2000000c

08004bb4 <memcpy>:
 8004bb4:	440a      	add	r2, r1
 8004bb6:	4291      	cmp	r1, r2
 8004bb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004bbc:	d100      	bne.n	8004bc0 <memcpy+0xc>
 8004bbe:	4770      	bx	lr
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bca:	4291      	cmp	r1, r2
 8004bcc:	d1f9      	bne.n	8004bc2 <memcpy+0xe>
 8004bce:	bd10      	pop	{r4, pc}

08004bd0 <memmove>:
 8004bd0:	4288      	cmp	r0, r1
 8004bd2:	b510      	push	{r4, lr}
 8004bd4:	eb01 0402 	add.w	r4, r1, r2
 8004bd8:	d902      	bls.n	8004be0 <memmove+0x10>
 8004bda:	4284      	cmp	r4, r0
 8004bdc:	4623      	mov	r3, r4
 8004bde:	d807      	bhi.n	8004bf0 <memmove+0x20>
 8004be0:	1e43      	subs	r3, r0, #1
 8004be2:	42a1      	cmp	r1, r4
 8004be4:	d008      	beq.n	8004bf8 <memmove+0x28>
 8004be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bee:	e7f8      	b.n	8004be2 <memmove+0x12>
 8004bf0:	4402      	add	r2, r0
 8004bf2:	4601      	mov	r1, r0
 8004bf4:	428a      	cmp	r2, r1
 8004bf6:	d100      	bne.n	8004bfa <memmove+0x2a>
 8004bf8:	bd10      	pop	{r4, pc}
 8004bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c02:	e7f7      	b.n	8004bf4 <memmove+0x24>

08004c04 <_free_r>:
 8004c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c06:	2900      	cmp	r1, #0
 8004c08:	d044      	beq.n	8004c94 <_free_r+0x90>
 8004c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c0e:	9001      	str	r0, [sp, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f1a1 0404 	sub.w	r4, r1, #4
 8004c16:	bfb8      	it	lt
 8004c18:	18e4      	addlt	r4, r4, r3
 8004c1a:	f000 fb4b 	bl	80052b4 <__malloc_lock>
 8004c1e:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <_free_r+0x94>)
 8004c20:	9801      	ldr	r0, [sp, #4]
 8004c22:	6813      	ldr	r3, [r2, #0]
 8004c24:	b933      	cbnz	r3, 8004c34 <_free_r+0x30>
 8004c26:	6063      	str	r3, [r4, #4]
 8004c28:	6014      	str	r4, [r2, #0]
 8004c2a:	b003      	add	sp, #12
 8004c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c30:	f000 bb46 	b.w	80052c0 <__malloc_unlock>
 8004c34:	42a3      	cmp	r3, r4
 8004c36:	d908      	bls.n	8004c4a <_free_r+0x46>
 8004c38:	6825      	ldr	r5, [r4, #0]
 8004c3a:	1961      	adds	r1, r4, r5
 8004c3c:	428b      	cmp	r3, r1
 8004c3e:	bf01      	itttt	eq
 8004c40:	6819      	ldreq	r1, [r3, #0]
 8004c42:	685b      	ldreq	r3, [r3, #4]
 8004c44:	1949      	addeq	r1, r1, r5
 8004c46:	6021      	streq	r1, [r4, #0]
 8004c48:	e7ed      	b.n	8004c26 <_free_r+0x22>
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	b10b      	cbz	r3, 8004c54 <_free_r+0x50>
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	d9fa      	bls.n	8004c4a <_free_r+0x46>
 8004c54:	6811      	ldr	r1, [r2, #0]
 8004c56:	1855      	adds	r5, r2, r1
 8004c58:	42a5      	cmp	r5, r4
 8004c5a:	d10b      	bne.n	8004c74 <_free_r+0x70>
 8004c5c:	6824      	ldr	r4, [r4, #0]
 8004c5e:	4421      	add	r1, r4
 8004c60:	1854      	adds	r4, r2, r1
 8004c62:	42a3      	cmp	r3, r4
 8004c64:	6011      	str	r1, [r2, #0]
 8004c66:	d1e0      	bne.n	8004c2a <_free_r+0x26>
 8004c68:	681c      	ldr	r4, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	6053      	str	r3, [r2, #4]
 8004c6e:	4421      	add	r1, r4
 8004c70:	6011      	str	r1, [r2, #0]
 8004c72:	e7da      	b.n	8004c2a <_free_r+0x26>
 8004c74:	d902      	bls.n	8004c7c <_free_r+0x78>
 8004c76:	230c      	movs	r3, #12
 8004c78:	6003      	str	r3, [r0, #0]
 8004c7a:	e7d6      	b.n	8004c2a <_free_r+0x26>
 8004c7c:	6825      	ldr	r5, [r4, #0]
 8004c7e:	1961      	adds	r1, r4, r5
 8004c80:	428b      	cmp	r3, r1
 8004c82:	bf04      	itt	eq
 8004c84:	6819      	ldreq	r1, [r3, #0]
 8004c86:	685b      	ldreq	r3, [r3, #4]
 8004c88:	6063      	str	r3, [r4, #4]
 8004c8a:	bf04      	itt	eq
 8004c8c:	1949      	addeq	r1, r1, r5
 8004c8e:	6021      	streq	r1, [r4, #0]
 8004c90:	6054      	str	r4, [r2, #4]
 8004c92:	e7ca      	b.n	8004c2a <_free_r+0x26>
 8004c94:	b003      	add	sp, #12
 8004c96:	bd30      	pop	{r4, r5, pc}
 8004c98:	200003e8 	.word	0x200003e8

08004c9c <sbrk_aligned>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4e0e      	ldr	r6, [pc, #56]	; (8004cd8 <sbrk_aligned+0x3c>)
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	6831      	ldr	r1, [r6, #0]
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	b911      	cbnz	r1, 8004cae <sbrk_aligned+0x12>
 8004ca8:	f000 fa16 	bl	80050d8 <_sbrk_r>
 8004cac:	6030      	str	r0, [r6, #0]
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f000 fa11 	bl	80050d8 <_sbrk_r>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d00a      	beq.n	8004cd0 <sbrk_aligned+0x34>
 8004cba:	1cc4      	adds	r4, r0, #3
 8004cbc:	f024 0403 	bic.w	r4, r4, #3
 8004cc0:	42a0      	cmp	r0, r4
 8004cc2:	d007      	beq.n	8004cd4 <sbrk_aligned+0x38>
 8004cc4:	1a21      	subs	r1, r4, r0
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f000 fa06 	bl	80050d8 <_sbrk_r>
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d101      	bne.n	8004cd4 <sbrk_aligned+0x38>
 8004cd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	200003ec 	.word	0x200003ec

08004cdc <_malloc_r>:
 8004cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce0:	1ccd      	adds	r5, r1, #3
 8004ce2:	f025 0503 	bic.w	r5, r5, #3
 8004ce6:	3508      	adds	r5, #8
 8004ce8:	2d0c      	cmp	r5, #12
 8004cea:	bf38      	it	cc
 8004cec:	250c      	movcc	r5, #12
 8004cee:	2d00      	cmp	r5, #0
 8004cf0:	4607      	mov	r7, r0
 8004cf2:	db01      	blt.n	8004cf8 <_malloc_r+0x1c>
 8004cf4:	42a9      	cmp	r1, r5
 8004cf6:	d905      	bls.n	8004d04 <_malloc_r+0x28>
 8004cf8:	230c      	movs	r3, #12
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	4630      	mov	r0, r6
 8004d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d04:	4e2e      	ldr	r6, [pc, #184]	; (8004dc0 <_malloc_r+0xe4>)
 8004d06:	f000 fad5 	bl	80052b4 <__malloc_lock>
 8004d0a:	6833      	ldr	r3, [r6, #0]
 8004d0c:	461c      	mov	r4, r3
 8004d0e:	bb34      	cbnz	r4, 8004d5e <_malloc_r+0x82>
 8004d10:	4629      	mov	r1, r5
 8004d12:	4638      	mov	r0, r7
 8004d14:	f7ff ffc2 	bl	8004c9c <sbrk_aligned>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	d14d      	bne.n	8004dba <_malloc_r+0xde>
 8004d1e:	6834      	ldr	r4, [r6, #0]
 8004d20:	4626      	mov	r6, r4
 8004d22:	2e00      	cmp	r6, #0
 8004d24:	d140      	bne.n	8004da8 <_malloc_r+0xcc>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	4631      	mov	r1, r6
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	eb04 0803 	add.w	r8, r4, r3
 8004d30:	f000 f9d2 	bl	80050d8 <_sbrk_r>
 8004d34:	4580      	cmp	r8, r0
 8004d36:	d13a      	bne.n	8004dae <_malloc_r+0xd2>
 8004d38:	6821      	ldr	r1, [r4, #0]
 8004d3a:	3503      	adds	r5, #3
 8004d3c:	1a6d      	subs	r5, r5, r1
 8004d3e:	f025 0503 	bic.w	r5, r5, #3
 8004d42:	3508      	adds	r5, #8
 8004d44:	2d0c      	cmp	r5, #12
 8004d46:	bf38      	it	cc
 8004d48:	250c      	movcc	r5, #12
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f7ff ffa5 	bl	8004c9c <sbrk_aligned>
 8004d52:	3001      	adds	r0, #1
 8004d54:	d02b      	beq.n	8004dae <_malloc_r+0xd2>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	442b      	add	r3, r5
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	e00e      	b.n	8004d7c <_malloc_r+0xa0>
 8004d5e:	6822      	ldr	r2, [r4, #0]
 8004d60:	1b52      	subs	r2, r2, r5
 8004d62:	d41e      	bmi.n	8004da2 <_malloc_r+0xc6>
 8004d64:	2a0b      	cmp	r2, #11
 8004d66:	d916      	bls.n	8004d96 <_malloc_r+0xba>
 8004d68:	1961      	adds	r1, r4, r5
 8004d6a:	42a3      	cmp	r3, r4
 8004d6c:	6025      	str	r5, [r4, #0]
 8004d6e:	bf18      	it	ne
 8004d70:	6059      	strne	r1, [r3, #4]
 8004d72:	6863      	ldr	r3, [r4, #4]
 8004d74:	bf08      	it	eq
 8004d76:	6031      	streq	r1, [r6, #0]
 8004d78:	5162      	str	r2, [r4, r5]
 8004d7a:	604b      	str	r3, [r1, #4]
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	f104 060b 	add.w	r6, r4, #11
 8004d82:	f000 fa9d 	bl	80052c0 <__malloc_unlock>
 8004d86:	f026 0607 	bic.w	r6, r6, #7
 8004d8a:	1d23      	adds	r3, r4, #4
 8004d8c:	1af2      	subs	r2, r6, r3
 8004d8e:	d0b6      	beq.n	8004cfe <_malloc_r+0x22>
 8004d90:	1b9b      	subs	r3, r3, r6
 8004d92:	50a3      	str	r3, [r4, r2]
 8004d94:	e7b3      	b.n	8004cfe <_malloc_r+0x22>
 8004d96:	6862      	ldr	r2, [r4, #4]
 8004d98:	42a3      	cmp	r3, r4
 8004d9a:	bf0c      	ite	eq
 8004d9c:	6032      	streq	r2, [r6, #0]
 8004d9e:	605a      	strne	r2, [r3, #4]
 8004da0:	e7ec      	b.n	8004d7c <_malloc_r+0xa0>
 8004da2:	4623      	mov	r3, r4
 8004da4:	6864      	ldr	r4, [r4, #4]
 8004da6:	e7b2      	b.n	8004d0e <_malloc_r+0x32>
 8004da8:	4634      	mov	r4, r6
 8004daa:	6876      	ldr	r6, [r6, #4]
 8004dac:	e7b9      	b.n	8004d22 <_malloc_r+0x46>
 8004dae:	230c      	movs	r3, #12
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	4638      	mov	r0, r7
 8004db4:	f000 fa84 	bl	80052c0 <__malloc_unlock>
 8004db8:	e7a1      	b.n	8004cfe <_malloc_r+0x22>
 8004dba:	6025      	str	r5, [r4, #0]
 8004dbc:	e7de      	b.n	8004d7c <_malloc_r+0xa0>
 8004dbe:	bf00      	nop
 8004dc0:	200003e8 	.word	0x200003e8

08004dc4 <_realloc_r>:
 8004dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc8:	4680      	mov	r8, r0
 8004dca:	4614      	mov	r4, r2
 8004dcc:	460e      	mov	r6, r1
 8004dce:	b921      	cbnz	r1, 8004dda <_realloc_r+0x16>
 8004dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	f7ff bf81 	b.w	8004cdc <_malloc_r>
 8004dda:	b92a      	cbnz	r2, 8004de8 <_realloc_r+0x24>
 8004ddc:	f7ff ff12 	bl	8004c04 <_free_r>
 8004de0:	4625      	mov	r5, r4
 8004de2:	4628      	mov	r0, r5
 8004de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de8:	f000 fa70 	bl	80052cc <_malloc_usable_size_r>
 8004dec:	4284      	cmp	r4, r0
 8004dee:	4607      	mov	r7, r0
 8004df0:	d802      	bhi.n	8004df8 <_realloc_r+0x34>
 8004df2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004df6:	d812      	bhi.n	8004e1e <_realloc_r+0x5a>
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4640      	mov	r0, r8
 8004dfc:	f7ff ff6e 	bl	8004cdc <_malloc_r>
 8004e00:	4605      	mov	r5, r0
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d0ed      	beq.n	8004de2 <_realloc_r+0x1e>
 8004e06:	42bc      	cmp	r4, r7
 8004e08:	4622      	mov	r2, r4
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	bf28      	it	cs
 8004e0e:	463a      	movcs	r2, r7
 8004e10:	f7ff fed0 	bl	8004bb4 <memcpy>
 8004e14:	4631      	mov	r1, r6
 8004e16:	4640      	mov	r0, r8
 8004e18:	f7ff fef4 	bl	8004c04 <_free_r>
 8004e1c:	e7e1      	b.n	8004de2 <_realloc_r+0x1e>
 8004e1e:	4635      	mov	r5, r6
 8004e20:	e7df      	b.n	8004de2 <_realloc_r+0x1e>

08004e22 <__ssputs_r>:
 8004e22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e26:	688e      	ldr	r6, [r1, #8]
 8004e28:	429e      	cmp	r6, r3
 8004e2a:	4682      	mov	sl, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	4690      	mov	r8, r2
 8004e30:	461f      	mov	r7, r3
 8004e32:	d838      	bhi.n	8004ea6 <__ssputs_r+0x84>
 8004e34:	898a      	ldrh	r2, [r1, #12]
 8004e36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e3a:	d032      	beq.n	8004ea2 <__ssputs_r+0x80>
 8004e3c:	6825      	ldr	r5, [r4, #0]
 8004e3e:	6909      	ldr	r1, [r1, #16]
 8004e40:	eba5 0901 	sub.w	r9, r5, r1
 8004e44:	6965      	ldr	r5, [r4, #20]
 8004e46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e4e:	3301      	adds	r3, #1
 8004e50:	444b      	add	r3, r9
 8004e52:	106d      	asrs	r5, r5, #1
 8004e54:	429d      	cmp	r5, r3
 8004e56:	bf38      	it	cc
 8004e58:	461d      	movcc	r5, r3
 8004e5a:	0553      	lsls	r3, r2, #21
 8004e5c:	d531      	bpl.n	8004ec2 <__ssputs_r+0xa0>
 8004e5e:	4629      	mov	r1, r5
 8004e60:	f7ff ff3c 	bl	8004cdc <_malloc_r>
 8004e64:	4606      	mov	r6, r0
 8004e66:	b950      	cbnz	r0, 8004e7e <__ssputs_r+0x5c>
 8004e68:	230c      	movs	r3, #12
 8004e6a:	f8ca 3000 	str.w	r3, [sl]
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e74:	81a3      	strh	r3, [r4, #12]
 8004e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e7e:	6921      	ldr	r1, [r4, #16]
 8004e80:	464a      	mov	r2, r9
 8004e82:	f7ff fe97 	bl	8004bb4 <memcpy>
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e90:	81a3      	strh	r3, [r4, #12]
 8004e92:	6126      	str	r6, [r4, #16]
 8004e94:	6165      	str	r5, [r4, #20]
 8004e96:	444e      	add	r6, r9
 8004e98:	eba5 0509 	sub.w	r5, r5, r9
 8004e9c:	6026      	str	r6, [r4, #0]
 8004e9e:	60a5      	str	r5, [r4, #8]
 8004ea0:	463e      	mov	r6, r7
 8004ea2:	42be      	cmp	r6, r7
 8004ea4:	d900      	bls.n	8004ea8 <__ssputs_r+0x86>
 8004ea6:	463e      	mov	r6, r7
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	4632      	mov	r2, r6
 8004eac:	4641      	mov	r1, r8
 8004eae:	f7ff fe8f 	bl	8004bd0 <memmove>
 8004eb2:	68a3      	ldr	r3, [r4, #8]
 8004eb4:	1b9b      	subs	r3, r3, r6
 8004eb6:	60a3      	str	r3, [r4, #8]
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	4433      	add	r3, r6
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	e7db      	b.n	8004e7a <__ssputs_r+0x58>
 8004ec2:	462a      	mov	r2, r5
 8004ec4:	f7ff ff7e 	bl	8004dc4 <_realloc_r>
 8004ec8:	4606      	mov	r6, r0
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d1e1      	bne.n	8004e92 <__ssputs_r+0x70>
 8004ece:	6921      	ldr	r1, [r4, #16]
 8004ed0:	4650      	mov	r0, sl
 8004ed2:	f7ff fe97 	bl	8004c04 <_free_r>
 8004ed6:	e7c7      	b.n	8004e68 <__ssputs_r+0x46>

08004ed8 <_svfiprintf_r>:
 8004ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004edc:	4698      	mov	r8, r3
 8004ede:	898b      	ldrh	r3, [r1, #12]
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	b09d      	sub	sp, #116	; 0x74
 8004ee4:	4607      	mov	r7, r0
 8004ee6:	460d      	mov	r5, r1
 8004ee8:	4614      	mov	r4, r2
 8004eea:	d50e      	bpl.n	8004f0a <_svfiprintf_r+0x32>
 8004eec:	690b      	ldr	r3, [r1, #16]
 8004eee:	b963      	cbnz	r3, 8004f0a <_svfiprintf_r+0x32>
 8004ef0:	2140      	movs	r1, #64	; 0x40
 8004ef2:	f7ff fef3 	bl	8004cdc <_malloc_r>
 8004ef6:	6028      	str	r0, [r5, #0]
 8004ef8:	6128      	str	r0, [r5, #16]
 8004efa:	b920      	cbnz	r0, 8004f06 <_svfiprintf_r+0x2e>
 8004efc:	230c      	movs	r3, #12
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f04:	e0d1      	b.n	80050aa <_svfiprintf_r+0x1d2>
 8004f06:	2340      	movs	r3, #64	; 0x40
 8004f08:	616b      	str	r3, [r5, #20]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0e:	2320      	movs	r3, #32
 8004f10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f14:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f18:	2330      	movs	r3, #48	; 0x30
 8004f1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80050c4 <_svfiprintf_r+0x1ec>
 8004f1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f22:	f04f 0901 	mov.w	r9, #1
 8004f26:	4623      	mov	r3, r4
 8004f28:	469a      	mov	sl, r3
 8004f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f2e:	b10a      	cbz	r2, 8004f34 <_svfiprintf_r+0x5c>
 8004f30:	2a25      	cmp	r2, #37	; 0x25
 8004f32:	d1f9      	bne.n	8004f28 <_svfiprintf_r+0x50>
 8004f34:	ebba 0b04 	subs.w	fp, sl, r4
 8004f38:	d00b      	beq.n	8004f52 <_svfiprintf_r+0x7a>
 8004f3a:	465b      	mov	r3, fp
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	4629      	mov	r1, r5
 8004f40:	4638      	mov	r0, r7
 8004f42:	f7ff ff6e 	bl	8004e22 <__ssputs_r>
 8004f46:	3001      	adds	r0, #1
 8004f48:	f000 80aa 	beq.w	80050a0 <_svfiprintf_r+0x1c8>
 8004f4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f4e:	445a      	add	r2, fp
 8004f50:	9209      	str	r2, [sp, #36]	; 0x24
 8004f52:	f89a 3000 	ldrb.w	r3, [sl]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 80a2 	beq.w	80050a0 <_svfiprintf_r+0x1c8>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f66:	f10a 0a01 	add.w	sl, sl, #1
 8004f6a:	9304      	str	r3, [sp, #16]
 8004f6c:	9307      	str	r3, [sp, #28]
 8004f6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f72:	931a      	str	r3, [sp, #104]	; 0x68
 8004f74:	4654      	mov	r4, sl
 8004f76:	2205      	movs	r2, #5
 8004f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f7c:	4851      	ldr	r0, [pc, #324]	; (80050c4 <_svfiprintf_r+0x1ec>)
 8004f7e:	f7fb f94f 	bl	8000220 <memchr>
 8004f82:	9a04      	ldr	r2, [sp, #16]
 8004f84:	b9d8      	cbnz	r0, 8004fbe <_svfiprintf_r+0xe6>
 8004f86:	06d0      	lsls	r0, r2, #27
 8004f88:	bf44      	itt	mi
 8004f8a:	2320      	movmi	r3, #32
 8004f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f90:	0711      	lsls	r1, r2, #28
 8004f92:	bf44      	itt	mi
 8004f94:	232b      	movmi	r3, #43	; 0x2b
 8004f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa0:	d015      	beq.n	8004fce <_svfiprintf_r+0xf6>
 8004fa2:	9a07      	ldr	r2, [sp, #28]
 8004fa4:	4654      	mov	r4, sl
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	f04f 0c0a 	mov.w	ip, #10
 8004fac:	4621      	mov	r1, r4
 8004fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fb2:	3b30      	subs	r3, #48	; 0x30
 8004fb4:	2b09      	cmp	r3, #9
 8004fb6:	d94e      	bls.n	8005056 <_svfiprintf_r+0x17e>
 8004fb8:	b1b0      	cbz	r0, 8004fe8 <_svfiprintf_r+0x110>
 8004fba:	9207      	str	r2, [sp, #28]
 8004fbc:	e014      	b.n	8004fe8 <_svfiprintf_r+0x110>
 8004fbe:	eba0 0308 	sub.w	r3, r0, r8
 8004fc2:	fa09 f303 	lsl.w	r3, r9, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	9304      	str	r3, [sp, #16]
 8004fca:	46a2      	mov	sl, r4
 8004fcc:	e7d2      	b.n	8004f74 <_svfiprintf_r+0x9c>
 8004fce:	9b03      	ldr	r3, [sp, #12]
 8004fd0:	1d19      	adds	r1, r3, #4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	9103      	str	r1, [sp, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bfbb      	ittet	lt
 8004fda:	425b      	neglt	r3, r3
 8004fdc:	f042 0202 	orrlt.w	r2, r2, #2
 8004fe0:	9307      	strge	r3, [sp, #28]
 8004fe2:	9307      	strlt	r3, [sp, #28]
 8004fe4:	bfb8      	it	lt
 8004fe6:	9204      	strlt	r2, [sp, #16]
 8004fe8:	7823      	ldrb	r3, [r4, #0]
 8004fea:	2b2e      	cmp	r3, #46	; 0x2e
 8004fec:	d10c      	bne.n	8005008 <_svfiprintf_r+0x130>
 8004fee:	7863      	ldrb	r3, [r4, #1]
 8004ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ff2:	d135      	bne.n	8005060 <_svfiprintf_r+0x188>
 8004ff4:	9b03      	ldr	r3, [sp, #12]
 8004ff6:	1d1a      	adds	r2, r3, #4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	9203      	str	r2, [sp, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	bfb8      	it	lt
 8005000:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005004:	3402      	adds	r4, #2
 8005006:	9305      	str	r3, [sp, #20]
 8005008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80050d4 <_svfiprintf_r+0x1fc>
 800500c:	7821      	ldrb	r1, [r4, #0]
 800500e:	2203      	movs	r2, #3
 8005010:	4650      	mov	r0, sl
 8005012:	f7fb f905 	bl	8000220 <memchr>
 8005016:	b140      	cbz	r0, 800502a <_svfiprintf_r+0x152>
 8005018:	2340      	movs	r3, #64	; 0x40
 800501a:	eba0 000a 	sub.w	r0, r0, sl
 800501e:	fa03 f000 	lsl.w	r0, r3, r0
 8005022:	9b04      	ldr	r3, [sp, #16]
 8005024:	4303      	orrs	r3, r0
 8005026:	3401      	adds	r4, #1
 8005028:	9304      	str	r3, [sp, #16]
 800502a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800502e:	4826      	ldr	r0, [pc, #152]	; (80050c8 <_svfiprintf_r+0x1f0>)
 8005030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005034:	2206      	movs	r2, #6
 8005036:	f7fb f8f3 	bl	8000220 <memchr>
 800503a:	2800      	cmp	r0, #0
 800503c:	d038      	beq.n	80050b0 <_svfiprintf_r+0x1d8>
 800503e:	4b23      	ldr	r3, [pc, #140]	; (80050cc <_svfiprintf_r+0x1f4>)
 8005040:	bb1b      	cbnz	r3, 800508a <_svfiprintf_r+0x1b2>
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	3307      	adds	r3, #7
 8005046:	f023 0307 	bic.w	r3, r3, #7
 800504a:	3308      	adds	r3, #8
 800504c:	9303      	str	r3, [sp, #12]
 800504e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005050:	4433      	add	r3, r6
 8005052:	9309      	str	r3, [sp, #36]	; 0x24
 8005054:	e767      	b.n	8004f26 <_svfiprintf_r+0x4e>
 8005056:	fb0c 3202 	mla	r2, ip, r2, r3
 800505a:	460c      	mov	r4, r1
 800505c:	2001      	movs	r0, #1
 800505e:	e7a5      	b.n	8004fac <_svfiprintf_r+0xd4>
 8005060:	2300      	movs	r3, #0
 8005062:	3401      	adds	r4, #1
 8005064:	9305      	str	r3, [sp, #20]
 8005066:	4619      	mov	r1, r3
 8005068:	f04f 0c0a 	mov.w	ip, #10
 800506c:	4620      	mov	r0, r4
 800506e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005072:	3a30      	subs	r2, #48	; 0x30
 8005074:	2a09      	cmp	r2, #9
 8005076:	d903      	bls.n	8005080 <_svfiprintf_r+0x1a8>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0c5      	beq.n	8005008 <_svfiprintf_r+0x130>
 800507c:	9105      	str	r1, [sp, #20]
 800507e:	e7c3      	b.n	8005008 <_svfiprintf_r+0x130>
 8005080:	fb0c 2101 	mla	r1, ip, r1, r2
 8005084:	4604      	mov	r4, r0
 8005086:	2301      	movs	r3, #1
 8005088:	e7f0      	b.n	800506c <_svfiprintf_r+0x194>
 800508a:	ab03      	add	r3, sp, #12
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	462a      	mov	r2, r5
 8005090:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <_svfiprintf_r+0x1f8>)
 8005092:	a904      	add	r1, sp, #16
 8005094:	4638      	mov	r0, r7
 8005096:	f3af 8000 	nop.w
 800509a:	1c42      	adds	r2, r0, #1
 800509c:	4606      	mov	r6, r0
 800509e:	d1d6      	bne.n	800504e <_svfiprintf_r+0x176>
 80050a0:	89ab      	ldrh	r3, [r5, #12]
 80050a2:	065b      	lsls	r3, r3, #25
 80050a4:	f53f af2c 	bmi.w	8004f00 <_svfiprintf_r+0x28>
 80050a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050aa:	b01d      	add	sp, #116	; 0x74
 80050ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b0:	ab03      	add	r3, sp, #12
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	462a      	mov	r2, r5
 80050b6:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <_svfiprintf_r+0x1f8>)
 80050b8:	a904      	add	r1, sp, #16
 80050ba:	4638      	mov	r0, r7
 80050bc:	f7ff f81c 	bl	80040f8 <_printf_i>
 80050c0:	e7eb      	b.n	800509a <_svfiprintf_r+0x1c2>
 80050c2:	bf00      	nop
 80050c4:	0800544c 	.word	0x0800544c
 80050c8:	08005456 	.word	0x08005456
 80050cc:	00000000 	.word	0x00000000
 80050d0:	08004e23 	.word	0x08004e23
 80050d4:	08005452 	.word	0x08005452

080050d8 <_sbrk_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4d06      	ldr	r5, [pc, #24]	; (80050f4 <_sbrk_r+0x1c>)
 80050dc:	2300      	movs	r3, #0
 80050de:	4604      	mov	r4, r0
 80050e0:	4608      	mov	r0, r1
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	f7fb ff34 	bl	8000f50 <_sbrk>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d102      	bne.n	80050f2 <_sbrk_r+0x1a>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	b103      	cbz	r3, 80050f2 <_sbrk_r+0x1a>
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	200003f0 	.word	0x200003f0

080050f8 <_raise_r>:
 80050f8:	291f      	cmp	r1, #31
 80050fa:	b538      	push	{r3, r4, r5, lr}
 80050fc:	4604      	mov	r4, r0
 80050fe:	460d      	mov	r5, r1
 8005100:	d904      	bls.n	800510c <_raise_r+0x14>
 8005102:	2316      	movs	r3, #22
 8005104:	6003      	str	r3, [r0, #0]
 8005106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800510e:	b112      	cbz	r2, 8005116 <_raise_r+0x1e>
 8005110:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005114:	b94b      	cbnz	r3, 800512a <_raise_r+0x32>
 8005116:	4620      	mov	r0, r4
 8005118:	f000 f830 	bl	800517c <_getpid_r>
 800511c:	462a      	mov	r2, r5
 800511e:	4601      	mov	r1, r0
 8005120:	4620      	mov	r0, r4
 8005122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005126:	f000 b817 	b.w	8005158 <_kill_r>
 800512a:	2b01      	cmp	r3, #1
 800512c:	d00a      	beq.n	8005144 <_raise_r+0x4c>
 800512e:	1c59      	adds	r1, r3, #1
 8005130:	d103      	bne.n	800513a <_raise_r+0x42>
 8005132:	2316      	movs	r3, #22
 8005134:	6003      	str	r3, [r0, #0]
 8005136:	2001      	movs	r0, #1
 8005138:	e7e7      	b.n	800510a <_raise_r+0x12>
 800513a:	2400      	movs	r4, #0
 800513c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005140:	4628      	mov	r0, r5
 8005142:	4798      	blx	r3
 8005144:	2000      	movs	r0, #0
 8005146:	e7e0      	b.n	800510a <_raise_r+0x12>

08005148 <raise>:
 8005148:	4b02      	ldr	r3, [pc, #8]	; (8005154 <raise+0xc>)
 800514a:	4601      	mov	r1, r0
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	f7ff bfd3 	b.w	80050f8 <_raise_r>
 8005152:	bf00      	nop
 8005154:	2000000c 	.word	0x2000000c

08005158 <_kill_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4d07      	ldr	r5, [pc, #28]	; (8005178 <_kill_r+0x20>)
 800515c:	2300      	movs	r3, #0
 800515e:	4604      	mov	r4, r0
 8005160:	4608      	mov	r0, r1
 8005162:	4611      	mov	r1, r2
 8005164:	602b      	str	r3, [r5, #0]
 8005166:	f7fb fe6b 	bl	8000e40 <_kill>
 800516a:	1c43      	adds	r3, r0, #1
 800516c:	d102      	bne.n	8005174 <_kill_r+0x1c>
 800516e:	682b      	ldr	r3, [r5, #0]
 8005170:	b103      	cbz	r3, 8005174 <_kill_r+0x1c>
 8005172:	6023      	str	r3, [r4, #0]
 8005174:	bd38      	pop	{r3, r4, r5, pc}
 8005176:	bf00      	nop
 8005178:	200003f0 	.word	0x200003f0

0800517c <_getpid_r>:
 800517c:	f7fb be58 	b.w	8000e30 <_getpid>

08005180 <__sread>:
 8005180:	b510      	push	{r4, lr}
 8005182:	460c      	mov	r4, r1
 8005184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005188:	f000 f8a8 	bl	80052dc <_read_r>
 800518c:	2800      	cmp	r0, #0
 800518e:	bfab      	itete	ge
 8005190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005192:	89a3      	ldrhlt	r3, [r4, #12]
 8005194:	181b      	addge	r3, r3, r0
 8005196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800519a:	bfac      	ite	ge
 800519c:	6563      	strge	r3, [r4, #84]	; 0x54
 800519e:	81a3      	strhlt	r3, [r4, #12]
 80051a0:	bd10      	pop	{r4, pc}

080051a2 <__swrite>:
 80051a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a6:	461f      	mov	r7, r3
 80051a8:	898b      	ldrh	r3, [r1, #12]
 80051aa:	05db      	lsls	r3, r3, #23
 80051ac:	4605      	mov	r5, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	4616      	mov	r6, r2
 80051b2:	d505      	bpl.n	80051c0 <__swrite+0x1e>
 80051b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b8:	2302      	movs	r3, #2
 80051ba:	2200      	movs	r2, #0
 80051bc:	f000 f868 	bl	8005290 <_lseek_r>
 80051c0:	89a3      	ldrh	r3, [r4, #12]
 80051c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ca:	81a3      	strh	r3, [r4, #12]
 80051cc:	4632      	mov	r2, r6
 80051ce:	463b      	mov	r3, r7
 80051d0:	4628      	mov	r0, r5
 80051d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051d6:	f000 b817 	b.w	8005208 <_write_r>

080051da <__sseek>:
 80051da:	b510      	push	{r4, lr}
 80051dc:	460c      	mov	r4, r1
 80051de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e2:	f000 f855 	bl	8005290 <_lseek_r>
 80051e6:	1c43      	adds	r3, r0, #1
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	bf15      	itete	ne
 80051ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80051ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051f6:	81a3      	strheq	r3, [r4, #12]
 80051f8:	bf18      	it	ne
 80051fa:	81a3      	strhne	r3, [r4, #12]
 80051fc:	bd10      	pop	{r4, pc}

080051fe <__sclose>:
 80051fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005202:	f000 b813 	b.w	800522c <_close_r>
	...

08005208 <_write_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d07      	ldr	r5, [pc, #28]	; (8005228 <_write_r+0x20>)
 800520c:	4604      	mov	r4, r0
 800520e:	4608      	mov	r0, r1
 8005210:	4611      	mov	r1, r2
 8005212:	2200      	movs	r2, #0
 8005214:	602a      	str	r2, [r5, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	f7fb fe49 	bl	8000eae <_write>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d102      	bne.n	8005226 <_write_r+0x1e>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	b103      	cbz	r3, 8005226 <_write_r+0x1e>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	bd38      	pop	{r3, r4, r5, pc}
 8005228:	200003f0 	.word	0x200003f0

0800522c <_close_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d06      	ldr	r5, [pc, #24]	; (8005248 <_close_r+0x1c>)
 8005230:	2300      	movs	r3, #0
 8005232:	4604      	mov	r4, r0
 8005234:	4608      	mov	r0, r1
 8005236:	602b      	str	r3, [r5, #0]
 8005238:	f7fb fe55 	bl	8000ee6 <_close>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_close_r+0x1a>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_close_r+0x1a>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	200003f0 	.word	0x200003f0

0800524c <_fstat_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d07      	ldr	r5, [pc, #28]	; (800526c <_fstat_r+0x20>)
 8005250:	2300      	movs	r3, #0
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	4611      	mov	r1, r2
 8005258:	602b      	str	r3, [r5, #0]
 800525a:	f7fb fe50 	bl	8000efe <_fstat>
 800525e:	1c43      	adds	r3, r0, #1
 8005260:	d102      	bne.n	8005268 <_fstat_r+0x1c>
 8005262:	682b      	ldr	r3, [r5, #0]
 8005264:	b103      	cbz	r3, 8005268 <_fstat_r+0x1c>
 8005266:	6023      	str	r3, [r4, #0]
 8005268:	bd38      	pop	{r3, r4, r5, pc}
 800526a:	bf00      	nop
 800526c:	200003f0 	.word	0x200003f0

08005270 <_isatty_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4d06      	ldr	r5, [pc, #24]	; (800528c <_isatty_r+0x1c>)
 8005274:	2300      	movs	r3, #0
 8005276:	4604      	mov	r4, r0
 8005278:	4608      	mov	r0, r1
 800527a:	602b      	str	r3, [r5, #0]
 800527c:	f7fb fe4f 	bl	8000f1e <_isatty>
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d102      	bne.n	800528a <_isatty_r+0x1a>
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	b103      	cbz	r3, 800528a <_isatty_r+0x1a>
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	bd38      	pop	{r3, r4, r5, pc}
 800528c:	200003f0 	.word	0x200003f0

08005290 <_lseek_r>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	4d07      	ldr	r5, [pc, #28]	; (80052b0 <_lseek_r+0x20>)
 8005294:	4604      	mov	r4, r0
 8005296:	4608      	mov	r0, r1
 8005298:	4611      	mov	r1, r2
 800529a:	2200      	movs	r2, #0
 800529c:	602a      	str	r2, [r5, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	f7fb fe48 	bl	8000f34 <_lseek>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d102      	bne.n	80052ae <_lseek_r+0x1e>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	b103      	cbz	r3, 80052ae <_lseek_r+0x1e>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	200003f0 	.word	0x200003f0

080052b4 <__malloc_lock>:
 80052b4:	4801      	ldr	r0, [pc, #4]	; (80052bc <__malloc_lock+0x8>)
 80052b6:	f7ff bc0d 	b.w	8004ad4 <__retarget_lock_acquire_recursive>
 80052ba:	bf00      	nop
 80052bc:	200003e4 	.word	0x200003e4

080052c0 <__malloc_unlock>:
 80052c0:	4801      	ldr	r0, [pc, #4]	; (80052c8 <__malloc_unlock+0x8>)
 80052c2:	f7ff bc08 	b.w	8004ad6 <__retarget_lock_release_recursive>
 80052c6:	bf00      	nop
 80052c8:	200003e4 	.word	0x200003e4

080052cc <_malloc_usable_size_r>:
 80052cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d0:	1f18      	subs	r0, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfbc      	itt	lt
 80052d6:	580b      	ldrlt	r3, [r1, r0]
 80052d8:	18c0      	addlt	r0, r0, r3
 80052da:	4770      	bx	lr

080052dc <_read_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	4d07      	ldr	r5, [pc, #28]	; (80052fc <_read_r+0x20>)
 80052e0:	4604      	mov	r4, r0
 80052e2:	4608      	mov	r0, r1
 80052e4:	4611      	mov	r1, r2
 80052e6:	2200      	movs	r2, #0
 80052e8:	602a      	str	r2, [r5, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f7fb fdc2 	bl	8000e74 <_read>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_read_r+0x1e>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_read_r+0x1e>
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	200003f0 	.word	0x200003f0

08005300 <_init>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	bf00      	nop
 8005304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005306:	bc08      	pop	{r3}
 8005308:	469e      	mov	lr, r3
 800530a:	4770      	bx	lr

0800530c <_fini>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	bf00      	nop
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr
